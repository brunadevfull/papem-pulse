{"file_contents":{"README.md":{"content":"# Welcome to your Lovable project\n\n## Project info\n\n**URL**: https://lovable.dev/projects/7fd407ef-d48b-415a-b99b-94a64eba7f8d\n\n## How can I edit this code?\n\nThere are several ways of editing your application.\n\n**Use Lovable**\n\nSimply visit the [Lovable Project](https://lovable.dev/projects/7fd407ef-d48b-415a-b99b-94a64eba7f8d) and start prompting.\n\nChanges made via Lovable will be committed automatically to this repo.\n\n**Use your preferred IDE**\n\nIf you want to work locally using your own IDE, you can clone this repo and push changes. Pushed changes will also be reflected in Lovable.\n\nThe only requirement is having Node.js & npm installed - [install with nvm](https://github.com/nvm-sh/nvm#installing-and-updating)\n\nFollow these steps:\n\n```sh\n# Step 1: Clone the repository using the project's Git URL.\ngit clone <YOUR_GIT_URL>\n\n# Step 2: Navigate to the project directory.\ncd <YOUR_PROJECT_NAME>\n\n# Step 3: Install the necessary dependencies.\nnpm i\n\n# Step 4: Start the development server with auto-reloading and an instant preview.\nnpm run dev\n```\n\n**Edit a file directly in GitHub**\n\n- Navigate to the desired file(s).\n- Click the \"Edit\" button (pencil icon) at the top right of the file view.\n- Make your changes and commit the changes.\n\n**Use GitHub Codespaces**\n\n- Navigate to the main page of your repository.\n- Click on the \"Code\" button (green button) near the top right.\n- Select the \"Codespaces\" tab.\n- Click on \"New codespace\" to launch a new Codespace environment.\n- Edit files directly within the Codespace and commit and push your changes once you're done.\n\n## What technologies are used for this project?\n\nThis project is built with:\n\n- Vite\n- TypeScript\n- React\n- shadcn-ui\n- Tailwind CSS\n\n## How can I deploy this project?\n\nSimply open [Lovable](https://lovable.dev/projects/7fd407ef-d48b-415a-b99b-94a64eba7f8d) and click on Share -> Publish.\n\n## Can I connect a custom domain to my Lovable project?\n\nYes, you can!\n\nTo connect a domain, navigate to Project > Settings > Domains and click Connect Domain.\n\nRead more here: [Setting up a custom domain](https://docs.lovable.dev/tips-tricks/custom-domain#step-by-step-guide)\n","size_bytes":2149},"eslint.config.js":{"content":"import js from \"@eslint/js\";\nimport globals from \"globals\";\nimport reactHooks from \"eslint-plugin-react-hooks\";\nimport reactRefresh from \"eslint-plugin-react-refresh\";\nimport tseslint from \"typescript-eslint\";\n\nexport default tseslint.config(\n  { ignores: [\"dist\"] },\n  {\n    extends: [js.configs.recommended, ...tseslint.configs.recommended],\n    files: [\"**/*.{ts,tsx}\"],\n    languageOptions: {\n      ecmaVersion: 2020,\n      globals: globals.browser,\n    },\n    plugins: {\n      \"react-hooks\": reactHooks,\n      \"react-refresh\": reactRefresh,\n    },\n    rules: {\n      ...reactHooks.configs.recommended.rules,\n      \"react-refresh/only-export-components\": [\n        \"warn\",\n        { allowConstantExport: true },\n      ],\n      \"@typescript-eslint/no-unused-vars\": \"off\",\n    },\n  }\n);\n","size_bytes":789},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n\tdarkMode: [\"class\"],\n\tcontent: [\n\t\t\"./pages/**/*.{ts,tsx}\",\n\t\t\"./components/**/*.{ts,tsx}\",\n\t\t\"./app/**/*.{ts,tsx}\",\n\t\t\"./src/**/*.{ts,tsx}\",\n\t],\n\tprefix: \"\",\n\ttheme: {\n\t\tcontainer: {\n\t\t\tcenter: true,\n\t\t\tpadding: '2rem',\n\t\t\tscreens: {\n\t\t\t\t'2xl': '1400px'\n\t\t\t}\n\t\t},\n\t\textend: {\n\t\t\tbackgroundImage: {\n\t\t\t\t'gradient-primary': 'var(--gradient-primary)',\n\t\t\t\t'gradient-secondary': 'var(--gradient-secondary)',\n\t\t\t\t'gradient-hero': 'var(--gradient-hero)',\n\t\t\t\t'gradient-card': 'var(--gradient-card)',\n\t\t\t\t'gradient-naval': 'var(--gradient-naval)',\n\t\t\t\t'gradient-glass': 'var(--gradient-glass)'\n\t\t\t},\n\t\t\tboxShadow: {\n\t\t\t\t'custom-sm': 'var(--shadow-sm)',\n\t\t\t\t'custom-md': 'var(--shadow-md)',\n\t\t\t\t'custom-lg': 'var(--shadow-lg)',\n\t\t\t\t'custom-xl': 'var(--shadow-xl)'\n\t\t\t},\n\t\t\tbackdropBlur: {\n\t\t\t\t'xs': '2px',\n\t\t\t},\n\t\t\tcolors: {\n\t\t\t\tborder: 'hsl(var(--border))',\n\t\t\t\tinput: 'hsl(var(--input))',\n\t\t\t\tring: 'hsl(var(--ring))',\n\t\t\t\tbackground: 'hsl(var(--background))',\n\t\t\t\tforeground: 'hsl(var(--foreground))',\n\t\t\t\tprimary: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--primary))',\n\t\t\t\t\tforeground: 'hsl(var(--primary-foreground))',\n\t\t\t\t\thover: 'hsl(var(--primary-hover))',\n\t\t\t\t\tlight: 'hsl(var(--primary-light))',\n\t\t\t\t\tglow: 'hsl(var(--primary-glow))'\n\t\t\t\t},\n\t\t\t\tsecondary: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--secondary))',\n\t\t\t\t\tforeground: 'hsl(var(--secondary-foreground))'\n\t\t\t\t},\n\t\t\t\tdestructive: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--destructive))',\n\t\t\t\t\tforeground: 'hsl(var(--destructive-foreground))'\n\t\t\t\t},\n\t\t\t\tsuccess: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--success))',\n\t\t\t\t\tforeground: 'hsl(var(--success-foreground))',\n\t\t\t\t\tlight: 'hsl(var(--success-light))'\n\t\t\t\t},\n\t\t\t\twarning: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--warning))',\n\t\t\t\t\tforeground: 'hsl(var(--warning-foreground))',\n\t\t\t\t\tlight: 'hsl(var(--warning-light))'\n\t\t\t\t},\n\t\t\t\tmuted: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--muted))',\n\t\t\t\t\tforeground: 'hsl(var(--muted-foreground))'\n\t\t\t\t},\n\t\t\t\taccent: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--accent))',\n\t\t\t\t\tforeground: 'hsl(var(--accent-foreground))',\n\t\t\t\t\tlight: 'hsl(var(--accent-light))'\n\t\t\t\t},\n\t\t\t\tpopover: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--popover))',\n\t\t\t\t\tforeground: 'hsl(var(--popover-foreground))'\n\t\t\t\t},\n\t\t\t\tcard: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--card))',\n\t\t\t\t\tforeground: 'hsl(var(--card-foreground))'\n\t\t\t\t},\n\t\t\t\t'naval-gold': 'hsl(var(--naval-gold))',\n\t\t\t\t'naval-burgundy': 'hsl(var(--naval-burgundy))',\n\t\t\t\tsidebar: {\n\t\t\t\t\tDEFAULT: 'hsl(var(--sidebar-background))',\n\t\t\t\t\tforeground: 'hsl(var(--sidebar-foreground))',\n\t\t\t\t\tprimary: 'hsl(var(--sidebar-primary))',\n\t\t\t\t\t'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n\t\t\t\t\taccent: 'hsl(var(--sidebar-accent))',\n\t\t\t\t\t'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n\t\t\t\t\tborder: 'hsl(var(--sidebar-border))',\n\t\t\t\t\tring: 'hsl(var(--sidebar-ring))'\n\t\t\t\t}\n\t\t\t},\n\t\t\tborderRadius: {\n\t\t\t\tlg: 'var(--radius)',\n\t\t\t\tmd: 'calc(var(--radius) - 2px)',\n\t\t\t\tsm: 'calc(var(--radius) - 4px)'\n\t\t\t},\n\t\t\tkeyframes: {\n\t\t\t\t'accordion-down': {\n\t\t\t\t\tfrom: { height: '0' },\n\t\t\t\t\tto: { height: 'var(--radix-accordion-content-height)' }\n\t\t\t\t},\n\t\t\t\t'accordion-up': {\n\t\t\t\t\tfrom: { height: 'var(--radix-accordion-content-height)' },\n\t\t\t\t\tto: { height: '0' }\n\t\t\t\t},\n\t\t\t\t'float': {\n\t\t\t\t\t'0%, 100%': { transform: 'translateY(0px)' },\n\t\t\t\t\t'50%': { transform: 'translateY(-10px)' }\n\t\t\t\t},\n\t\t\t\t'fade-in': {\n\t\t\t\t\t'0%': { opacity: '0', transform: 'translateY(10px)' },\n\t\t\t\t\t'100%': { opacity: '1', transform: 'translateY(0)' }\n\t\t\t\t},\n\t\t\t\t'slide-up': {\n\t\t\t\t\t'0%': { opacity: '0', transform: 'translateY(20px)' },\n\t\t\t\t\t'100%': { opacity: '1', transform: 'translateY(0)' }\n\t\t\t\t},\n\t\t\t\t'scale-in': {\n\t\t\t\t\t'0%': { transform: 'scale(0.95)', opacity: '0' },\n\t\t\t\t\t'100%': { transform: 'scale(1)', opacity: '1' }\n\t\t\t\t},\n\t\t\t\t'glow': {\n\t\t\t\t\t'0%, 100%': { opacity: '1' },\n\t\t\t\t\t'50%': { opacity: '0.8' }\n\t\t\t\t},\n\t\t\t\t'shimmer': {\n\t\t\t\t\t'0%': { transform: 'translateX(-100%)' },\n\t\t\t\t\t'100%': { transform: 'translateX(100%)' }\n\t\t\t\t},\n\t\t\t\t'gradient': {\n\t\t\t\t\t'0%, 100%': { backgroundPosition: '0% 50%' },\n\t\t\t\t\t'50%': { backgroundPosition: '100% 50%' }\n\t\t\t\t},\n\t\t\t\t'pulse-slow': {\n\t\t\t\t\t'0%, 100%': { opacity: '1' },\n\t\t\t\t\t'50%': { opacity: '0.7' }\n\t\t\t\t},\n\t\t\t\t'bounce-subtle': {\n\t\t\t\t\t'0%, 100%': { transform: 'translateY(0)' },\n\t\t\t\t\t'50%': { transform: 'translateY(-2px)' }\n\t\t\t\t}\n\t\t\t},\n\t\t\tanimation: {\n\t\t\t\t'accordion-down': 'accordion-down 0.2s ease-out',\n\t\t\t\t'accordion-up': 'accordion-up 0.2s ease-out',\n\t\t\t\t'float': 'float 6s ease-in-out infinite',\n\t\t\t\t'fade-in': 'fade-in 0.6s ease-out',\n\t\t\t\t'slide-up': 'slide-up 0.5s ease-out',\n\t\t\t\t'scale-in': 'scale-in 0.3s ease-out',\n\t\t\t\t'glow': 'glow 2s ease-in-out infinite',\n\t\t\t\t'shimmer': 'shimmer 2s linear infinite',\n\t\t\t\t'gradient': 'gradient 3s ease infinite',\n\t\t\t\t'pulse-slow': 'pulse-slow 3s ease-in-out infinite',\n\t\t\t\t'bounce-subtle': 'bounce-subtle 2s ease-in-out infinite'\n\t\t\t}\n\t\t}\n\t},\n\tplugins: [require(\"tailwindcss-animate\")],\n} satisfies Config;\n","size_bytes":4895},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react-swc\";\nimport path from \"path\";\nimport { componentTagger } from \"lovable-tagger\";\n\n// https://vitejs.dev/config/\nexport default defineConfig(({ mode }) => ({\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    strictPort: true,\n    allowedHosts: true,\n    proxy: {\n      '/api': {\n        target: 'http://localhost:3001',\n        changeOrigin: true,\n        secure: false,\n      },\n    },\n  },\n  plugins: [\n    react(),\n    mode === 'development' &&\n    componentTagger(),\n  ].filter(Boolean),\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n      \"@shared\": path.resolve(__dirname, \"./shared\"),\n    },\n  },\n}));\n","size_bytes":713},"src/App.css":{"content":"#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n","size_bytes":606},"src/App.tsx":{"content":"import { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { AppLayout } from \"./components/layout/AppLayout\";\nimport Index from \"./pages/Index\";\nimport Survey from \"./pages/Survey\";\nimport Admin from \"./pages/Admin\";\nimport NotFound from \"./pages/NotFound\";\n\nconst queryClient = new QueryClient();\n\nconst App = () => (\n  <QueryClientProvider client={queryClient}>\n    <TooltipProvider>\n      <Toaster />\n      <Sonner />\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<AppLayout />}>\n            <Route index element={<Survey />} />\n            <Route path=\"survey\" element={<Survey />} />\n            <Route path=\"admin\" element={<Admin />} />\n          </Route>\n          {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL \"*\" ROUTE */}\n          <Route path=\"*\" element={<NotFound />} />\n        </Routes>\n      </BrowserRouter>\n    </TooltipProvider>\n  </QueryClientProvider>\n);\n\nexport default App;\n","size_bytes":1184},"src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* PAPEM Design System - Identidade Visual Naval Moderna */\n\n@layer base {\n  :root {\n    /* Base colors - Modern neutral palette */\n    --background: 210 30% 98%;\n    --foreground: 220 20% 15%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 220 20% 15%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 220 20% 15%;\n\n    /* PAPEM Naval Colors - Exact colors from style guide */\n    --primary: 207 100% 29%;        /* #005b94 - Exact PAPEM blue */\n    --primary-foreground: 0 0% 100%;\n    --primary-hover: 207 100% 24%;  /* #004a7c - Darker PAPEM blue */\n    --primary-light: 220 70% 60%;\n    --primary-glow: 220 100% 70%;\n\n    --secondary: 210 40% 96%;\n    --secondary-foreground: 220 20% 15%;\n\n    --muted: 210 35% 96%;\n    --muted-foreground: 220 15% 45%;\n\n    --accent: 350 85% 45%;           /* Bordô/vinho do brasão */\n    --accent-foreground: 0 0% 100%;\n    --accent-light: 350 60% 85%;\n\n    /* Modern institutional colors */\n    --naval-gold: 42 88% 55%;        /* Dourado moderno */\n    --naval-burgundy: 350 65% 35%;   /* Bordô refinado */\n    --naval-silver: 210 10% 85%;     /* Prata suave */\n\n    --destructive: 0 84% 60%;\n    --destructive-foreground: 0 0% 100%;\n\n    --success: 142 76% 36%;\n    --success-foreground: 0 0% 100%;\n    --success-light: 142 50% 95%;\n\n    --warning: 38 92% 50%;\n    --warning-foreground: 0 0% 100%;\n    --warning-light: 38 100% 95%;\n\n    --border: 220 20% 90%;\n    --input: 220 20% 94%;\n    --ring: 220 100% 25%;\n\n    /* Modern Gradients - Updated with PAPEM colors */\n    --gradient-primary: linear-gradient(135deg, hsl(207, 100%, 29%) 0%, hsl(207, 100%, 35%) 50%, hsl(207, 100%, 24%) 100%);\n    --gradient-secondary: linear-gradient(135deg, hsl(210, 40%, 98%) 0%, hsl(220, 50%, 97%) 100%);\n    --gradient-hero: linear-gradient(135deg, hsl(207, 100%, 24%) 0%, hsl(207, 100%, 29%) 100%);\n    --gradient-card: linear-gradient(145deg, hsl(0, 0%, 100%) 0%, hsl(210, 25%, 99%) 100%);\n    --gradient-accent: linear-gradient(135deg, hsl(350, 85%, 45%) 0%, hsl(350, 85%, 55%) 100%);\n    --gradient-naval: linear-gradient(135deg, hsl(207, 100%, 29%) 0%, hsl(207, 100%, 35%) 100%);\n    --gradient-glass: linear-gradient(135deg, rgba(255, 255, 255, 0.4) 0%, rgba(255, 255, 255, 0.1) 100%);\n    --gradient-subtle: linear-gradient(145deg, hsl(210, 30%, 99%) 0%, hsl(220, 20%, 98%) 100%);\n\n    /* Enhanced Shadows */\n    --shadow-sm: 0 1px 3px 0 hsl(220, 50%, 20%, 0.08);\n    --shadow-md: 0 4px 12px -2px hsl(220, 50%, 20%, 0.12);\n    --shadow-lg: 0 10px 25px -3px hsl(220, 50%, 20%, 0.15);\n    --shadow-xl: 0 20px 40px -4px hsl(220, 50%, 20%, 0.20);\n    --shadow-2xl: 0 25px 50px -12px hsl(220, 50%, 20%, 0.25);\n\n    /* Animation Variables */\n    --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    --transition-bounce: all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n    --transition-micro: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n    --transition-gentle: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n    \n    /* Advanced UI Variables */\n    --blur-glass: blur(16px);\n    --blur-subtle: blur(8px);\n    --scale-hover: 1.02;\n    --scale-active: 0.98;\n\n    --radius: 1rem;\n\n    --sidebar-background: 0 0% 98%;\n    --sidebar-foreground: 240 5.3% 26.1%;\n    --sidebar-primary: 240 5.9% 10%;\n    --sidebar-primary-foreground: 0 0% 98%;\n    --sidebar-accent: 240 4.8% 95.9%;\n    --sidebar-accent-foreground: 240 5.9% 10%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n/* Modern UI Components */\n@layer components {\n  /* Survey Cards */\n  .survey-card {\n    @apply bg-gradient-card border border-border shadow-md hover:shadow-lg transition-all duration-300;\n    backdrop-filter: blur(10px);\n  }\n\n  .survey-card-enhanced {\n    @apply bg-gradient-card border border-border shadow-lg hover:shadow-xl transition-all duration-300;\n    background: var(--gradient-subtle);\n    backdrop-filter: blur(10px);\n  }\n\n  /* Modern Buttons */\n  .modern-button {\n    @apply font-medium rounded-xl px-6 py-3 transition-all duration-300 shadow-sm hover:shadow-md;\n    background: var(--gradient-primary);\n  }\n\n  .modern-button-outline {\n    @apply font-medium rounded-xl px-6 py-3 border-2 border-primary/20 bg-white/80 hover:bg-primary/5 transition-all duration-300;\n    backdrop-filter: blur(10px);\n  }\n\n  /* Question Cards - Following PAPEM Style Guide */\n  .question-card {\n    @apply bg-gradient-to-br from-white/80 to-white/60 border border-slate-200/70 backdrop-blur-sm;\n    @apply rounded-2xl shadow-lg transition-all duration-300 hover:shadow-xl;\n    @apply animate-fade-in;\n  }\n\n  .question-card-error {\n    @apply border-destructive/50 shadow-destructive/10;\n  }\n\n  /* Option Button Styles - Following PAPEM Style Guide */\n  .option-button {\n    @apply px-5 py-4 rounded-xl text-sm font-semibold transition-all duration-200 cursor-pointer;\n    @apply flex items-center justify-center;\n    @apply hover:scale-[1.02] active:scale-[0.98];\n    animation: slide-up 0.4s ease-out forwards;\n    opacity: 0;\n    transform: translateY(20px);\n  }\n\n  .option-button-selected {\n    @apply bg-[#005b94] text-white border-2 border-[#004a7c] shadow-md;\n    @apply hover:bg-[#004a7c] hover:shadow-lg;\n  }\n\n  .option-button-unselected {\n    @apply bg-slate-100 text-slate-700 border-2 border-slate-200;\n    @apply hover:bg-slate-200 hover:border-slate-300;\n  }\n\n  /* Progress Elements */\n  .progress-circle {\n    @apply w-10 h-10 rounded-full border-2 flex items-center justify-center font-bold transition-all duration-300;\n  }\n\n  .progress-circle-active {\n    @apply text-white shadow-lg scale-110;\n    background: var(--gradient-primary);\n    border-color: hsl(var(--primary));\n  }\n\n  .progress-circle-completed {\n    @apply bg-success text-white border-success shadow-md;\n  }\n\n  .progress-circle-inactive {\n    @apply bg-white border-border text-muted-foreground;\n  }\n\n  /* Naval Decorative Elements */\n  .naval-accent {\n    position: relative;\n  }\n\n  .naval-accent::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    height: 3px;\n    background: var(--gradient-primary);\n    border-radius: 0 0 8px 8px;\n  }\n\n  /* Advanced UI Classes */\n  .question-card-enhanced {\n    @apply relative bg-white rounded-2xl border border-slate-200 shadow-sm;\n    @apply hover:shadow-md hover:border-primary/20 transition-all duration-300;\n    @apply focus-within:shadow-lg focus-within:border-primary/40;\n    background: linear-gradient(145deg, rgba(255,255,255,0.95) 0%, rgba(248,250,252,0.95) 100%);\n  }\n\n  .option-button-enhanced {\n    @apply relative rounded-xl border-2 font-medium transition-all duration-200;\n    @apply hover:scale-[1.02] active:scale-[0.98];\n    @apply focus:outline-none focus:ring-2 focus:ring-primary/30 focus:ring-offset-2;\n    transform-origin: center;\n  }\n\n  .option-button-selected-enhanced {\n    @apply bg-gradient-to-r from-primary to-primary-hover text-white border-primary;\n    @apply shadow-lg shadow-primary/25 hover:shadow-xl hover:shadow-primary/30;\n    @apply scale-[1.02];\n  }\n\n  .option-button-unselected-enhanced {\n    @apply bg-white border-slate-200 text-slate-700;\n    @apply hover:bg-slate-50 hover:border-slate-300 hover:text-slate-800;\n    @apply hover:shadow-sm;\n  }\n\n  .progress-bar-enhanced {\n    @apply relative h-2 bg-slate-100 rounded-full overflow-hidden;\n  }\n\n  .progress-fill-enhanced {\n    @apply h-full rounded-full transition-all duration-700 ease-out;\n    background: linear-gradient(90deg, #22c55e 0%, #16a34a 50%, #15803d 100%);\n    box-shadow: 0 0 20px rgba(34, 197, 94, 0.3);\n  }\n\n  .section-indicator-enhanced {\n    @apply flex items-center gap-3 px-4 py-3 rounded-xl transition-all duration-300;\n    @apply hover:bg-slate-50 cursor-pointer;\n  }\n\n  .section-indicator-active {\n    @apply bg-primary/10 border border-primary/20 shadow-sm;\n  }\n\n  .floating-feedback {\n    animation: float 3s ease-in-out infinite;\n  }\n\n  .pulse-success {\n    animation: pulse-success 0.6s ease-out;\n  }\n\n  .micro-bounce {\n    animation: micro-bounce 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n  }\n\n  /* Subtle animations */\n  .fade-in {\n    animation: fadeIn 0.6s ease-out;\n  }\n\n  .slide-up {\n    animation: slideUp 0.5s ease-out;\n  }\n\n  @keyframes fadeIn {\n    from { opacity: 0; transform: translateY(10px); }\n    to { opacity: 1; transform: translateY(0); }\n  }\n\n  @keyframes slideUp {\n    from { opacity: 0; transform: translateY(20px); }\n    to { opacity: 1; transform: translateY(0); }\n  }\n\n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-4px); }\n  }\n\n  @keyframes pulse-success {\n    0% { transform: scale(1); box-shadow: 0 0 0 0 rgba(34, 197, 94, 0.4); }\n    50% { transform: scale(1.05); box-shadow: 0 0 0 8px rgba(34, 197, 94, 0); }\n    100% { transform: scale(1); box-shadow: 0 0 0 0 rgba(34, 197, 94, 0); }\n  }\n\n  @keyframes micro-bounce {\n    0% { transform: scale(1); }\n    50% { transform: scale(1.1); }\n    100% { transform: scale(1); }\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n\n  /* Custom scrollbar */\n  ::-webkit-scrollbar {\n    width: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    @apply bg-muted/30;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    @apply bg-primary/50 rounded-full;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    @apply bg-primary/70;\n  }\n}","size_bytes":10490},"src/main.tsx":{"content":"import { createRoot } from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":158},"src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"src/pages/Admin.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { BarChart3, Users, TrendingUp, AlertTriangle, Target, Award, Building2, MessageSquare } from \"lucide-react\";\nimport { StatsOverview } from \"@/components/admin/StatsOverview\";\nimport { EnvironmentCharts } from \"@/components/admin/EnvironmentCharts\";\nimport { RelationshipCharts } from \"@/components/admin/RelationshipCharts\";\nimport { MotivationCharts } from \"@/components/admin/MotivationCharts\";\nimport { DetailedAnalysis } from \"@/components/admin/DetailedAnalysis\";\nimport { OpenAnswersSection } from \"@/components/admin/OpenAnswersSection\";\nimport { RealTimeStats } from \"@/components/admin/RealTimeStats\";\nimport { AdminAuth } from \"@/components/admin/AdminAuth\";\n\nexport default function Admin() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  if (!isAuthenticated) {\n    return <AdminAuth onAuthenticated={() => setIsAuthenticated(true)} />;\n  }\n  return (\n      <div className=\"p-6 space-y-6 bg-gray-50 min-h-screen\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight text-gray-900\">Dashboard Administrativo</h1>\n            <p className=\"text-gray-600\">Análise dos resultados da pesquisa de clima organizacional</p>\n          </div>\n        </div>\n\n        {/* Stats Overview */}\n        <StatsOverview />\n\n        {/* Main Analysis */}\n        <Card className=\"shadow-custom-md\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"w-5 h-5\" />\n              Análise Detalhada por Categorias\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"environment\" className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-5\">\n                <TabsTrigger value=\"environment\" className=\"flex items-center gap-2\">\n                  <Building2 className=\"w-4 h-4\" />\n                  Ambiente\n                </TabsTrigger>\n                <TabsTrigger value=\"relationship\" className=\"flex items-center gap-2\">\n                  <Users className=\"w-4 h-4\" />\n                  Relacionamento\n                </TabsTrigger>\n                <TabsTrigger value=\"motivation\" className=\"flex items-center gap-2\">\n                  <Award className=\"w-4 h-4\" />\n                  Motivação\n                </TabsTrigger>\n                <TabsTrigger value=\"comments\" className=\"flex items-center gap-2\">\n                  <MessageSquare className=\"w-4 h-4\" />\n                  Comentários\n                </TabsTrigger>\n                <TabsTrigger value=\"analysis\" className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"w-4 h-4\" />\n                  Análise Detalhada\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"environment\">\n                <EnvironmentCharts />\n              </TabsContent>\n\n              <TabsContent value=\"relationship\">\n                <RelationshipCharts />\n              </TabsContent>\n\n              <TabsContent value=\"motivation\">\n                <MotivationCharts />\n              </TabsContent>\n\n              <TabsContent value=\"comments\">\n                <OpenAnswersSection />\n              </TabsContent>\n\n              <TabsContent value=\"analysis\">\n                <DetailedAnalysis />\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n  );\n}","size_bytes":3773},"src/pages/Index.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ClipboardList, BarChart3, Shield, Users, Target, ArrowRight, Sparkles, Zap, TrendingUp, Award } from \"lucide-react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Index = () => {\n  const navigate = useNavigate();\n\n  const features = [\n    {\n      icon: Shield,\n      title: \"Pesquisa Anônima\",\n      description: \"Complete anonimato garantido em todas as respostas coletadas\",\n      color: \"text-success\",\n      bgColor: \"bg-success/10\",\n      borderColor: \"border-success/20\"\n    },\n    {\n      icon: Users,\n      title: \"Análise Segmentada\", \n      description: \"Resultados organizados por setor, função e outras dimensões\",\n      color: \"text-primary\",\n      bgColor: \"bg-primary/10\",\n      borderColor: \"border-primary/20\"\n    },\n    {\n      icon: Target,\n      title: \"Insights Acionáveis\",\n      description: \"Recomendações práticas baseadas nos dados coletados\",\n      color: \"text-accent\",\n      bgColor: \"bg-accent/10\",\n      borderColor: \"border-accent/20\"\n    }\n  ];\n\n  const stats = [\n    { icon: Users, value: \"100%\", label: \"Anônimo\", color: \"text-success\" },\n    { icon: Zap, value: \"15min\", label: \"Tempo Médio\", color: \"text-warning\" },\n    { icon: TrendingUp, value: \"3\", label: \"Seções\", color: \"text-primary\" },\n    { icon: Award, value: \"42\", label: \"Perguntas\", color: \"text-accent\" }\n  ];\n\n  return (\n    <div className=\"space-y-12 animate-slide-up\">\n      {/* Hero Section */}\n      <Card className=\"bg-gradient-hero text-primary-foreground shadow-neon overflow-hidden relative border-0\">\n        {/* Animated background elements */}\n        <div className=\"absolute inset-0 bg-gradient-mesh opacity-40 animate-gradient bg-[length:400%_400%]\"></div>\n        <div className=\"absolute top-0 left-0 w-full h-1 bg-gradient-primary animate-shimmer overflow-hidden\">\n          <div className=\"absolute inset-0 -skew-x-12 bg-gradient-to-r from-transparent via-white/50 to-transparent animate-shimmer\"></div>\n        </div>\n        \n        <CardHeader className=\"pb-8 relative z-10\">\n          <div className=\"flex items-center gap-6 mb-6\">\n            <div className=\"w-20 h-20 bg-gradient-glass rounded-3xl flex items-center justify-center backdrop-blur-sm shadow-neon animate-float border border-white/20\">\n              <ClipboardList className=\"w-10 h-10 animate-pulse-slow\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-4xl mb-3 font-bold\">\n                Sistema PAPEM\n              </CardTitle>\n              <CardDescription className=\"text-primary-foreground/90 text-xl font-medium flex items-center gap-2\">\n                <Sparkles className=\"w-5 h-5 animate-glow\" />\n                Pesquisa de Clima Organizacional\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"relative z-10\">\n          <p className=\"text-xl mb-8 text-primary-foreground/90 leading-relaxed font-medium\">\n            Bem-vindo ao sistema de pesquisa de clima organizacional da PAPEM. \n            Nossa plataforma permite a coleta e análise de feedback anônimo para \n            melhorar continuamente o ambiente de trabalho.\n          </p>\n          \n          {/* Stats Row */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n            {stats.map((stat, index) => {\n              const IconComponent = stat.icon;\n              return (\n                <div key={index} className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-4 border border-white/20 text-center animate-scale-in\" style={{ animationDelay: `${index * 0.1}s` }}>\n                  <IconComponent className={`w-6 h-6 mx-auto mb-2 ${stat.color} animate-float`} style={{ animationDelay: `${index * 0.5}s` }} />\n                  <div className=\"text-2xl font-bold mb-1\">{stat.value}</div>\n                  <div className=\"text-sm text-primary-foreground/80\">{stat.label}</div>\n                </div>\n              );\n            })}\n          </div>\n          \n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <Button \n              onClick={() => navigate(\"/survey\")}\n              className=\"bg-white text-primary hover:bg-white/90 flex items-center gap-3 px-8 py-4 text-lg font-semibold shadow-xl hover:shadow-neon transition-all duration-300 hover:scale-105 rounded-2xl\"\n            >\n              <ClipboardList className=\"w-6 h-6\" />\n              Participar da Pesquisa\n              <ArrowRight className=\"w-5 h-5 animate-pulse-slow\" />\n            </Button>\n            \n            <Button \n              onClick={() => navigate(\"/admin\")}\n              variant=\"outline\" \n              className=\"border-white/30 bg-white/10 text-white hover:bg-white/20 flex items-center gap-3 px-8 py-4 text-lg font-semibold backdrop-blur-sm rounded-2xl transition-all duration-300 hover:scale-105\"\n            >\n              <BarChart3 className=\"w-6 h-6\" />\n              Ver Dashboard\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Features Grid */}\n      <div className=\"grid gap-8 md:grid-cols-3\">\n        {features.map((feature, index) => {\n          const IconComponent = feature.icon;\n          return (\n            <Card key={index} className=\"bg-gradient-card shadow-custom-xl hover:shadow-neon transition-all duration-500 hover:-translate-y-2 group relative overflow-hidden border-0 animate-scale-in\" style={{ animationDelay: `${index * 0.1}s` }}>\n              {/* Gradient border effect */}\n              <div className=\"absolute inset-0 bg-gradient-primary opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-2xl blur-sm\"></div>\n              <div className=\"absolute inset-0.5 bg-gradient-card rounded-2xl\"></div>\n              \n              <CardHeader className=\"relative z-10\">\n                <div className={`w-16 h-16 ${feature.bgColor} rounded-3xl flex items-center justify-center mb-6 shadow-glow group-hover:scale-110 transition-transform duration-300 border ${feature.borderColor}`}>\n                  <IconComponent className={`w-8 h-8 ${feature.color} animate-float`} style={{ animationDelay: `${index * 0.3}s` }} />\n                </div>\n                <CardTitle className=\"text-xl mb-3 group-hover:text-primary transition-colors\">{feature.title}</CardTitle>\n              </CardHeader>\n              <CardContent className=\"relative z-10\">\n                <CardDescription className=\"text-base leading-relaxed\">\n                  {feature.description}\n                </CardDescription>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Information Cards */}\n      <div className=\"grid gap-8 lg:grid-cols-2\">\n        <Card className=\"bg-gradient-card shadow-custom-xl hover:shadow-neon transition-all duration-300 hover:-translate-y-1 relative overflow-hidden group border-0\">\n          <div className=\"absolute inset-0 bg-gradient-primary opacity-0 group-hover:opacity-5 transition-opacity duration-300\"></div>\n          <CardHeader className=\"relative z-10\">\n            <CardTitle className=\"flex items-center gap-3 text-xl\">\n              <div className=\"w-10 h-10 bg-primary/10 rounded-2xl flex items-center justify-center\">\n                <ClipboardList className=\"w-6 h-6 text-primary animate-pulse-slow\" />\n              </div>\n              Como Funciona a Pesquisa\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6 relative z-10\">\n            <div className=\"space-y-5\">\n              <div className=\"flex gap-4 group/item\">\n                <div className=\"w-10 h-10 bg-gradient-primary rounded-2xl flex items-center justify-center flex-shrink-0 shadow-glow\">\n                  <span className=\"text-sm font-bold text-primary-foreground\">1</span>\n                </div>\n                <div className=\"space-y-1\">\n                  <h4 className=\"font-semibold text-base group-hover/item:text-primary transition-colors\">Seção 1: Ambiente de Trabalho</h4>\n                  <p className=\"text-sm text-muted-foreground\">Condições físicas, recursos e TFM</p>\n                </div>\n              </div>\n              <div className=\"flex gap-4 group/item\">\n                <div className=\"w-10 h-10 bg-gradient-accent rounded-2xl flex items-center justify-center flex-shrink-0 shadow-glow\">\n                  <span className=\"text-sm font-bold text-accent-foreground\">2</span>\n                </div>\n                <div className=\"space-y-1\">\n                  <h4 className=\"font-semibold text-base group-hover/item:text-accent transition-colors\">Seção 2: Relacionamento</h4>\n                  <p className=\"text-sm text-muted-foreground\">Liderança, equipe e comunicação</p>\n                </div>\n              </div>\n              <div className=\"flex gap-4 group/item\">\n                <div className=\"w-10 h-10 bg-success/90 rounded-2xl flex items-center justify-center flex-shrink-0 shadow-glow\">\n                  <span className=\"text-sm font-bold text-success-foreground\">3</span>\n                </div>\n                <div className=\"space-y-1\">\n                  <h4 className=\"font-semibold text-base group-hover/item:text-success transition-colors\">Seção 3: Motivação</h4>\n                  <p className=\"text-sm text-muted-foreground\">Desenvolvimento e reconhecimento</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"pt-6 border-t border-border/50\">\n              <div className=\"flex items-center gap-3 text-sm\">\n                <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\"></div>\n                <span className=\"text-muted-foreground\">\n                  <strong className=\"text-foreground\">Tempo estimado:</strong> 10-15 minutos para completar\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-card shadow-custom-xl hover:shadow-neon transition-all duration-300 hover:-translate-y-1 relative overflow-hidden group border-0\">\n          <div className=\"absolute inset-0 bg-success/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n          <CardHeader className=\"relative z-10\">\n            <CardTitle className=\"flex items-center gap-3 text-xl\">\n              <div className=\"w-10 h-10 bg-success/10 rounded-2xl flex items-center justify-center\">\n                <Shield className=\"w-6 h-6 text-success animate-glow\" />\n              </div>\n              Garantia de Anonimato\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6 relative z-10\">\n            <div className=\"bg-gradient-glass border border-success/30 p-6 rounded-2xl backdrop-blur-sm shadow-glow\">\n              <p className=\"text-sm text-success-foreground flex items-start gap-3\">\n                <Sparkles className=\"w-5 h-5 text-success flex-shrink-0 mt-0.5 animate-pulse-slow\" />\n                <span>\n                  <strong className=\"text-base\">100% Anônimo:</strong> Nenhuma informação pessoal é coletada ou associada às suas respostas.\n                </span>\n              </p>\n            </div>\n            <div className=\"space-y-4 text-sm\">\n              <div className=\"flex items-start gap-3 group/item\">\n                <div className=\"w-2 h-2 bg-success rounded-full mt-2 flex-shrink-0 animate-pulse\"></div>\n                <span className=\"group-hover/item:text-foreground transition-colors\">Não solicitamos nome, matrícula ou qualquer identificação</span>\n              </div>\n              <div className=\"flex items-start gap-3 group/item\">\n                <div className=\"w-2 h-2 bg-success rounded-full mt-2 flex-shrink-0 animate-pulse\" style={{ animationDelay: '0.5s' }}></div>\n                <span className=\"group-hover/item:text-foreground transition-colors\">Dados agregados utilizados apenas para análises estatísticas</span>\n              </div>\n              <div className=\"flex items-start gap-3 group/item\">\n                <div className=\"w-2 h-2 bg-success rounded-full mt-2 flex-shrink-0 animate-pulse\" style={{ animationDelay: '1s' }}></div>\n                <span className=\"group-hover/item:text-foreground transition-colors\">Respostas individuais não são rastreáveis</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Index;\n","size_bytes":12592},"src/pages/NotFound.tsx":{"content":"import { useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\nconst NotFound = () => {\n  const location = useLocation();\n\n  useEffect(() => {\n    console.error(\n      \"404 Error: User attempted to access non-existent route:\",\n      location.pathname\n    );\n  }, [location.pathname]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">404</h1>\n        <p className=\"text-xl text-gray-600 mb-4\">Oops! Page not found</p>\n        <a href=\"/\" className=\"text-blue-500 hover:text-blue-700 underline\">\n          Return to Home\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":739},"src/pages/Survey.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { CheckCircle2, ClipboardList, ArrowRight, ArrowLeft, Anchor, Shield, Star, Waves, BarChart3, Save, Info } from \"lucide-react\";\nimport { NavLink } from \"react-router-dom\";\nimport { SurveySection1 } from \"@/components/survey/SurveySection1\";\nimport { SurveySection2 } from \"@/components/survey/SurveySection2\";\nimport { SurveySection3 } from \"@/components/survey/SurveySection3\";\nimport { SurveySection4 } from \"@/components/survey/SurveySection4\";\nimport { SuccessMessage } from \"@/components/survey/SuccessMessage\";\n\ntype SurveyData = {\n  // Section 1\n  setor_trabalho: string;\n  materiais_fornecidos: string;\n  materiais_adequados: string;\n  atendimento_apoio: string;\n  limpeza_adequada: string;\n  temperatura_adequada: string;\n  iluminacao_adequada: string;\n  localizacao_alojamento: string;\n  alojamento_condicoes: string;\n  banheiros_adequados: string;\n  praca_darmas_adequada: string;\n  localizacao_rancho: string;\n  rancho_instalacoes: string;\n  rancho_qualidade: string;\n  escala_servico: string;\n  escala_atrapalha: string;\n  equipamentos_servico: string;\n  tfm_participa: string;\n  tfm_incentivado: string;\n  tfm_instalacoes: string;\n  // Section 2\n  chefe_ouve_ideias: string;\n  chefe_se_importa: string;\n  contribuir_atividades: string;\n  chefe_delega: string;\n  pares_auxiliam: string;\n  entrosamento_setores: string;\n  entrosamento_tripulacao: string;\n  convivio_agradavel: string;\n  confianca_respeito: string;\n  // Section 3\n  feedback_desempenho: string;\n  conceito_compativel: string;\n  importancia_atividade: string;\n  trabalho_reconhecido: string;\n  crescimento_estimulado: string;\n  cursos_suficientes: string;\n  programa_treinamento: string;\n  orgulho_trabalhar: string;\n  bem_aproveitado: string;\n  potencial_outra_funcao: string;\n  carga_trabalho_justa: string;\n  licenca_autorizada: string;\n  // Section 4\n  aspecto_positivo: string;\n  aspecto_negativo: string;\n  proposta_processo: string;\n  proposta_satisfacao: string;\n};\n\nexport default function Survey() {\n  const [currentSection, setCurrentSection] = useState(0);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [surveyData, setSurveyData] = useState<Partial<SurveyData>>({});\n  const [validationErrors, setValidationErrors] = useState<string[]>([]);\n  const [lastSaved, setLastSaved] = useState<Date | null>(null);\n  const [showHint, setShowHint] = useState(true);\n\n  const totalSections = 4;\n  const progress = ((currentSection + 1) / totalSections) * 100;\n\n  const sectionData = [\n    {\n      title: \"Condições do Ambiente\",\n      icon: Anchor,\n      color: \"text-primary\",\n      bgColor: \"bg-primary/10\",\n      borderColor: \"border-primary/20\"\n    },\n    {\n      title: \"Relacionamento\",\n      icon: Shield,\n      color: \"text-accent\",\n      bgColor: \"bg-accent/10\",\n      borderColor: \"border-accent/20\"\n    },\n    {\n      title: \"Motivação & Desenvolvimento\",\n      icon: Star,\n      color: \"text-naval-gold\",\n      bgColor: \"bg-warning/10\",\n      borderColor: \"border-warning/20\"\n    },\n    {\n      title: \"Comentários & Sugestões\",\n      icon: BarChart3,\n      color: \"text-accent\",\n      bgColor: \"bg-accent/10\",\n      borderColor: \"border-accent/20\"\n    }\n  ];\n\n  // Auto-save functionality\n  useEffect(() => {\n    // Load saved data on mount\n    const savedData = localStorage.getItem('papem-survey-data');\n    const savedSection = localStorage.getItem('papem-survey-section');\n    if (savedData) {\n      setSurveyData(JSON.parse(savedData));\n    }\n    if (savedSection) {\n      setCurrentSection(parseInt(savedSection));\n    }\n  }, []);\n\n  // Auto-save data whenever it changes\n  useEffect(() => {\n    if (Object.keys(surveyData).length > 0) {\n      localStorage.setItem('papem-survey-data', JSON.stringify(surveyData));\n      localStorage.setItem('papem-survey-section', currentSection.toString());\n      setLastSaved(new Date());\n    }\n  }, [surveyData, currentSection]);\n\n  const updateSurveyData = (data: Partial<SurveyData>) => {\n    setSurveyData(prev => ({ ...prev, ...data }));\n  };\n\n  const handleNextSection = () => {\n    const missingFields = getMissingFields();\n    if (missingFields.length > 0) {\n      setValidationErrors(missingFields);\n      // Scroll para a primeira pergunta com erro\n      setTimeout(() => {\n        const firstErrorElement = document.getElementById(`question-${missingFields[0]}`);\n        if (firstErrorElement) {\n          firstErrorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n          // Add micro-feedback for error\n          firstErrorElement.classList.add('micro-bounce');\n          setTimeout(() => firstErrorElement.classList.remove('micro-bounce'), 400);\n        }\n      }, 100);\n      return;\n    }\n    \n    setValidationErrors([]);\n    if (currentSection < totalSections - 1) {\n      // Celebrar conclusão da seção\n      const currentElement = document.querySelector('.section-indicator-active');\n      if (currentElement) {\n        currentElement.classList.add('pulse-success');\n        setTimeout(() => currentElement.classList.remove('pulse-success'), 600);\n      }\n      \n      // Transição suave para próxima seção\n      setTimeout(() => {\n        setCurrentSection(currentSection + 1);\n        // Auto-scroll para o topo da nova seção\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n      }, 300);\n    }\n  };\n\n  const handlePrevSection = () => {\n    if (currentSection > 0) {\n      setCurrentSection(currentSection - 1);\n    }\n  };\n\n  const handleSubmit = async () => {\n    const missingFields = getMissingFields();\n    if (missingFields.length > 0) {\n      setValidationErrors(missingFields);\n      // Scroll para a primeira pergunta com erro\n      setTimeout(() => {\n        const firstErrorElement = document.getElementById(`question-${missingFields[0]}`);\n        if (firstErrorElement) {\n          firstErrorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n      }, 100);\n      return;\n    }\n\n    setIsSubmitting(true);\n    \n    try {\n      // Submit to backend API\n      const response = await fetch('/api/survey', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(surveyData),\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        setIsSubmitted(true);\n        console.log(\"Survey submitted successfully:\", result);\n        \n        // Clear saved data after successful submission\n        localStorage.removeItem('papem-survey-data');\n        localStorage.removeItem('papem-survey-section');\n        setLastSaved(null);\n      } else {\n        throw new Error(result.message || 'Erro ao enviar pesquisa');\n      }\n    } catch (error) {\n      console.error('Erro ao enviar pesquisa:', error);\n      alert('Erro ao enviar pesquisa. Tente novamente.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const getMissingFields = () => {\n    // Campos sempre obrigatórios da seção 1\n    const section1BaseFields = [\n      'setor_trabalho', 'materiais_fornecidos', 'materiais_adequados', 'atendimento_apoio',\n      'limpeza_adequada', 'temperatura_adequada', 'iluminacao_adequada', 'localizacao_alojamento',\n      'localizacao_rancho', 'escala_servico'\n    ];\n\n    // Campos condicionais da seção 1\n    const section1ConditionalFields = [];\n    \n    // Q9-Q10 dependem de Q8 (alojamento)\n    if (surveyData.localizacao_alojamento) {\n      section1ConditionalFields.push('alojamento_condicoes', 'banheiros_adequados');\n    }\n    \n    // Q11, Q13-Q14 dependem de Q12 (rancho)\n    if (surveyData.localizacao_rancho) {\n      // Q12 (Praça D'armas) só é obrigatória quando rancho for \"Praça D'armas\"\n      if (surveyData.localizacao_rancho === \"Praça D'armas\") {\n        section1ConditionalFields.push('praca_darmas_adequada');\n      }\n      section1ConditionalFields.push('rancho_instalacoes', 'rancho_qualidade');\n    }\n    \n    // Q16-Q20 dependem de Q15 (escala)\n    if (surveyData.escala_servico) {\n      section1ConditionalFields.push('escala_atrapalha', 'equipamentos_servico', 'tfm_participa', 'tfm_incentivado', 'tfm_instalacoes');\n    }\n\n    const section1Fields = [...section1BaseFields, ...section1ConditionalFields];\n    \n    const section2Fields = [\n      'chefe_ouve_ideias', 'chefe_se_importa', 'contribuir_atividades', 'chefe_delega',\n      'pares_auxiliam', 'entrosamento_setores', 'entrosamento_tripulacao', 'convivio_agradavel',\n      'confianca_respeito'\n    ];\n    \n    const section3Fields = [\n      'feedback_desempenho', 'conceito_compativel', 'importancia_atividade', 'trabalho_reconhecido',\n      'crescimento_estimulado', 'cursos_suficientes', 'programa_treinamento', 'orgulho_trabalhar',\n      'bem_aproveitado', 'potencial_outra_funcao', 'carga_trabalho_justa', 'licenca_autorizada'\n    ];\n    \n    const section4Fields = [\n      'aspecto_positivo', 'aspecto_negativo', 'proposta_processo', 'proposta_satisfacao'\n    ];\n\n    const sectionFields = [section1Fields, section2Fields, section3Fields, section4Fields];\n    const requiredFields = sectionFields[currentSection];\n    \n    return requiredFields.filter(field => !surveyData[field as keyof SurveyData]);\n  };\n\n  const isCurrentSectionComplete = () => {\n    // Usar a mesma lógica condicional do getMissingFields\n    return getMissingFields().length === 0;\n  };\n\n  const renderCurrentSection = () => {\n    switch (currentSection) {\n      case 0:\n        return <SurveySection1 data={surveyData} onUpdate={updateSurveyData} errors={validationErrors} />;\n      case 1:\n        return <SurveySection2 data={surveyData} onUpdate={updateSurveyData} errors={validationErrors} />;\n      case 2:\n        return <SurveySection3 data={surveyData} onUpdate={updateSurveyData} errors={validationErrors} />;\n      case 3:\n        return <SurveySection4 data={surveyData} onUpdate={updateSurveyData} errors={validationErrors} />;\n      default:\n        return null;\n    }\n  };\n\n  if (isSubmitted) {\n    return <SuccessMessage />;\n  }\n\n  const currentSectionData = sectionData[currentSection];\n  const IconComponent = currentSectionData.icon;\n\n  return (\n    <div className=\"min-h-screen\" style={{ backgroundColor: '#f1f5f9' }}>\n      <div className=\"container mx-auto max-w-5xl py-8 px-4 space-y-8\">\n        \n        {/* Modern Header */}\n        <div className=\"text-center space-y-8 py-8 fade-in\">            \n          <div className=\"space-y-8\">\n            <div className=\"flex justify-center\">\n              <div className=\"relative\">\n                <img \n                  src=\"/lovable-uploads/e0a4659d-a903-4c7c-b8ab-10694346d6f8.png\" \n                  alt=\"Brasão PAPEM\" \n                  className=\"w-28 h-28 object-contain floating-element\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <h1 className=\"text-4xl font-bold text-foreground\">\n                Pesquisa de Clima Organizacional\n              </h1>\n              \n              <div className=\"bg-gradient-to-r from-primary/5 via-primary/10 to-primary/5 rounded-2xl p-6 border border-primary/20 shadow-lg max-w-4xl mx-auto\">\n                <div className=\"flex items-center justify-center gap-6\">\n                  <div className=\"flex-shrink-0\">\n                    <img \n                      src=\"/lovable-uploads/a27f9473-5787-4cab-9c01-3f62a66a5e88.png\" \n                      alt=\"Mascote PAPEM\" \n                      className=\"w-20 h-24 object-contain animate-bounce-slow\"\n                    />\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <div className=\"flex items-center justify-center gap-3 mb-2\">\n                      <span className=\"text-2xl\">🔒</span>\n                      <h2 className=\"text-xl font-bold text-primary\">Pesquisa 100% Anônima e Confidencial</h2>\n                      <span className=\"text-2xl\">🛡️</span>\n                    </div>\n                    <p className=\"text-muted-foreground text-base leading-relaxed\">\n                      Sua participação é fundamental para o <span className=\"font-semibold text-foreground\">aprimoramento e melhoria da nossa OM</span>.\n                      <br />\n                      Responda com <span className=\"font-semibold text-primary\">objetividade e precisão</span>.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Enhanced Progress Section */}\n        <div className=\"survey-card-enhanced p-8 slide-up w-full mx-auto\">\n          <div className=\"space-y-4\">\n            {/* Progress Info */}\n            <div className=\"flex justify-between items-center text-sm text-foreground mb-2\">\n              <div className=\"flex items-center gap-3\">\n                <span className=\"font-medium\">Seção {currentSection + 1} de {totalSections}</span>\n                \n                {/* Auto-save indicator */}\n                {lastSaved && (\n                  <div className=\"flex items-center gap-1 text-xs text-emerald-600 floating-feedback\">\n                    <Save className=\"w-3 h-3\" />\n                    <span>Salvo {lastSaved.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })}</span>\n                  </div>\n                )}\n                \n                {/* Contextual hint */}\n                {showHint && currentSection === 0 && (\n                  <div className=\"flex items-center gap-1 text-xs text-primary bg-primary/10 px-2 py-1 rounded-full cursor-pointer hover:bg-primary/20 transition-colors\"\n                       onClick={() => setShowHint(false)}>\n                    <Info className=\"w-3 h-3\" />\n                    <span>Suas respostas são salvas automaticamente</span>\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"text-right\">\n                <span className=\"font-semibold text-primary\">{Math.round(progress)}% concluído</span>\n                <div className=\"text-xs text-muted-foreground mt-1\">\n                  ⏱️ ~{Math.max(1, Math.ceil((4 - currentSection - 1) * 2))} min restantes\n                </div>\n              </div>\n            </div>\n            \n            {/* Enhanced Progress Bar */}\n            <div className=\"progress-bar-enhanced\">\n              <div \n                className=\"progress-fill-enhanced\"\n                style={{ width: `${progress}%` }}\n              >\n                <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-pulse\" />\n              </div>\n              {/* Progress milestones */}\n              <div className=\"absolute inset-0 flex justify-between items-center px-1\">\n                {[25, 50, 75].map((milestone) => (\n                  <div \n                    key={milestone}\n                    className={`w-1 h-4 rounded-full transition-all duration-300 ${\n                      progress >= milestone ? 'bg-white shadow-sm' : 'bg-slate-300'\n                    }`}\n                  />\n                ))}\n              </div>\n            </div>\n            \n            {/* Section Indicators */}\n            <div className=\"flex justify-between items-center\">\n              {sectionData.map((section, index) => {\n                const isActive = index === currentSection;\n                const isCompleted = index < currentSection;\n                \n                return (\n                  <div key={index} className={`section-indicator-enhanced flex-1 ${\n                    isActive ? 'section-indicator-active' : ''\n                  }`}>\n                    <div className={`\n                      w-8 h-8 rounded-full border-2 flex items-center justify-center text-sm font-medium transition-all duration-300 ${isCompleted ? 'micro-bounce' : ''}\n                      ${isActive \n                        ? 'border-primary text-primary bg-primary/10 shadow-sm' \n                        : isCompleted\n                        ? 'border-success text-white bg-success shadow-sm'\n                        : 'border-muted-foreground text-muted-foreground bg-transparent'\n                      }\n                    `}>\n                      {isCompleted ? (\n                        <CheckCircle2 className=\"w-4 h-4\" />\n                      ) : (\n                        <span>{index + 1}</span>\n                      )}\n                    </div>\n                    <p className={`text-sm font-medium transition-colors duration-300 ${\n                      isActive \n                        ? 'text-primary' \n                        : isCompleted\n                        ? 'text-success'\n                        : 'text-muted-foreground'\n                    }`}>\n                      {section.title}\n                    </p>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n\n        {/* Modern Section Title */}\n        <div className=\"text-center space-y-4 fade-in\">\n          <div className=\"inline-flex items-center gap-3 px-6 py-3 bg-primary/10 rounded-2xl border border-primary/20\">\n            <IconComponent className=\"w-6 h-6 text-primary\" />\n            <div className=\"text-center\">\n              <h2 className=\"text-xl font-bold text-foreground\">\n                {currentSection === 0 && `${currentSection + 1}. Condições de Trabalho, Serviço e TFM`}\n                {currentSection === 1 && `${currentSection + 1}. Relacionamento`}\n                {currentSection === 2 && `${currentSection + 1}. Motivação e Desenvolvimento Profissional`}\n                {currentSection === 3 && `${currentSection + 1}. Comentários e Sugestões`}\n              </h2>\n              <p className=\"text-sm text-primary/70 font-medium mt-1\">\n                {currentSection === 0 && \"20 perguntas\"}\n                {currentSection === 1 && \"9 perguntas\"}\n                {currentSection === 2 && \"12 perguntas\"}\n                {currentSection === 3 && \"4 perguntas\"}\n              </p>\n            </div>\n          </div>\n        </div>\n        \n        {/* Survey Content */}\n        <div className=\"space-y-4 slide-up max-w-4xl mx-auto\">\n          {renderCurrentSection()}\n        </div>\n\n        {/* Enhanced Navigation */}\n        <div className=\"survey-card-enhanced p-4\">\n          <div className=\"flex justify-between items-center\">\n            <Button\n              variant=\"outline\"\n              onClick={handlePrevSection}\n              disabled={currentSection === 0}\n              className=\"modern-button-outline disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Seção Anterior\n            </Button>\n\n            {currentSection === totalSections - 1 ? (\n              <Button\n                onClick={handleSubmit}\n                disabled={isSubmitting}\n                className=\"modern-button bg-success hover:bg-success/90 disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {isSubmitting ? (\n                  <>\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\n                    Enviando...\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle2 className=\"w-4 h-4 mr-2\" />\n                    Enviar Pesquisa\n                  </>\n                )}\n              </Button>\n            ) : (\n              <Button\n                onClick={handleNextSection}\n                className=\"modern-button\"\n              >\n                Próxima Seção\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":20134},"src/utils/index.ts":{"content":"export function createPageUrl(pageName: string): string {\n  const pageUrls: Record<string, string> = {\n    Survey: \"/survey\",\n    AdminDashboard: \"/admin\",\n    Index: \"/\",\n    Admin: \"/admin\"\n  };\n  \n  return pageUrls[pageName] || \"/\";\n}","size_bytes":237},"src/components/admin/AdminAuth.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Shield, Lock } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\ninterface AdminAuthProps {\n  onAuthenticated: () => void;\n}\n\nexport function AdminAuth({ onAuthenticated }: AdminAuthProps) {\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    // Simula verificação de senha\n    setTimeout(() => {\n      if (password === \"pco2025\") {\n        toast.success(\"Acesso autorizado!\");\n        onAuthenticated();\n      } else {\n        toast.error(\"Senha incorreta!\");\n        setPassword(\"\");\n      }\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md bg-gradient-card shadow-custom-xl border-0\">\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"flex justify-center\">\n            <div className=\"w-16 h-16 bg-gradient-primary rounded-2xl flex items-center justify-center shadow-neon\">\n              <Shield className=\"w-8 h-8 text-primary-foreground\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Dashboard Administrativo</CardTitle>\n          <CardDescription>\n            Acesso restrito - Digite a senha para continuar\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-base font-semibold\">\n                Senha de Acesso\n              </Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  placeholder=\"Digite a senha\"\n                  className=\"pl-10 h-12 text-base\"\n                  required\n                  disabled={isLoading}\n                />\n              </div>\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full h-12 text-base font-semibold\"\n              disabled={isLoading}\n            >\n              {isLoading ? \"Verificando...\" : \"Entrar no Dashboard\"}\n            </Button>\n            \n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                Sistema protegido - PAPEM\n              </p>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3089},"src/components/admin/DetailedAnalysis.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { AlertTriangle, TrendingUp, Award, Building2, Users, Target, CheckCircle2, AlertCircle } from \"lucide-react\";\n\nconst sectionScores = [\n  {\n    title: \"Ambiente de Trabalho\",\n    score: 64,\n    icon: Building2,\n    description: \"Condições físicas e recursos\"\n  },\n  {\n    title: \"Relacionamento\",\n    score: 71,\n    icon: Users,\n    description: \"Relações interpessoais\"\n  },\n  {\n    title: \"Motivação\",\n    score: 58,\n    icon: Award,\n    description: \"Desenvolvimento profissional\"\n  }\n];\n\nconst criticalPoints = [\n  { question: \"Crescimento Profissional Estimulado\", score: 38, section: \"Motivação\" },\n  { question: \"Trabalho Reconhecido e Valorizado\", score: 42, section: \"Motivação\" },\n  { question: \"Materiais e Equipamentos Fornecidos\", score: 45, section: \"Ambiente\" },\n  { question: \"Entrosamento entre Setores\", score: 48, section: \"Relacionamento\" },\n  { question: \"Carga de Trabalho Justa\", score: 52, section: \"Motivação\" },\n];\n\nconst recommendations = [\n  {\n    priority: \"Alta\",\n    area: \"Desenvolvimento Profissional\",\n    description: \"Implementar programa de capacitação e plano de carreira mais estruturado\",\n    impact: \"Alto\"\n  },\n  {\n    priority: \"Alta\", \n    area: \"Reconhecimento\",\n    description: \"Estabelecer sistema de reconhecimento e feedback regular\",\n    impact: \"Alto\"\n  },\n  {\n    priority: \"Média\",\n    area: \"Recursos Materiais\",\n    description: \"Revisar processo de fornecimento de materiais e equipamentos\",\n    impact: \"Médio\"\n  },\n  {\n    priority: \"Média\",\n    area: \"Integração\",\n    description: \"Promover atividades de integração entre setores\",\n    impact: \"Médio\"\n  }\n];\n\nconst getScoreColor = (score: number) => {\n  if (score >= 70) return \"text-success\";\n  if (score >= 50) return \"text-warning\";\n  return \"text-destructive\";\n};\n\nconst getScoreBadge = (score: number) => {\n  if (score >= 70) return { variant: \"default\" as const, label: \"Bom\", icon: CheckCircle2 };\n  if (score >= 50) return { variant: \"secondary\" as const, label: \"Atenção\", icon: AlertCircle };\n  return { variant: \"destructive\" as const, label: \"Crítico\", icon: AlertTriangle };\n};\n\nconst getPriorityColor = (priority: string) => {\n  switch (priority) {\n    case \"Alta\": return \"destructive\";\n    case \"Média\": return \"secondary\";\n    default: return \"default\";\n  }\n};\n\nexport function DetailedAnalysis() {\n  return (\n    <div className=\"space-y-6\">\n      {/* Methodology Explanation */}\n      <Card className=\"bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-800\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-blue-700 dark:text-blue-300\">\n            <Target className=\"w-5 h-5\" />\n            Metodologia de Cálculo das Métricas\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-1 lg:grid-cols-3\">\n            <div className=\"space-y-3\">\n              <h4 className=\"font-semibold text-blue-700 dark:text-blue-300\">📊 Cálculo dos Scores</h4>\n              <ul className=\"text-sm space-y-1 text-blue-600 dark:text-blue-400\">\n                <li>• <strong>Score Geral:</strong> Média ponderada das respostas \"Concordo\" por seção</li>\n                <li>• <strong>≥ 70%:</strong> Classificado como \"Bom\" (verde)</li>\n                <li>• <strong>50-69%:</strong> Classificado como \"Atenção\" (amarelo)</li>\n                <li>• <strong>&lt; 50%:</strong> Classificado como \"Crítico\" (vermelho)</li>\n              </ul>\n            </div>\n            \n            <div className=\"space-y-3\">\n              <h4 className=\"font-semibold text-blue-700 dark:text-blue-300\">🎯 Identificação de Pontos Críticos</h4>\n              <ul className=\"text-sm space-y-1 text-blue-600 dark:text-blue-400\">\n                <li>• <strong>Critério:</strong> Questões com menor % de concordância</li>\n                <li>• <strong>Ranking:</strong> As 5 questões com piores scores</li>\n                <li>• <strong>Priorização:</strong> Baseada no impacto organizacional</li>\n                <li>• <strong>Amostra:</strong> Mínimo de 5 respondentes por análise</li>\n              </ul>\n            </div>\n            \n            <div className=\"space-y-3\">\n              <h4 className=\"font-semibold text-blue-700 dark:text-blue-300\">📈 Métricas Estatísticas</h4>\n              <ul className=\"text-sm space-y-1 text-blue-600 dark:text-blue-400\">\n                <li>• <strong>Média:</strong> Σ(valores) ÷ n</li>\n                <li>• <strong>Mediana:</strong> Valor central ordenado</li>\n                <li>• <strong>Desvio Padrão:</strong> √[Σ(x-μ)²÷n]</li>\n                <li>• <strong>Margem de Erro:</strong> ±3% (IC 95%)</li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"space-y-4 border-t border-blue-200 dark:border-blue-700 pt-4\">\n            <h4 className=\"font-semibold text-blue-700 dark:text-blue-300\">🔢 Detalhamento dos Cálculos Estatísticos</h4>\n            \n            <div className=\"grid gap-4 md:grid-cols-2\">\n              <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n                <h5 className=\"font-medium text-sm text-blue-700 dark:text-blue-300 mb-2\">Cálculo da Mediana</h5>\n                <div className=\"text-xs text-blue-600 dark:text-blue-400 font-mono space-y-1\">\n                  <p>1. Ordenar valores: [v₁, v₂, ..., vₙ]</p>\n                  <p>2. Se n ímpar: M = v₍ₙ₊₁₎/₂</p>\n                  <p>3. Se n par: M = (vₙ/₂ + v₍ₙ/₂₊₁₎) ÷ 2</p>\n                </div>\n              </div>\n              \n              <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n                <h5 className=\"font-medium text-sm text-blue-700 dark:text-blue-300 mb-2\">Cálculo do Score Ponderado</h5>\n                <div className=\"text-xs text-blue-600 dark:text-blue-400 font-mono space-y-1\">\n                  <p>Score = (Concordo×100 + Neutro×50 + Discordo×0) ÷ Total</p>\n                  <p>Peso: Concordo=1.0, Neutro=0.5, Discordo=0.0</p>\n                  <p>Resultado final em percentual (0-100%)</p>\n                </div>\n              </div>\n              \n              <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n                <h5 className=\"font-medium text-sm text-blue-700 dark:text-blue-300 mb-2\">Intervalo de Confiança (95%)</h5>\n                <div className=\"text-xs text-blue-600 dark:text-blue-400 font-mono space-y-1\">\n                  <p>IC = X̄ ± (1.96 × σ/√n)</p>\n                  <p>Onde: X̄=média, σ=desvio padrão, n=amostra</p>\n                  <p>Margem de erro típica: ±2.8% para n=136</p>\n                </div>\n              </div>\n              \n              <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n                <h5 className=\"font-medium text-sm text-blue-700 dark:text-blue-300 mb-2\">Análise de Distribuição</h5>\n                <div className=\"text-xs text-blue-600 dark:text-blue-400 font-mono space-y-1\">\n                  <p>Quartis: Q₁ (25%), Q₂ (50%), Q₃ (75%)</p>\n                  <p>IQR = Q₃ - Q₁ (amplitude interquartil)</p>\n                  <p>Outliers: valores fora de [Q₁-1.5×IQR, Q₃+1.5×IQR]</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"pt-2 border-t border-blue-200 dark:border-blue-700\">\n            <p className=\"text-xs text-blue-600 dark:text-blue-400\">\n              <strong>Nota:</strong> Os dados são atualizados em tempo real com base nas respostas coletadas. \n              Filtros aplicados afetam apenas a visualização, mantendo a integridade estatística.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Section Scores */}\n      <div className=\"grid gap-4 md:grid-cols-3\">\n        {sectionScores.map((section) => {\n          const badge = getScoreBadge(section.score);\n          const IconComponent = section.icon;\n          \n          return (\n            <Card key={section.title} className=\"bg-gradient-card\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <IconComponent className=\"w-5 h-5 text-primary\" />\n                    <CardTitle className=\"text-base\">{section.title}</CardTitle>\n                  </div>\n                  <Badge variant={badge.variant} className=\"flex items-center gap-1\">\n                    <badge.icon className=\"w-3 h-3\" />\n                    {badge.label}\n                  </Badge>\n                </div>\n                <CardDescription>{section.description}</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Score Geral</span>\n                    <span className={`text-2xl font-bold ${getScoreColor(section.score)}`}>\n                      {section.score}%\n                    </span>\n                  </div>\n                  <Progress value={section.score} className=\"h-2\" />\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Critical Points */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"w-5 h-5 text-warning\" />\n            Pontos que Precisam de Atenção\n          </CardTitle>\n          <CardDescription>\n            As 5 questões com menores índices de satisfação\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {criticalPoints.map((point, index) => (\n              <div key={index} className=\"flex items-center justify-between p-3 bg-warning-light rounded-lg border border-warning/20\">\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium\">{point.question}</p>\n                  <p className=\"text-xs text-muted-foreground\">{point.section}</p>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Badge variant=\"outline\" className={getScoreColor(point.score)}>\n                    {point.score}%\n                  </Badge>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10829},"src/components/admin/EnvironmentCharts.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { BarChart as RechartsBarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from \"recharts\";\nimport { Building2, Users, Clock, Home, Utensils, BarChart3 } from \"lucide-react\";\n\nconst environmentQuestions = [\n  { id: \"materiais_fornecidos\", name: \"Q2. Materiais Fornecidos\", concordo: 45, neutro: 25, discordo: 30 },\n  { id: \"materiais_adequados\", name: \"Q3. Materiais Adequados\", concordo: 52, neutro: 28, discordo: 20 },\n  { id: \"atendimento_apoio\", name: \"Q4. Atendimento Apoio\", concordo: 38, neutro: 35, discordo: 27 },\n  { id: \"limpeza_adequada\", name: \"Q5. Limpeza Adequada\", concordo: 65, neutro: 20, discordo: 15 },\n  { id: \"temperatura_adequada\", name: \"Q6. Temperatura Adequada\", concordo: 42, neutro: 30, discordo: 28 },\n  { id: \"iluminacao_adequada\", name: \"Q7. Iluminação Adequada\", concordo: 70, neutro: 18, discordo: 12 },\n  { id: \"localizacao_alojamento\", name: \"Q8. Localização do Alojamento\", concordo: 55, neutro: 30, discordo: 15 },\n  { id: \"alojamento_condicoes\", name: \"Q9. As instalações do meu alojamento estão em boas condições.\", concordo: 48, neutro: 32, discordo: 20 },\n  { id: \"banheiros_adequados\", name: \"Q10. As instalações dos banheiros da OM são adequadas.\", concordo: 55, neutro: 25, discordo: 20 },\n  { id: \"praca_darmas_adequada\", name: \"Q11. Praça D'Armas\", concordo: 62, neutro: 23, discordo: 15 },\n  { id: \"localizacao_rancho\", name: \"Q12. Localização do Rancho\", concordo: 60, neutro: 25, discordo: 15 },\n  { id: \"rancho_instalacoes\", name: \"Q13. Considero adequadas as instalações do rancho.\", concordo: 58, neutro: 27, discordo: 15 },\n  { id: \"rancho_qualidade\", name: \"Q14. Estou satisfeito com a qualidade da comida servida no rancho.\", concordo: 43, neutro: 35, discordo: 22 },\n  { id: \"escala_atrapalha\", name: \"Q16. A escala de serviço tem atrapalhado as minhas tarefas profissionais.\", concordo: 35, neutro: 28, discordo: 37 },\n  { id: \"equipamentos_servico\", name: \"Q17. Quando estou de serviço, percebo que os equipamentos utilizados estão em boas condições.\", concordo: 47, neutro: 33, discordo: 20 },\n  { id: \"tfm_participa\", name: \"Q18. Participa TFM\", concordo: 55, neutro: 22, discordo: 23 },\n  { id: \"tfm_incentivado\", name: \"Q19. TFM Incentivado\", concordo: 48, neutro: 30, discordo: 22 },\n  { id: \"tfm_instalacoes\", name: \"Q20. Instalações TFM\", concordo: 52, neutro: 28, discordo: 20 }\n];\n\nconst sectorOptions = [\n  { value: \"all\", label: \"Todos os setores\" },\n  { value: \"PAPEM-10\", label: \"PAPEM-10\" },\n  { value: \"PAPEM-20\", label: \"PAPEM-20\" },\n  { value: \"PAPEM-30\", label: \"PAPEM-30\" },\n  { value: \"PAPEM-40\", label: \"PAPEM-40\" },\n  { value: \"PAPEM-51\", label: \"PAPEM-51\" },\n  { value: \"PAPEM-52\", label: \"PAPEM-52\" },\n  { value: \"SECOM\", label: \"SECOM\" }\n];\n\n// Opções de filtro por dependências condicionais\nconst alojamentoOptions = [\n  { value: \"all\", label: \"Todos os alojamentos\" },\n  { value: \"CB/MN MASCULINO\", label: \"CB/MN MASCULINO\" },\n  { value: \"CB/MN FEMININO\", label: \"CB/MN FEMININO\" },\n  { value: \"SO/SG MASCULINO\", label: \"SO/SG MASCULINO\" },\n  { value: \"SO/SG FEMININO\", label: \"SO/SG FEMININO\" },\n  { value: \"OFICIAIS FEMININO\", label: \"OFICIAIS FEMININO\" },\n  { value: \"CT/1T MASCULINO\", label: \"CT/1T MASCULINO\" },\n  { value: \"OFICIAIS SUPERIORES MASCULINO\", label: \"OFICIAIS SUPERIORES MASCULINO\" }\n];\n\nconst ranchoOptions = [\n  { value: \"all\", label: \"Todos os ranchos\" },\n  { value: \"Distrito\", label: \"Distrito\" },\n  { value: \"DABM\", label: \"DABM\" },\n  { value: \"Praça D'armas\", label: \"Praça D'armas\" }\n];\n\nconst escalaOptions = [\n  { value: \"all\", label: \"Todas as escalas\" },\n  { value: \"Oficiais\", label: \"Oficiais\" },\n  { value: \"SG\", label: \"SG\" },\n  { value: \"Cb/MN\", label: \"Cb/MN\" }\n];\n\nexport function EnvironmentCharts() {\n  // Filtro GLOBAL - aplica-se a todas as questões\n  const [selectedSector, setSelectedSector] = useState(\"all\");\n  \n  // Filtros LOCAIS - cada um aplica-se apenas às suas questões específicas\n  const [alojamentoFilter, setAlojamentoFilter] = useState(\"all\"); // Aplica-se apenas a Q9-Q11\n  const [ranchoFilter, setRanchoFilter] = useState(\"all\");         // Aplica-se apenas a Q13-Q14\n  const [escalaFilter, setEscalaFilter] = useState(\"all\");         // Aplica-se apenas a Q16-Q17\n\n  // Questões de localização (não são concordo/discordo)\n  const getLocationQuestionData = (questionId: string, filters: any) => {\n    const sampleSize = filters.sector !== \"all\" ? \n      (questionId === \"localizacao_alojamento\" ? 85 : \n       questionId === \"localizacao_rancho\" ? 92 : 78) : 100;\n\n    if (questionId === \"localizacao_alojamento\") {\n      // Dados base para alojamento\n      let baseData = [\n        { name: \"CB/MN MASCULINO\", baseValue: 28 },\n        { name: \"SO/SG MASCULINO\", baseValue: 22 },\n        { name: \"CB/MN FEMININO\", baseValue: 18 },\n        { name: \"OFICIAIS SUPERIORES\", baseValue: 15 },\n        { name: \"CT/1T MASCULINO\", baseValue: 12 },\n        { name: \"SO/SG FEMININO\", baseValue: 5 }\n      ];\n\n      // Ajustar distribuições baseado no setor selecionado\n      if (filters.sector !== \"all\") {\n        const sectorAdjustments: { [key: string]: number[] } = {\n          \"PAPEM-10\": [5, -3, 2, -1, -2, -1],\n          \"PAPEM-20\": [-8, 5, 3, 0, 0, 0],\n          \"PAPEM-30\": [12, -5, -3, -2, -1, -1],\n          \"PAPEM-40\": [-3, -2, 1, 3, 1, 0],\n          \"PAPEM-51\": [8, -4, -2, -1, -1, 0],\n          \"PAPEM-52\": [-5, 3, 1, 1, 0, 0],\n          \"SECOM\": [15, -8, -3, -2, -1, -1]\n        };\n        \n        const adjustments = sectorAdjustments[filters.sector] || [0, 0, 0, 0, 0, 0];\n        baseData = baseData.map((item, idx) => ({\n          ...item,\n          baseValue: Math.max(1, Math.min(70, item.baseValue + adjustments[idx]))\n        }));\n      }\n\n      // Normalizar para 100%\n      const total = baseData.reduce((sum, item) => sum + item.baseValue, 0);\n      const data = baseData.map(item => {\n        const value = Math.round((item.baseValue / total) * 100);\n        return {\n          name: item.name,\n          value,\n          count: Math.floor(sampleSize * (value / 100))\n        };\n      });\n\n      return {\n        id: questionId,\n        name: \"Q8. Localização do Alojamento\",\n        type: \"location\",\n        data,\n        sampleSize\n      };\n    }\n    \n    if (questionId === \"localizacao_rancho\") {\n      // Dados base para rancho\n      let baseData = [\n        { name: \"Distrito\", baseValue: 45 },\n        { name: \"DABM\", baseValue: 35 },\n        { name: \"Praça D'armas\", baseValue: 20 }\n      ];\n\n      // Ajustar distribuições baseado no setor selecionado\n      if (filters.sector !== \"all\") {\n        const sectorAdjustments: { [key: string]: number[] } = {\n          \"PAPEM-10\": [8, -5, -3],\n          \"PAPEM-20\": [-12, 8, 4],\n          \"PAPEM-30\": [15, -8, -7],\n          \"PAPEM-40\": [-5, 2, 3],\n          \"PAPEM-51\": [10, -6, -4],\n          \"PAPEM-52\": [-8, 5, 3],\n          \"SECOM\": [20, -12, -8]\n        };\n        \n        const adjustments = sectorAdjustments[filters.sector] || [0, 0, 0];\n        baseData = baseData.map((item, idx) => ({\n          ...item,\n          baseValue: Math.max(5, Math.min(80, item.baseValue + adjustments[idx]))\n        }));\n      }\n\n      // Normalizar para 100%\n      const total = baseData.reduce((sum, item) => sum + item.baseValue, 0);\n      const data = baseData.map(item => {\n        const value = Math.round((item.baseValue / total) * 100);\n        return {\n          name: item.name,\n          value,\n          count: Math.floor(sampleSize * (value / 100))\n        };\n      });\n\n      return {\n        id: questionId,\n        name: \"Q12. Localização do Rancho\",\n        type: \"location\",\n        data,\n        sampleSize\n      };\n    }\n    \n  };\n\n  // Função auxiliar para determinar quais filtros se aplicam a uma questão específica\n  const getApplicableFilters = (questionId: string) => {\n    const filters = {\n      sector: selectedSector, // Sempre aplica o filtro global\n      alojamento: \"all\",      // Por padrão, filtros locais são \"all\"\n      rancho: \"all\",\n      escala: \"all\"\n    };\n\n    // Aplicar filtros locais apenas às questões relevantes\n    if ([\"alojamento_condicoes\", \"banheiros_adequados\"].includes(questionId)) {\n      filters.alojamento = alojamentoFilter;\n    } else if ([\"praca_darmas_adequada\", \"rancho_instalacoes\", \"rancho_qualidade\"].includes(questionId)) {\n      filters.rancho = ranchoFilter;\n    } else if ([\"escala_atrapalha\", \"equipamentos_servico\"].includes(questionId)) {\n      filters.escala = escalaFilter;\n    }\n\n    return filters;\n  };\n\n  // Simular dados reais baseados nos filtros selecionados\n  const getFilteredQuestionData = (questionId: string, customFilters?: any) => {\n    // Usar filtros customizados ou determinar automaticamente baseado na questão\n    const filters = customFilters || getApplicableFilters(questionId);\n    // Verificar se é questão de localização\n    if ([\"localizacao_alojamento\", \"localizacao_rancho\"].includes(questionId)) {\n      return getLocationQuestionData(questionId, filters);\n    }\n\n    const baseQuestion = environmentQuestions.find(q => q.id === questionId);\n    if (!baseQuestion) return null;\n\n    // Simular diferentes perfis de resposta baseados nos filtros aplicados\n    let concordo = baseQuestion.concordo;\n    let neutro = baseQuestion.neutro;\n    let discordo = baseQuestion.discordo;\n    let sampleSize = 100; // Tamanho da amostra padrão\n\n    // Ajustar dados baseado no setor selecionado\n    if (filters.sector !== \"all\") {\n      // Simular variações reais por setor (baseado em dados típicos organizacionais)\n      const sectorVariations: { [key: string]: { concordo: number, neutro: number, discordo: number, size: number } } = {\n        \"PAPEM-10\": { concordo: 5, neutro: -2, discordo: -3, size: 85 },\n        \"PAPEM-20\": { concordo: -8, neutro: 3, discordo: 5, size: 92 },\n        \"PAPEM-30\": { concordo: 12, neutro: -5, discordo: -7, size: 78 },\n        \"PAPEM-40\": { concordo: -3, neutro: -1, discordo: 4, size: 65 },\n        \"PAPEM-51\": { concordo: 8, neutro: -3, discordo: -5, size: 45 },\n        \"PAPEM-52\": { concordo: -5, neutro: 2, discordo: 3, size: 38 },\n        \"SECOM\": { concordo: 15, neutro: -7, discordo: -8, size: 25 }\n      };\n      \n      const variation = sectorVariations[filters.sector];\n      if (variation) {\n        concordo = Math.max(0, Math.min(100, concordo + variation.concordo));\n        neutro = Math.max(0, Math.min(100, neutro + variation.neutro));\n        discordo = Math.max(0, Math.min(100, discordo + variation.discordo));\n        sampleSize = variation.size;\n      }\n    }\n\n    // Aplicar filtros locais específicos apenas se relevantes para a questão\n    const baseSampleSize = sampleSize;\n    \n    // Filtro de ALOJAMENTO (apenas para questões de alojamento Q9-Q10)\n    if (filters.alojamento !== \"all\" && [\"alojamento_condicoes\", \"banheiros_adequados\"].includes(questionId)) {\n      sampleSize = Math.floor(baseSampleSize * 0.3); // ~30% do setor para alojamento específico\n      \n      // Questões de alojamento tendem a ter avaliações mais críticas\n      concordo = Math.max(0, concordo - 10);\n      discordo = Math.min(100, discordo + 8);\n    }\n    \n    // Filtro de RANCHO (apenas para questões de rancho Q11, Q13-Q14)\n    if (filters.rancho !== \"all\" && [\"praca_darmas_adequada\", \"rancho_instalacoes\", \"rancho_qualidade\"].includes(questionId)) {\n      sampleSize = Math.floor(baseSampleSize * 0.4); // ~40% do setor para rancho específico\n      \n      // Diferentes ranchos têm diferentes níveis de satisfação\n      const ranchoImpact = filters.rancho === \"Distrito\" ? 5 : \n                          filters.rancho === \"DABM\" ? -8 : \n                          filters.rancho === \"Praça D'armas\" ? 12 : 0;\n      concordo = Math.max(0, Math.min(100, concordo + ranchoImpact));\n      discordo = Math.max(0, Math.min(100, discordo - Math.floor(ranchoImpact / 2)));\n    }\n    \n    // Filtro de ESCALA (apenas para questões de escala Q16-Q17)\n    if (filters.escala !== \"all\" && [\"escala_atrapalha\", \"equipamentos_servico\"].includes(questionId)) {\n      sampleSize = Math.floor(baseSampleSize * 0.35); // ~35% do setor para escala específica\n      \n      // Diferentes escalas têm diferentes experiências\n      const escalaImpact = filters.escala === \"Oficiais\" ? 8 : \n                          filters.escala === \"SG\" ? -2 : \n                          filters.escala === \"Cb/MN\" ? -6 : 0;\n      concordo = Math.max(0, Math.min(100, concordo + escalaImpact));\n      discordo = Math.max(0, Math.min(100, discordo - escalaImpact));\n    }\n\n    // Garantir que os percentuais somem 100%\n    const total = concordo + neutro + discordo;\n    if (total !== 100) {\n      const factor = 100 / total;\n      concordo = Math.round(concordo * factor);\n      neutro = Math.round(neutro * factor);\n      discordo = 100 - concordo - neutro;\n    }\n\n    return {\n      ...baseQuestion,\n      concordo,\n      neutro,\n      discordo,\n      sampleSize\n    };\n  };\n\n  // Sempre mostrar todas as questões - filtros apenas mudam os dados dos gráficos\n  const getRelevantQuestions = () => {\n    // Retornar todas as questões sempre\n    return environmentQuestions;\n  };\n\n  const relevantQuestions = getRelevantQuestions();\n\n  const renderQuestionCard = (question: any, index: number) => {\n    // Questões de localização (Q8, Q12)\n    if (question.type === \"location\") {\n      const colors = [\n        \"hsl(220, 100%, 50%)\", // Azul\n        \"hsl(280, 100%, 50%)\", // Roxo\n        \"hsl(340, 100%, 50%)\", // Rosa\n        \"hsl(40, 100%, 50%)\",  // Laranja\n        \"hsl(140, 100%, 50%)\", // Verde\n        \"hsl(60, 100%, 50%)\"   // Amarelo\n      ];\n\n      const chartData = question.data.map((item: any, idx: number) => ({\n        name: item.name,\n        value: item.value,\n        count: item.count,\n        fill: colors[idx % colors.length]\n      }));\n\n      return (\n        <Card \n          key={question.id} \n          className=\"group hover:shadow-xl transition-all duration-300 hover:scale-[1.02] bg-gradient-to-br from-background to-muted/20 border-2 hover:border-primary/20 animate-fade-in\"\n          style={{ animationDelay: `${index * 100}ms` }}\n        >\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex-1\">\n                <CardTitle className=\"text-sm font-semibold leading-tight text-foreground group-hover:text-primary transition-colors\">\n                  {question.name}\n                </CardTitle>\n              </div>\n            </div>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-6\">\n            {/* Vertical Bar Chart ocupando toda a largura */}\n            <div className=\"w-full\">\n              <ResponsiveContainer width=\"100%\" height={400}>\n                <RechartsBarChart \n                  data={chartData} \n                  margin={{ top: 30, right: 30, left: 20, bottom: 80 }}\n                  barCategoryGap=\"20%\"\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" opacity={0.3} />\n                  <XAxis \n                    dataKey=\"name\" \n                    axisLine={false}\n                    tickLine={false}\n                    tick={{ fontSize: 11, fill: 'hsl(var(--muted-foreground))', textAnchor: 'end' }}\n                    angle={-45}\n                    height={70}\n                    interval={0}\n                  />\n                  <YAxis \n                    axisLine={false}\n                    tickLine={false}\n                    tick={{ fontSize: 12, fill: 'hsl(var(--muted-foreground))' }}\n                    tickFormatter={(value) => `${value}%`}\n                    domain={[0, 'dataMax + 5']}\n                  />\n                  <Tooltip \n                    contentStyle={{\n                      background: 'hsl(var(--background))',\n                      border: '1px solid hsl(var(--border))',\n                      borderRadius: '8px',\n                      boxShadow: '0 4px 12px rgba(0,0,0,0.1)'\n                    }}\n                    formatter={(value, name, props) => [`${value}% (${props.payload.count} pessoas)`, props.payload.name]}\n                  />\n                  <Bar \n                    dataKey=\"value\" \n                    radius={[4, 4, 0, 0]}\n                    animationDuration={1000}\n                    animationBegin={index * 100}\n                  >\n                    {chartData.map((entry, idx) => (\n                      <Cell key={`cell-${idx}`} fill={entry.fill} />\n                    ))}\n                  </Bar>\n                </RechartsBarChart>\n              </ResponsiveContainer>\n            </div>\n\n            {/* Resumo abaixo do gráfico */}\n            <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3\">\n              {chartData.map((item, idx) => (\n                <div key={idx} className=\"text-center p-3 rounded-lg bg-muted/20 border\">\n                  <div className=\"text-lg font-bold\" style={{ color: item.fill }}>\n                    {item.value}%\n                  </div>\n                  <div className=\"text-xs text-muted-foreground font-medium truncate\">\n                    {item.name}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {item.count} pessoas\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Lista de distribuição */}\n            <div className=\"space-y-2\">\n              {chartData.map((item, idx) => (\n                <div key={idx} className=\"flex items-center justify-between p-2 rounded-lg bg-muted/30\">\n                  <div className=\"flex items-center gap-2\">\n                    <div \n                      className=\"w-3 h-3 rounded-full\" \n                      style={{ backgroundColor: item.fill }}\n                    />\n                    <span className=\"text-xs font-medium truncate\">{item.name}</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm font-bold\">{item.value}%</div>\n                    <div className=\"text-xs text-muted-foreground\">{item.count} pessoas</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      );\n    }\n\n    // Questões normais (concordo/discordo/neutro)\n    const chartData = [\n      { name: \"Concordo\", value: question.concordo, fill: \"hsl(142, 76%, 36%)\" },\n      { name: \"Neutro\", value: question.neutro, fill: \"hsl(45, 93%, 47%)\" },\n      { name: \"Discordo\", value: question.discordo, fill: \"hsl(var(--destructive))\" }\n    ];\n\n    const barData = [\n      { category: \"Concordo\", percentage: question.concordo, fill: \"hsl(142, 76%, 36%)\" },\n      { category: \"Neutro\", percentage: question.neutro, fill: \"hsl(45, 93%, 47%)\" },\n      { category: \"Discordo\", percentage: question.discordo, fill: \"hsl(var(--destructive))\" }\n    ];\n\n\n    return (\n      <Card \n        key={question.id} \n        className=\"group hover:shadow-xl transition-all duration-300 hover:scale-[1.02] bg-gradient-to-br from-background to-muted/20 border-2 hover:border-primary/20 animate-fade-in\"\n        style={{ animationDelay: `${index * 100}ms` }}\n      >\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex-1\">\n            <CardTitle className=\"text-sm font-semibold leading-tight text-foreground group-hover:text-primary transition-colors\">\n              {question.name}\n            </CardTitle>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"space-y-4\">\n          {/* Pie Chart */}\n          <div className=\"flex items-center justify-center\">\n            <ResponsiveContainer width=\"100%\" height={180}>\n              <PieChart>\n                <Pie\n                  data={chartData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius={35}\n                  outerRadius={65}\n                  paddingAngle={3}\n                  dataKey=\"value\"\n                  animationBegin={index * 200}\n                  animationDuration={1000}\n                >\n                  {chartData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.fill} />\n                  ))}\n                </Pie>\n                <Tooltip \n                  contentStyle={{\n                    background: 'hsl(var(--background))',\n                    border: '1px solid hsl(var(--border))',\n                    borderRadius: '8px',\n                    boxShadow: '0 4px 12px rgba(0,0,0,0.1)'\n                  }}\n                  formatter={(value) => [`${value}%`, '']}\n                />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n\n          {/* Bar Chart */}\n          <div className=\"space-y-3\">\n            <ResponsiveContainer width=\"100%\" height={120}>\n              <RechartsBarChart data={barData} margin={{ top: 5, right: 5, left: 5, bottom: 5 }}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" opacity={0.3} />\n                <XAxis \n                  dataKey=\"category\" \n                  axisLine={false}\n                  tickLine={false}\n                  tick={{ fontSize: 10, fill: 'hsl(var(--muted-foreground))' }}\n                />\n                <YAxis hide />\n                <Tooltip \n                  contentStyle={{\n                    background: 'hsl(var(--background))',\n                    border: '1px solid hsl(var(--border))',\n                    borderRadius: '6px'\n                  }}\n                  formatter={(value) => [`${value}%`, 'Percentual']}\n                />\n                <Bar \n                  dataKey=\"percentage\" \n                  radius={[4, 4, 0, 0]}\n                  animationDuration={1200}\n                  animationBegin={index * 150}\n                />\n              </RechartsBarChart>\n            </ResponsiveContainer>\n          </div>\n\n          {/* Statistics Summary */}\n          <div className=\"grid grid-cols-3 gap-2 pt-2 border-t border-border/50\">\n            {[\n              { label: \"Positivo\", value: question.concordo, color: \"text-green-600 dark:text-green-400\", bg: \"bg-green-50 dark:bg-green-950/20\" },\n              { label: \"Neutro\", value: question.neutro, color: \"text-yellow-600 dark:text-yellow-400\", bg: \"bg-yellow-50 dark:bg-yellow-950/20\" },\n              { label: \"Negativo\", value: question.discordo, color: \"text-red-600 dark:text-red-400\", bg: \"bg-red-50 dark:bg-red-950/20\" }\n            ].map((stat, idx) => (\n              <div key={idx} className={`${stat.bg} rounded-lg p-2 text-center transition-all hover:scale-105`}>\n                <div className={`text-sm font-bold ${stat.color}`}>{stat.value}%</div>\n                <div className=\"text-xs text-muted-foreground\">{stat.label}</div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  // Organizar questões em sequência correta\n  const getQuestionsBySequence = () => {\n    const questionsById = {};\n    relevantQuestions.forEach(q => questionsById[q.id] = q);\n    \n    return {\n      q2_q7: ['materiais_fornecidos', 'materiais_adequados', 'atendimento_apoio', 'limpeza_adequada', 'temperatura_adequada', 'iluminacao_adequada']\n        .map(id => questionsById[id]).filter(Boolean),\n      q8: [], // Cartão Q8 removido conforme solicitação\n      q9_q10: ['alojamento_condicoes', 'banheiros_adequados']\n        .map(id => questionsById[id]).filter(Boolean),\n      q12: [], // Cartão Q12 removido conforme solicitação\n      q11_q13_q14: ['praca_darmas_adequada', 'rancho_instalacoes', 'rancho_qualidade']\n        .map(id => questionsById[id]).filter(Boolean),\n      q16_q17: ['escala_atrapalha', 'equipamentos_servico']\n        .map(id => questionsById[id]).filter(Boolean),\n      q18_q20: ['tfm_participa', 'tfm_incentivado', 'tfm_instalacoes']\n        .map(id => questionsById[id]).filter(Boolean)\n    };\n  };\n  \n  const sequencedQuestions = getQuestionsBySequence();\n\n  const renderQuestionGroup = (questions: any[], title: string, filterComponent?: React.ReactNode) => {\n    if (!questions || questions.length === 0) {\n      return (\n        <div className=\"p-4 bg-gray-50 border border-gray-200 rounded\">\n          <p className=\"text-gray-600 text-sm\">{title} - Nenhuma questão disponível</p>\n        </div>\n      );\n    }\n    \n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-foreground\">\n            {title} ({questions.length} questões)\n          </h3>\n          {filterComponent}\n        </div>\n        \n        <div className=\"grid gap-6 lg:grid-cols-2 xl:grid-cols-3\">\n          {questions.map((question, index) => {\n            const filteredQuestion = getFilteredQuestionData(question.id, {\n              sector: selectedSector,\n              alojamento: alojamentoFilter,\n              rancho: ranchoFilter,\n              escala: escalaFilter\n            });\n            \n            // Não mostrar gráfico se amostra muito pequena\n            if (!filteredQuestion || filteredQuestion.sampleSize < 5) {\n              return (\n                <Card key={question.id} className=\"p-6 bg-muted/20 border-dashed\">\n                  <div className=\"text-center\">\n                    <h4 className=\"font-medium text-sm mb-2\">{question.name}</h4>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Dados insuficientes para exibição\n                    </p>\n                  </div>\n                </Card>\n              );\n            }\n            \n            return renderQuestionCard(filteredQuestion, index);\n          })}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-8\">\n\n      {/* Filtro Global Destacado */}\n      <Card className=\"bg-gradient-to-r from-indigo-50 to-blue-50 dark:from-indigo-950/30 dark:to-blue-950/30 border-2 border-indigo-200 dark:border-indigo-800 shadow-lg\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-2 bg-indigo-100 dark:bg-indigo-900/50 rounded-lg\">\n                <Building2 className=\"w-6 h-6 text-indigo-600 dark:text-indigo-400\" />\n              </div>\n              <div>\n                <CardTitle className=\"text-xl font-bold text-indigo-800 dark:text-indigo-200\">\n                  🌐 Filtro Global - Setor\n                </CardTitle>\n                <p className=\"text-sm text-indigo-600 dark:text-indigo-400\">\n                  Este filtro se aplica a todas as questões e análises abaixo\n                </p>\n              </div>\n            </div>\n            <Badge variant=\"outline\" className=\"bg-indigo-100 text-indigo-700 border-indigo-300\">\n              Global\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex-1 max-w-xs\">\n              <Select value={selectedSector} onValueChange={setSelectedSector}>\n                <SelectTrigger className=\"bg-white dark:bg-gray-800 border-indigo-200 dark:border-indigo-700 h-12 text-base\">\n                  <SelectValue placeholder=\"Selecionar setor\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-white dark:bg-gray-800 border-indigo-200 dark:border-indigo-700\">\n                  {sectorOptions.map((sector) => (\n                    <SelectItem key={sector.value} value={sector.value}>\n                      {sector.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-indigo-600 dark:text-indigo-400\">\n              <Users className=\"w-4 h-4\" />\n              <span className=\"font-medium\">\nMostrando dados\n              </span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Dashboard de Distribuições */}\n      <Card className=\"bg-gradient-to-br from-gray-50 to-slate-50 dark:from-gray-950/50 dark:to-slate-950/50 border border-gray-200 dark:border-gray-800\">\n        <CardHeader>\n          <CardTitle className=\"text-xl font-bold text-gray-800 dark:text-gray-200 flex items-center gap-2\">\n            <BarChart3 className=\"w-6 h-6\" />\n            📊 Visão Geral - Distribuições\n          </CardTitle>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Panorama geral da participação por diferentes categorias\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            \n            {/* Distribuição por Setor */}\n            <div className=\"bg-white dark:bg-gray-900 p-4 rounded-lg border border-gray-200 dark:border-gray-700\">\n              <h4 className=\"font-semibold text-sm text-gray-700 dark:text-gray-300 mb-3 flex items-center gap-2\">\n                <Building2 className=\"w-4 h-4\" />\n                Por Setor\n              </h4>\n              <div className=\"space-y-3\">\n                {(() => {\n                  const colors = [\"#eab308\", \"#a855f7\", \"#f97316\", \"#22c55e\", \"#3b82f6\", \"#ef4444\", \"#8b5cf6\"];\n                  const sectorsData = [\n                    { name: \"PAPEM-10\", value: 12, count: 18 },\n                    { name: \"PAPEM-20\", value: 17, count: 25 },\n                    { name: \"PAPEM-30\", value: 11, count: 16 },\n                    { name: \"PAPEM-40\", value: 9, count: 13 },\n                    { name: \"PAPEM-51\", value: 16, count: 23 },\n                    { name: \"PAPEM-52\", value: 14, count: 20 },\n                    { name: \"SECOM\", value: 21, count: 31 }\n                  ];\n                  \n                  return sectorsData.map((item, idx) => (\n                    <div key={idx} className=\"space-y-1\">\n                      <div className=\"flex items-center justify-between text-xs\">\n                        <span className=\"font-medium text-gray-700 dark:text-gray-300\">{item.name}</span>\n                        <span className=\"font-bold text-gray-900 dark:text-gray-100\">{item.value}%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                        <div \n                          className=\"h-2 rounded-full transition-all duration-1000 ease-out\"\n                          style={{ \n                            backgroundColor: colors[idx % colors.length], \n                            width: `${Math.min(item.value * 4, 100)}%` // Escalar para visualização\n                          }}\n                        />\n                      </div>\n                      <div className=\"text-xs text-gray-500\">{item.count} pessoas</div>\n                    </div>\n                  ));\n                })()}\n              </div>\n            </div>\n\n            {/* Distribuição por Escala */}\n            <div className=\"bg-white dark:bg-gray-900 p-4 rounded-lg border border-gray-200 dark:border-gray-700\">\n              <h4 className=\"font-semibold text-sm text-gray-700 dark:text-gray-300 mb-3 flex items-center gap-2\">\n                <Clock className=\"w-4 h-4\" />\n                Por Escala\n              </h4>\n              <div className=\"space-y-3\">\n                {[\n                  { name: \"Cb/MN\", value: 57, color: \"#f59e0b\", count: 78 },\n                  { name: \"SG\", value: 28, color: \"#10b981\", count: 38 },\n                  { name: \"Oficiais\", value: 15, color: \"#3b82f6\", count: 20 }\n                ].map((item, idx) => (\n                  <div key={idx} className=\"space-y-1\">\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <span className=\"font-medium text-gray-700 dark:text-gray-300\">{item.name}</span>\n                      <span className=\"font-bold text-gray-900 dark:text-gray-100\">{item.value}%</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                      <div \n                        className=\"h-2 rounded-full transition-all duration-1000 ease-out\"\n                        style={{ \n                          backgroundColor: item.color, \n                          width: `${Math.min(item.value * 1.7, 100)}%` // Escalar para visualização\n                        }}\n                      />\n                    </div>\n                    <div className=\"text-xs text-gray-500\">{item.count} pessoas</div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Distribuição por Alojamento (Q8) */}\n            <div className=\"bg-white dark:bg-gray-900 p-4 rounded-lg border border-gray-200 dark:border-gray-700\">\n              <h4 className=\"font-semibold text-sm text-gray-700 dark:text-gray-300 mb-3 flex items-center gap-2\">\n                <Home className=\"w-4 h-4\" />\n                Alojamentos\n              </h4>\n              <div className=\"space-y-3\">\n                {(() => {\n                  const alojamentoData = getLocationQuestionData(\"localizacao_alojamento\", { sector: selectedSector });\n                  if (!alojamentoData?.data) return null;\n                  \n                  const colors = [\"#22c55e\", \"#3b82f6\", \"#f59e0b\", \"#ef4444\", \"#8b5cf6\", \"#f97316\"];\n                  return alojamentoData.data.map((item, idx) => (\n                    <div key={idx} className=\"space-y-1\">\n                      <div className=\"flex items-center justify-between text-xs\">\n                        <span className=\"font-medium text-gray-700 dark:text-gray-300\">{item.name}</span>\n                        <span className=\"font-bold text-gray-900 dark:text-gray-100\">{item.value}%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                        <div \n                          className=\"h-2 rounded-full transition-all duration-1000 ease-out\"\n                          style={{ \n                            backgroundColor: colors[idx] || \"#6b7280\", \n                            width: `${Math.min(item.value * 2, 100)}%`\n                          }}\n                        />\n                      </div>\n                      <div className=\"text-xs text-gray-500\">{item.count} pessoas</div>\n                    </div>\n                  ));\n                })()}\n              </div>\n            </div>\n\n            {/* Distribuição por Rancho (Q12) */}\n            <div className=\"bg-white dark:bg-gray-900 p-4 rounded-lg border border-gray-200 dark:border-gray-700\">\n              <h4 className=\"font-semibold text-sm text-gray-700 dark:text-gray-300 mb-3 flex items-center gap-2\">\n                <Utensils className=\"w-4 h-4\" />\n                Ranchos\n              </h4>\n              <div className=\"space-y-3\">\n                {(() => {\n                  const ranchoData = getLocationQuestionData(\"localizacao_rancho\", { sector: selectedSector });\n                  if (!ranchoData?.data) return null;\n                  \n                  const colors = [\"#10b981\", \"#f59e0b\", \"#ef4444\"];\n                  return ranchoData.data.map((item, idx) => (\n                    <div key={idx} className=\"space-y-1\">\n                      <div className=\"flex items-center justify-between text-xs\">\n                        <span className=\"font-medium text-gray-700 dark:text-gray-300\">{item.name}</span>\n                        <span className=\"font-bold text-gray-900 dark:text-gray-100\">{item.value}%</span>\n                      </div>\n                      <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                        <div \n                          className=\"h-2 rounded-full transition-all duration-1000 ease-out\"\n                          style={{ \n                            backgroundColor: colors[idx] || \"#6b7280\", \n                            width: `${Math.min(item.value * 1.5, 100)}%`\n                          }}\n                        />\n                      </div>\n                      <div className=\"text-xs text-gray-500\">{item.count} pessoas</div>\n                    </div>\n                  ));\n                })()}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* 💼 SEÇÃO: TRABALHO GERAL */}\n      <div className=\"space-y-6\">\n        <div className=\"bg-gradient-to-r from-gray-50 to-slate-50 dark:from-gray-950/30 dark:to-slate-950/30 border-l-4 border-gray-400 dark:border-gray-600 p-6 rounded-lg\">\n          <div className=\"flex items-center gap-3 mb-2\">\n            <div className=\"p-2 bg-gray-100 dark:bg-gray-800 rounded-lg\">\n              <BarChart3 className=\"w-6 h-6 text-gray-600 dark:text-gray-400\" />\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold text-gray-800 dark:text-gray-200\">\n                💼 Condições de Trabalho\n              </h2>\n              <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n                Questões gerais sobre ambiente de trabalho e condições de serviço\n              </p>\n            </div>\n          </div>\n          <Badge className=\"bg-gray-100 text-gray-700 border-gray-300\">\n            Afetado pelo filtro global SETOR\n          </Badge>\n        </div>\n        {renderQuestionGroup(sequencedQuestions.q2_q7, \"Q2-Q7: Condições de Trabalho, Serviço e TFM\")}\n      </div>\n\n      {/* 🏠 SEÇÃO: ALOJAMENTO */}\n      <div className=\"space-y-6\">\n        {/* Q8: Cartão removido conforme solicitação do usuário */}\n        \n        {/* Filtro Local de Alojamento */}\n        <div className=\"bg-orange-50 dark:bg-orange-950/20 border border-orange-200 dark:border-orange-800 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-1.5 bg-orange-100 dark:bg-orange-900/50 rounded\">\n                <Home className=\"w-4 h-4 text-orange-600 dark:text-orange-400\" />\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-orange-800 dark:text-orange-200\">\n                  Filtro Local - Alojamento\n                </h4>\n                <p className=\"text-xs text-orange-600 dark:text-orange-400\">\n                  Aplica-se apenas às questões específicas abaixo\n                </p>\n              </div>\n            </div>\n            <Badge variant=\"outline\" className=\"bg-orange-100 text-orange-700 border-orange-300\">\n              Local\n            </Badge>\n          </div>\n          <Select value={alojamentoFilter} onValueChange={setAlojamentoFilter}>\n            <SelectTrigger className=\"bg-white dark:bg-gray-800 border-orange-200 dark:border-orange-700 max-w-xs\">\n              <SelectValue placeholder=\"Filtrar por alojamento\" />\n            </SelectTrigger>\n            <SelectContent className=\"bg-white dark:bg-gray-800 border-orange-200 dark:border-orange-700\">\n              {alojamentoOptions.map((alojamento) => (\n                <SelectItem key={alojamento.value} value={alojamento.value}>\n                  {alojamento.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        \n        {/* Q9-Q10: Questões Específicas de Alojamento (logo após a localização) */}\n        {sequencedQuestions.q9_q10 && sequencedQuestions.q9_q10.length > 0 ? \n          renderQuestionGroup(sequencedQuestions.q9_q10, \"Questões Específicas de Alojamento\") :\n          <div className=\"space-y-4\">\n            <Card className=\"p-6\">\n              <h4 className=\"font-semibold mb-4\">Q9: As instalações do meu alojamento estão em boas condições.</h4>\n              <div className=\"bg-gray-100 p-4 rounded\">\n                <p className=\"text-sm\">Gráfico de satisfação - Concordo: 48% | Neutro: 32% | Discordo: 20%</p>\n              </div>\n            </Card>\n            <Card className=\"p-6\">\n              <h4 className=\"font-semibold mb-4\">Q10: As instalações dos banheiros da OM são adequadas.</h4>\n              <div className=\"bg-gray-100 p-4 rounded\">\n                <p className=\"text-sm\">Gráfico de satisfação - Concordo: 55% | Neutro: 25% | Discordo: 20%</p>\n              </div>\n            </Card>\n          </div>\n        }\n      </div>\n\n      {/* 🍽️ SEÇÃO: RANCHO */}\n      <div className=\"space-y-6\">\n        {/* Q12: Cartão removido conforme solicitação do usuário */}\n        \n        {/* Filtro Local de Rancho */}\n        <div className=\"bg-green-50 dark:bg-green-950/20 border border-green-200 dark:border-green-800 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-1.5 bg-green-100 dark:bg-green-900/50 rounded\">\n                <Utensils className=\"w-4 h-4 text-green-600 dark:text-green-400\" />\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-green-800 dark:text-green-200\">\n                  Filtro Local - Rancho\n                </h4>\n                <p className=\"text-xs text-green-600 dark:text-green-400\">\n                  Aplica-se apenas às questões específicas abaixo\n                </p>\n              </div>\n            </div>\n            <Badge variant=\"outline\" className=\"bg-green-100 text-green-700 border-green-300\">\n              Local\n            </Badge>\n          </div>\n          <Select value={ranchoFilter} onValueChange={setRanchoFilter}>\n            <SelectTrigger className=\"bg-white dark:bg-gray-800 border-green-200 dark:border-green-700 max-w-xs\">\n              <SelectValue placeholder=\"Filtrar por rancho\" />\n            </SelectTrigger>\n            <SelectContent className=\"bg-white dark:bg-gray-800 border-green-200 dark:border-green-700\">\n              {ranchoOptions.map((rancho) => (\n                <SelectItem key={rancho.value} value={rancho.value}>\n                  {rancho.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        \n        {/* Q11, Q13-Q14: Questões Específicas de Rancho (logo após a localização) */}\n        {sequencedQuestions.q11_q13_q14 && sequencedQuestions.q11_q13_q14.length > 0 ? \n          renderQuestionGroup(sequencedQuestions.q11_q13_q14, \"Questões Específicas de Rancho\") :\n          <div className=\"space-y-4\">\n            <Card className=\"p-6\">\n              <h4 className=\"font-semibold mb-4\">Q13: Considero adequadas as instalações do rancho.</h4>\n              <div className=\"bg-gray-100 p-4 rounded\">\n                <p className=\"text-sm\">Gráfico de satisfação - Concordo: 58% | Neutro: 27% | Discordo: 15%</p>\n              </div>\n            </Card>\n            <Card className=\"p-6\">\n              <h4 className=\"font-semibold mb-4\">Q14: Estou satisfeito com a qualidade da comida servida no rancho.</h4>\n              <div className=\"bg-gray-100 p-4 rounded\">\n                <p className=\"text-sm\">Gráfico de satisfação - Concordo: 43% | Neutro: 35% | Discordo: 22%</p>\n              </div>\n            </Card>\n          </div>\n        }\n      </div>\n\n\n      {/* ⏰ SEÇÃO: ESCALA DE SERVIÇO */}\n      <div className=\"space-y-6\">\n        {/* Filtro Local de Escala */}\n        <div className=\"bg-blue-50 dark:bg-blue-950/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-1.5 bg-blue-100 dark:bg-blue-900/50 rounded\">\n                <Clock className=\"w-4 h-4 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-blue-800 dark:text-blue-200\">\n                  Filtro Local - Escala\n                </h4>\n                <p className=\"text-xs text-blue-600 dark:text-blue-400\">\n                  Aplica-se apenas às questões específicas abaixo\n                </p>\n              </div>\n            </div>\n            <Badge variant=\"outline\" className=\"bg-blue-100 text-blue-700 border-blue-300\">\n              Local\n            </Badge>\n          </div>\n          <Select value={escalaFilter} onValueChange={setEscalaFilter}>\n            <SelectTrigger className=\"bg-white dark:bg-gray-800 border-blue-200 dark:border-blue-700 max-w-xs\">\n              <SelectValue placeholder=\"Filtrar por escala\" />\n            </SelectTrigger>\n            <SelectContent className=\"bg-white dark:bg-gray-800 border-blue-200 dark:border-blue-700\">\n              {escalaOptions.map((escala) => (\n                <SelectItem key={escala.value} value={escala.value}>\n                  {escala.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        \n        {/* Q16-Q17: Questões Específicas de Escala de Serviço */}\n        {renderQuestionGroup(sequencedQuestions.q16_q17, \"Questões Específicas de Escala de Serviço\")}\n      </div>\n\n      {/* 💼 SEÇÃO: TFM */}\n      <div className=\"space-y-6\">\n        <div className=\"bg-gradient-to-r from-purple-50 to-violet-50 dark:from-purple-950/30 dark:to-violet-950/30 border-l-4 border-purple-400 dark:border-purple-600 p-6 rounded-lg\">\n          <div className=\"flex items-center gap-3 mb-2\">\n            <div className=\"p-2 bg-purple-100 dark:bg-purple-900/50 rounded-lg\">\n              <BarChart3 className=\"w-6 h-6 text-purple-600 dark:text-purple-400\" />\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold text-purple-800 dark:text-purple-200\">\n                💪 TFM - Treinamento Físico Militar\n              </h2>\n              <p className=\"text-purple-600 dark:text-purple-400 text-sm\">\n                Questões sobre participação e instalações de TFM\n              </p>\n            </div>\n          </div>\n          <Badge className=\"bg-purple-100 text-purple-700 border-purple-300\">\n            Afetado pelo filtro global SETOR\n          </Badge>\n        </div>\n        {renderQuestionGroup(sequencedQuestions.q18_q20, \"Q18-Q20: TFM\")}\n      </div>\n\n    </div>\n  );\n}\n","size_bytes":46882},"src/components/admin/MotivationCharts.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from \"recharts\";\n\nconst motivationQuestions = [\n  { id: \"feedback_desempenho\", name: \"Q30. Feedback Desempenho\", concordo: 38, neutro: 32, discordo: 30 },\n  { id: \"conceito_compativel\", name: \"Q31. Conceito Compatível\", concordo: 55, neutro: 25, discordo: 20 },\n  { id: \"importancia_atividade\", name: \"Q32. Importância Atividade\", concordo: 72, neutro: 18, discordo: 10 },\n  { id: \"trabalho_reconhecido\", name: \"Q33. Trabalho Reconhecido\", concordo: 42, neutro: 28, discordo: 30 },\n  { id: \"crescimento_estimulado\", name: \"Q34. Crescimento Estimulado\", concordo: 38, neutro: 32, discordo: 30 },\n  { id: \"cursos_suficientes\", name: \"Q35. Cursos Suficientes\", concordo: 48, neutro: 30, discordo: 22 },\n  { id: \"programa_treinamento\", name: \"Q36. Programa Treinamento\", concordo: 35, neutro: 35, discordo: 30 },\n  { id: \"orgulho_trabalhar\", name: \"Q37. Orgulho Trabalhar\", concordo: 68, neutro: 20, discordo: 12 },\n  { id: \"bem_aproveitado\", name: \"Q38. Bem Aproveitado\", concordo: 52, neutro: 28, discordo: 20 },\n  { id: \"potencial_outra_funcao\", name: \"Q39. Potencial Outra Função\", concordo: 45, neutro: 30, discordo: 25 },\n  { id: \"carga_trabalho_justa\", name: \"Q40. Carga Trabalho Justa\", concordo: 52, neutro: 25, discordo: 23 },\n  { id: \"licenca_autorizada\", name: \"Q41. Licença Autorizada\", concordo: 65, neutro: 22, discordo: 13 }\n];\n\nconst sectorOptions = [\n  { value: \"all\", label: \"Todos os setores\" },\n  { value: \"PAPEM-10\", label: \"PAPEM-10\" },\n  { value: \"PAPEM-20\", label: \"PAPEM-20\" },\n  { value: \"PAPEM-30\", label: \"PAPEM-30\" },\n  { value: \"PAPEM-40\", label: \"PAPEM-40\" },\n  { value: \"PAPEM-51\", label: \"PAPEM-51\" },\n  { value: \"PAPEM-52\", label: \"PAPEM-52\" },\n  { value: \"SECOM\", label: \"SECOM\" }\n];\n\n\nexport function MotivationCharts() {\n  const [selectedSector, setSelectedSector] = useState(\"all\");\n\n  // Filter data based on selected sector\n  const filteredData = selectedSector === \"all\" ? motivationQuestions : \n    motivationQuestions.map(q => ({\n      ...q,\n      // Mock filtering - in real app, this would filter actual responses\n      concordo: Math.floor(Math.random() * 40) + 30,\n      neutro: Math.floor(Math.random() * 30) + 20,\n      discordo: Math.floor(Math.random() * 30) + 15\n    }));\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filter */}\n      <div className=\"flex items-center gap-4 mb-6\">\n        <Select value={selectedSector} onValueChange={setSelectedSector}>\n          <SelectTrigger className=\"w-[200px] bg-background\">\n            <SelectValue placeholder=\"Filtrar por setor\" />\n          </SelectTrigger>\n          <SelectContent className=\"bg-background border-border\">\n            {sectorOptions.map((sector) => (\n              <SelectItem key={sector.value} value={sector.value}>\n                {sector.label}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        <div className=\"text-sm text-muted-foreground\">\n          {selectedSector === \"all\" ? \"Mostrando todos os setores\" : `Filtrado por: ${selectedSector}`}\n        </div>\n      </div>\n\n      {/* Visual Charts Grid */}\n      <div className=\"grid gap-6 lg:grid-cols-2 xl:grid-cols-3\">\n        {filteredData.map((question, index) => {\n          const chartData = [\n            { name: \"Concordo\", value: question.concordo, fill: \"hsl(var(--success))\" },\n            { name: \"Neutro\", value: question.neutro, fill: \"hsl(var(--warning))\" },\n            { name: \"Discordo\", value: question.discordo, fill: \"hsl(var(--destructive))\" }\n          ];\n\n          const barData = [\n            { category: \"Concordo\", percentage: question.concordo, fill: \"hsl(var(--success))\" },\n            { category: \"Neutro\", percentage: question.neutro, fill: \"hsl(var(--warning))\" },\n            { category: \"Discordo\", percentage: question.discordo, fill: \"hsl(var(--destructive))\" }\n          ];\n\n\n          return (\n            <Card \n              key={question.id} \n              className=\"group hover:shadow-xl transition-all duration-300 hover:scale-[1.02] bg-gradient-to-br from-background to-muted/20 border-2 hover:border-primary/20 animate-fade-in\"\n              style={{ animationDelay: `${index * 100}ms` }}\n            >\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-sm font-semibold leading-tight text-foreground group-hover:text-primary transition-colors\">\n                  {question.name}\n                </CardTitle>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-4\">\n                {/* Pie Chart */}\n                <div className=\"flex items-center justify-center\">\n                  <ResponsiveContainer width=\"100%\" height={180}>\n                    <PieChart>\n                      <Pie\n                        data={chartData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        innerRadius={35}\n                        outerRadius={65}\n                        paddingAngle={3}\n                        dataKey=\"value\"\n                        animationBegin={index * 200}\n                        animationDuration={1000}\n                      >\n                        {chartData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.fill} />\n                        ))}\n                      </Pie>\n                      <Tooltip \n                        contentStyle={{\n                          background: 'hsl(var(--background))',\n                          border: '1px solid hsl(var(--border))',\n                          borderRadius: '8px',\n                          boxShadow: '0 4px 12px rgba(0,0,0,0.1)'\n                        }}\n                        formatter={(value) => [`${value}%`, '']}\n                      />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </div>\n\n                {/* Bar Chart */}\n                <div className=\"space-y-3\">\n                  <ResponsiveContainer width=\"100%\" height={120}>\n                    <BarChart data={barData} margin={{ top: 5, right: 5, left: 5, bottom: 5 }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" opacity={0.3} />\n                      <XAxis \n                        dataKey=\"category\" \n                        axisLine={false}\n                        tickLine={false}\n                        tick={{ fontSize: 10, fill: 'hsl(var(--muted-foreground))' }}\n                      />\n                      <YAxis hide />\n                      <Tooltip \n                        contentStyle={{\n                          background: 'hsl(var(--background))',\n                          border: '1px solid hsl(var(--border))',\n                          borderRadius: '6px'\n                        }}\n                        formatter={(value) => [`${value}%`, 'Percentual']}\n                      />\n                      <Bar \n                        dataKey=\"percentage\" \n                        radius={[4, 4, 0, 0]}\n                        animationDuration={1200}\n                        animationBegin={index * 150}\n                      />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n\n                {/* Statistics Summary */}\n                <div className=\"grid grid-cols-3 gap-2 pt-2 border-t border-border/50\">\n                  {[\n                    { label: \"Positivo\", value: question.concordo, color: \"text-success\", bg: \"bg-success/10\" },\n                    { label: \"Neutro\", value: question.neutro, color: \"text-warning\", bg: \"bg-warning/10\" },\n                    { label: \"Negativo\", value: question.discordo, color: \"text-destructive\", bg: \"bg-destructive/10\" }\n                  ].map((stat, idx) => (\n                    <div key={idx} className={`${stat.bg} rounded-lg p-2 text-center transition-all hover:scale-105`}>\n                      <div className={`text-sm font-bold ${stat.color}`}>{stat.value}%</div>\n                      <div className=\"text-xs text-muted-foreground\">{stat.label}</div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n}","size_bytes":8578},"src/components/admin/OpenAnswersSection.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MessageSquare, ThumbsUp, ThumbsDown, Lightbulb, Heart } from \"lucide-react\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\n\nconst mockOpenAnswers = [\n  {\n    id: 1,\n    setor: \"PAPEM-10\",\n    aspecto_positivo: \"A equipe é muito unida e sempre se ajudam mutuamente. O ambiente de camaradagem é excelente.\",\n    aspecto_negativo: \"A falta de equipamentos adequados dificulta algumas atividades do dia a dia.\",\n    proposta_processo: \"Seria interessante implementar um sistema digital para controle de materiais.\",\n    proposta_satisfacao: \"Mais atividades de confraternização e reconhecimento pelos trabalhos realizados.\"\n  },\n  {\n    id: 2,\n    setor: \"PAPEM-20\",\n    aspecto_positivo: \"A liderança é respeitosa e sempre aberta ao diálogo.\",\n    aspecto_negativo: \"Os horários das escalas poderiam ser melhor distribuídos.\",\n    proposta_processo: \"Automatizar alguns processos administrativos que ainda são manuais.\",\n    proposta_satisfacao: \"Criar um programa de capacitação contínua para os militares.\"\n  },\n  {\n    id: 3,\n    setor: \"PAPEM-30\",\n    aspecto_positivo: \"Excelente estrutura física e bom ambiente de trabalho.\",\n    aspecto_negativo: \"Comunicação entre setores poderia ser mais eficiente.\",\n    proposta_processo: \"Implementar reuniões semanais entre chefes de setor.\",\n    proposta_satisfacao: \"Estabelecer metas claras e sistema de premiação por desempenho.\"\n  },\n  {\n    id: 4,\n    setor: \"PAPEM-40\",\n    aspecto_positivo: \"Boa comunicação interna e transparência nas decisões.\",\n    aspecto_negativo: \"Falta de material de escritório e equipamentos básicos.\",\n    proposta_processo: \"Melhorar o processo de solicitação de materiais.\",\n    proposta_satisfacao: \"Promover mais eventos de integração entre as equipes.\"\n  },\n  {\n    id: 5,\n    setor: \"SECOM\",\n    aspecto_positivo: \"Ambiente colaborativo e apoio mútuo entre colegas.\",\n    aspecto_negativo: \"Necessidade de melhor infraestrutura de TI.\",\n    proposta_processo: \"Digitalizar processos de comunicação interna.\",\n    proposta_satisfacao: \"Implementar programa de reconhecimento por mérito.\"\n  }\n];\n\nconst sectorOptions = [\n  { value: \"all\", label: \"Todos os setores\" },\n  { value: \"PAPEM-10\", label: \"PAPEM-10\" },\n  { value: \"PAPEM-20\", label: \"PAPEM-20\" },\n  { value: \"PAPEM-30\", label: \"PAPEM-30\" },\n  { value: \"PAPEM-40\", label: \"PAPEM-40\" },\n  { value: \"PAPEM-51\", label: \"PAPEM-51\" },\n  { value: \"PAPEM-52\", label: \"PAPEM-52\" },\n  { value: \"SECOM\", label: \"SECOM\" }\n];\n\nexport function OpenAnswersSection() {\n  const [selectedSector, setSelectedSector] = useState(\"all\");\n\n  // Filter answers based on selected sector\n  const filteredAnswers = selectedSector === \"all\" ? mockOpenAnswers : \n    mockOpenAnswers.filter(answer => answer.setor === selectedSector);\n\n  const categories = [\n    {\n      title: \"Aspectos Positivos\",\n      icon: ThumbsUp,\n      color: \"text-success\",\n      bgColor: \"bg-success/10\",\n      borderColor: \"border-success/20\",\n      field: \"aspecto_positivo\"\n    },\n    {\n      title: \"Aspectos Negativos\",\n      icon: ThumbsDown,\n      color: \"text-destructive\",\n      bgColor: \"bg-destructive/10\", \n      borderColor: \"border-destructive/20\",\n      field: \"aspecto_negativo\"\n    },\n    {\n      title: \"Propostas de Processos\",\n      icon: Lightbulb,\n      color: \"text-warning\",\n      bgColor: \"bg-warning/10\",\n      borderColor: \"border-warning/20\", \n      field: \"proposta_processo\"\n    },\n    {\n      title: \"Propostas de Satisfação\",\n      icon: Heart,\n      color: \"text-accent\",\n      bgColor: \"bg-accent/10\",\n      borderColor: \"border-accent/20\",\n      field: \"proposta_satisfacao\"\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filter */}\n      <div className=\"flex items-center gap-4 mb-6\">\n        <Select value={selectedSector} onValueChange={setSelectedSector}>\n          <SelectTrigger className=\"w-[200px] bg-background\">\n            <SelectValue placeholder=\"Filtrar por setor\" />\n          </SelectTrigger>\n          <SelectContent className=\"bg-background border-border\">\n            {sectorOptions.map((sector) => (\n              <SelectItem key={sector.value} value={sector.value}>\n                {sector.label}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        <div className=\"text-sm text-muted-foreground\">\n          {selectedSector === \"all\" ? \"Mostrando todos os setores\" : `Filtrado por: ${selectedSector}`}\n        </div>\n      </div>\n\n      <div className=\"text-center space-y-2 mb-8\">\n        <h3 className=\"text-2xl font-bold text-foreground\">Respostas Abertas</h3>\n        <p className=\"text-muted-foreground\">\n          Análise qualitativa das sugestões e comentários da tripulação ({filteredAnswers.length} respostas{selectedSector !== \"all\" ? ` - ${selectedSector}` : \"\"})\n        </p>\n      </div>\n\n      {categories.map((category) => {\n        const Icon = category.icon;\n        \n        return (\n          <Card key={category.field} className=\"survey-card\">\n            <CardHeader className={`${category.bgColor} ${category.borderColor} border-b`}>\n              <CardTitle className=\"flex items-center gap-3\">\n                <Icon className={`w-6 h-6 ${category.color}`} />\n                {category.title}\n                <Badge variant=\"secondary\" className=\"ml-auto\">\n                  {filteredAnswers.length} respostas\n                </Badge>\n              </CardTitle>\n              <CardDescription>\n                Comentários e sugestões sobre {category.title.toLowerCase()}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <ScrollArea className=\"h-[300px]\">\n                <div className=\"p-6 space-y-4\">\n                  {filteredAnswers.map((answer, index) => (\n                    <div key={answer.id}>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                          <MessageSquare className=\"w-4 h-4\" />\n                          <span>Resposta #{answer.id}</span>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {answer.setor}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm leading-relaxed text-foreground bg-muted/30 p-4 rounded-lg\">\n                          {answer[category.field as keyof typeof answer]}\n                        </p>\n                      </div>\n                      {index < filteredAnswers.length - 1 && <Separator className=\"mt-4\" />}\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        );\n      })}\n\n    </div>\n  );\n}","size_bytes":7171},"src/components/admin/RelationshipCharts.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from \"recharts\";\n\nconst relationshipQuestions = [\n  { id: \"chefe_ouve_ideias\", name: \"Q21. Chefe Ouve Ideias\", concordo: 55, neutro: 25, discordo: 20 },\n  { id: \"chefe_se_importa\", name: \"Q22. Chefe Se Importa\", concordo: 48, neutro: 32, discordo: 20 },\n  { id: \"contribuir_atividades\", name: \"Q23. Contribuir Atividades\", concordo: 72, neutro: 18, discordo: 10 },\n  { id: \"chefe_delega\", name: \"Q24. Chefe Delega\", concordo: 52, neutro: 28, discordo: 20 },\n  { id: \"pares_auxiliam\", name: \"Q25. Pares Auxiliam\", concordo: 68, neutro: 22, discordo: 10 },\n  { id: \"entrosamento_setores\", name: \"Q26. Entrosamento Setores\", concordo: 45, neutro: 35, discordo: 20 },\n  { id: \"entrosamento_tripulacao\", name: \"Q27. Entrosamento Tripulação\", concordo: 62, neutro: 25, discordo: 13 },\n  { id: \"convivio_agradavel\", name: \"Q28. Convívio Agradável\", concordo: 65, neutro: 22, discordo: 13 },\n  { id: \"confianca_respeito\", name: \"Q29. Confiança e Respeito\", concordo: 58, neutro: 27, discordo: 15 }\n];\n\nconst sectorOptions = [\n  { value: \"all\", label: \"Todos os setores\" },\n  { value: \"PAPEM-10\", label: \"PAPEM-10\" },\n  { value: \"PAPEM-20\", label: \"PAPEM-20\" },\n  { value: \"PAPEM-30\", label: \"PAPEM-30\" },\n  { value: \"PAPEM-40\", label: \"PAPEM-40\" },\n  { value: \"PAPEM-51\", label: \"PAPEM-51\" },\n  { value: \"PAPEM-52\", label: \"PAPEM-52\" },\n  { value: \"SECOM\", label: \"SECOM\" }\n];\n\n\nexport function RelationshipCharts() {\n  const [selectedSector, setSelectedSector] = useState(\"all\");\n\n  // Filter data based on selected sector\n  const filteredData = selectedSector === \"all\" ? relationshipQuestions : \n    relationshipQuestions.map(q => ({\n      ...q,\n      // Mock filtering - in real app, this would filter actual responses\n      concordo: Math.floor(Math.random() * 40) + 30,\n      neutro: Math.floor(Math.random() * 30) + 20,\n      discordo: Math.floor(Math.random() * 30) + 15\n    }));\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filter */}\n      <div className=\"flex items-center gap-4 mb-6\">\n        <Select value={selectedSector} onValueChange={setSelectedSector}>\n          <SelectTrigger className=\"w-[200px] bg-background\">\n            <SelectValue placeholder=\"Filtrar por setor\" />\n          </SelectTrigger>\n          <SelectContent className=\"bg-background border-border\">\n            {sectorOptions.map((sector) => (\n              <SelectItem key={sector.value} value={sector.value}>\n                {sector.label}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n        <div className=\"text-sm text-muted-foreground\">\n          {selectedSector === \"all\" ? \"Mostrando todos os setores\" : `Filtrado por: ${selectedSector}`}\n        </div>\n      </div>\n\n      {/* Visual Charts Grid */}\n      <div className=\"grid gap-6 lg:grid-cols-2 xl:grid-cols-3\">\n        {filteredData.map((question, index) => {\n          const chartData = [\n            { name: \"Concordo\", value: question.concordo, fill: \"hsl(var(--success))\" },\n            { name: \"Neutro\", value: question.neutro, fill: \"hsl(var(--warning))\" },\n            { name: \"Discordo\", value: question.discordo, fill: \"hsl(var(--destructive))\" }\n          ];\n\n          const barData = [\n            { category: \"Concordo\", percentage: question.concordo, fill: \"hsl(var(--success))\" },\n            { category: \"Neutro\", percentage: question.neutro, fill: \"hsl(var(--warning))\" },\n            { category: \"Discordo\", percentage: question.discordo, fill: \"hsl(var(--destructive))\" }\n          ];\n\n\n          return (\n            <Card \n              key={question.id} \n              className=\"group hover:shadow-xl transition-all duration-300 hover:scale-[1.02] bg-gradient-to-br from-background to-muted/20 border-2 hover:border-primary/20 animate-fade-in\"\n              style={{ animationDelay: `${index * 100}ms` }}\n            >\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"text-sm font-semibold leading-tight text-foreground group-hover:text-primary transition-colors\">\n                  {question.name}\n                </CardTitle>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-4\">\n                {/* Pie Chart */}\n                <div className=\"flex items-center justify-center\">\n                  <ResponsiveContainer width=\"100%\" height={180}>\n                    <PieChart>\n                      <Pie\n                        data={chartData}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        innerRadius={35}\n                        outerRadius={65}\n                        paddingAngle={3}\n                        dataKey=\"value\"\n                        animationBegin={index * 200}\n                        animationDuration={1000}\n                      >\n                        {chartData.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.fill} />\n                        ))}\n                      </Pie>\n                      <Tooltip \n                        contentStyle={{\n                          background: 'hsl(var(--background))',\n                          border: '1px solid hsl(var(--border))',\n                          borderRadius: '8px',\n                          boxShadow: '0 4px 12px rgba(0,0,0,0.1)'\n                        }}\n                        formatter={(value) => [`${value}%`, '']}\n                      />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </div>\n\n                {/* Bar Chart */}\n                <div className=\"space-y-3\">\n                  <ResponsiveContainer width=\"100%\" height={120}>\n                    <BarChart data={barData} margin={{ top: 5, right: 5, left: 5, bottom: 5 }}>\n                      <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" opacity={0.3} />\n                      <XAxis \n                        dataKey=\"category\" \n                        axisLine={false}\n                        tickLine={false}\n                        tick={{ fontSize: 10, fill: 'hsl(var(--muted-foreground))' }}\n                      />\n                      <YAxis hide />\n                      <Tooltip \n                        contentStyle={{\n                          background: 'hsl(var(--background))',\n                          border: '1px solid hsl(var(--border))',\n                          borderRadius: '6px'\n                        }}\n                        formatter={(value) => [`${value}%`, 'Percentual']}\n                      />\n                      <Bar \n                        dataKey=\"percentage\" \n                        radius={[4, 4, 0, 0]}\n                        animationDuration={1200}\n                        animationBegin={index * 150}\n                      />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n\n                {/* Statistics Summary */}\n                <div className=\"grid grid-cols-3 gap-2 pt-2 border-t border-border/50\">\n                  {[\n                    { label: \"Positivo\", value: question.concordo, color: \"text-success\", bg: \"bg-success/10\" },\n                    { label: \"Neutro\", value: question.neutro, color: \"text-warning\", bg: \"bg-warning/10\" },\n                    { label: \"Negativo\", value: question.discordo, color: \"text-destructive\", bg: \"bg-destructive/10\" }\n                  ].map((stat, idx) => (\n                    <div key={idx} className={`${stat.bg} rounded-lg p-2 text-center transition-all hover:scale-105`}>\n                      <div className={`text-sm font-bold ${stat.color}`}>{stat.value}%</div>\n                      <div className=\"text-xs text-muted-foreground\">{stat.label}</div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    </div>\n  );\n}","size_bytes":8237},"src/components/admin/StatsOverview.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, Building2, TrendingUp, Percent, BarChart, RefreshCw } from \"lucide-react\";\nimport { PieChart, Pie, Cell, ResponsiveContainer } from \"recharts\";\nimport { useStats, ratingToNumber } from \"@/hooks/useStats\";\nimport { Button } from \"@/components/ui/button\";\n\nconst SETOR_COLORS = {\n  \"PAPEM-10\": \"#22c55e\",\n  \"PAPEM-20\": \"#eab308\", \n  \"PAPEM-30\": \"#ef4444\",\n  \"PAPEM-40\": \"#3b82f6\",\n  \"PAPEM-51\": \"#a855f7\",\n  \"PAPEM-52\": \"#f97316\",\n  \"SECOM\": \"#06b6d4\"\n};\n\nexport function StatsOverview() {\n  const { stats, analytics, loading, error, refetch } = useStats();\n\n  if (loading) {\n    return (\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i} className=\"bg-gradient-card shadow-custom-md animate-pulse\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <div className=\"h-4 bg-gray-200 rounded w-24\"></div>\n              <div className=\"h-4 w-4 bg-gray-200 rounded\"></div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-8 bg-gray-200 rounded w-16 mb-2\"></div>\n              <div className=\"h-3 bg-gray-200 rounded w-full\"></div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex flex-col items-center justify-center p-8 text-center\">\n        <div className=\"text-red-500 mb-4\">Erro ao carregar dados: {error}</div>\n        <Button onClick={refetch} variant=\"outline\" size=\"sm\">\n          <RefreshCw className=\"w-4 h-4 mr-2\" />\n          Tentar novamente\n        </Button>\n      </div>\n    );\n  }\n\n  if (!stats) {\n    return <div className=\"text-center p-8\">Nenhum dado disponível</div>;\n  }\n\n  // Calculate general satisfaction average\n  const generalSatisfaction = analytics?.satisfactionAverages ? \n    Object.values(analytics.satisfactionAverages)\n      .filter(avg => avg !== null)\n      .reduce((sum, avg) => sum + Number(avg), 0) / \n    Object.values(analytics.satisfactionAverages).filter(avg => avg !== null).length * 20 // Convert to percentage\n    : 0;\n\n  // Get most active sector\n  const mostActiveSection = stats.setorDistribution.length > 0 ? \n    stats.setorDistribution.sort((a, b) => b.count - a.count)[0].setor : \"N/A\";\n\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n      <Card className=\"bg-gradient-card shadow-custom-md hover:shadow-custom-lg transition-shadow\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Total de Respostas</CardTitle>\n          <Users className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold text-primary\">{stats.totalResponses}</div>\n          <p className=\"text-xs text-muted-foreground\">\n            participações registradas\n          </p>\n        </CardContent>\n      </Card>\n\n      <Card className=\"bg-gradient-card shadow-custom-md hover:shadow-custom-lg transition-shadow\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Distribuição por Setor</CardTitle>\n          <BarChart className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center text-xs\">\n              <span className=\"font-medium\">Setor</span>\n              <span className=\"font-medium\">Respondentes</span>\n            </div>\n            <div className=\"space-y-2\">\n              {stats.setorDistribution.map((setor, idx) => (\n                <div key={idx} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2 flex-1\">\n                    <div \n                      className=\"w-2 h-2 rounded-full flex-shrink-0\" \n                      style={{ backgroundColor: SETOR_COLORS[setor.setor] || \"#64748b\" }}\n                    />\n                    <span className=\"text-xs font-medium truncate\">{setor.setor}</span>\n                  </div>\n                  <div className=\"text-xs font-bold text-primary\">{setor.count}</div>\n                </div>\n              ))}\n              {stats.setorDistribution.length === 0 && (\n                <div className=\"text-xs text-muted-foreground text-center py-2\">\n                  Nenhum dado disponível\n                </div>\n              )}\n            </div>\n            <div className=\"pt-2 border-t border-border/50\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-xs font-medium text-muted-foreground\">Total:</span>\n                <span className=\"text-sm font-bold text-primary\">{stats.totalResponses}</span>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"bg-gradient-card shadow-custom-md hover:shadow-custom-lg transition-shadow\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Satisfação Geral</CardTitle>\n          <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold text-primary\">{Math.round(generalSatisfaction)}%</div>\n          <p className=\"text-xs text-muted-foreground\">\n            <Badge variant={generalSatisfaction > 70 ? \"default\" : \"secondary\"} className=\"text-xs\">\n              {generalSatisfaction > 70 ? \"Positivo\" : \"Atenção\"}\n            </Badge>\n          </p>\n        </CardContent>\n      </Card>\n\n      <Card className=\"bg-gradient-card shadow-custom-md hover:shadow-custom-lg transition-shadow\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Setor Mais Ativo</CardTitle>\n          <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-lg font-bold text-primary\">{mostActiveSection}</div>\n          <p className=\"text-xs text-muted-foreground\">\n            maior participação\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6522},"src/components/layout/AppHeader.tsx":{"content":"import { Sparkles, Shield, BarChart3, ClipboardList } from \"lucide-react\";\nimport { NavLink, useLocation } from \"react-router-dom\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function AppHeader() {\n  const location = useLocation();\n  \n  return (\n    <header className=\"h-20 border-b bg-gradient-card shadow-custom-lg relative overflow-hidden backdrop-blur-sm\">\n      {/* Background mesh pattern */}\n      <div className=\"absolute inset-0 bg-gradient-mesh opacity-30\"></div>\n      \n      {/* Glass overlay */}\n      <div className=\"absolute inset-0 bg-gradient-glass backdrop-blur-xs\"></div>\n      \n      <div className=\"relative z-10 h-full flex items-center px-8 gap-6\">\n        <div className=\"flex-1 flex items-center gap-4\">\n          {/* Brasão PAPEM */}\n          <div className=\"relative\">\n            <img \n              src=\"/lovable-uploads/e0a4659d-a903-4c7c-b8ab-10694346d6f8.png\" \n              alt=\"Brasão PAPEM\" \n              className=\"w-12 h-12 object-contain\"\n            />\n          </div>\n          \n          <div className=\"space-y-1\">\n            <h1 className=\"text-2xl font-bold bg-gradient-primary bg-clip-text text-transparent animate-gradient bg-[length:200%_200%]\">\n              PAPEM - Pagadoria de Pessoal da Marinha\n            </h1>\n            <div className=\"flex items-center gap-4 text-sm\">\n              <span className=\"flex items-center gap-2 text-muted-foreground\">\n                <Shield className=\"w-4 h-4 text-success animate-pulse-slow\" />\n                100% Anônimo\n              </span>\n            </div>\n          </div>\n        </div>\n        \n        {/* Navigation */}\n        <div className=\"flex items-center gap-2\">\n          <Button\n            asChild\n            variant={location.pathname === \"/\" || location.pathname === \"/survey\" ? \"default\" : \"ghost\"}\n            size=\"sm\"\n            className=\"gap-2\"\n          >\n            <NavLink to=\"/survey\">\n              <ClipboardList className=\"w-4 h-4\" />\n              Pesquisa\n            </NavLink>\n          </Button>\n          \n          <Button\n            asChild\n            variant={location.pathname === \"/admin\" ? \"default\" : \"ghost\"}\n            size=\"sm\" \n            className=\"gap-2\"\n          >\n            <NavLink to=\"/admin\">\n              <BarChart3 className=\"w-4 h-4\" />\n              Dashboard\n            </NavLink>\n          </Button>\n        </div>\n        \n        {/* Status indicator */}\n        <div className=\"flex items-center gap-2 px-4 py-2 bg-success/10 rounded-full border border-success/20\">\n          <div className=\"w-2 h-2 bg-success rounded-full animate-pulse\"></div>\n          <span className=\"text-sm text-success font-medium\">Sistema Ativo</span>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":2771},"src/components/layout/AppLayout.tsx":{"content":"import { Outlet } from \"react-router-dom\";\nimport { AppHeader } from \"@/components/layout/AppHeader\";\n\nexport function AppLayout() {\n  return (\n    <div className=\"min-h-screen flex flex-col w-full bg-background\">\n      <AppHeader />\n      <main className=\"flex-1\">\n        <Outlet />\n      </main>\n      <footer className=\"border-t bg-card p-4 text-center\">\n        <p className=\"text-sm text-muted-foreground\">\n          PAPEM - Pagadoria de Pessoal da Marinha\n        </p>\n      </footer>\n    </div>\n  );\n}","size_bytes":509},"src/components/layout/Layout.tsx":{"content":"import React from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { createPageUrl } from \"@/utils\";\nimport { ClipboardList, BarChart3 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nconst navigationItems = [\n  {\n    title: \"Pesquisa de Clima\",\n    url: createPageUrl(\"Survey\"),\n    icon: ClipboardList,\n    pageName: \"Survey\"\n  },\n  {\n    title: \"Dashboard Administrativo\", \n    url: createPageUrl(\"Admin\"),\n    icon: BarChart3,\n    pageName: \"Admin\"\n  }\n];\n\ninterface LayoutProps {\n  children: React.ReactNode;\n  currentPageName: string;\n}\n\nexport default function Layout({ children, currentPageName }: LayoutProps) {\n  const location = useLocation();\n\n  return (\n    <div className=\"min-h-screen flex flex-col w-full bg-background\">\n      <header className=\"bg-gradient-card shadow-custom-lg relative overflow-hidden backdrop-blur-sm border-b\">\n        <div className=\"absolute inset-0 bg-gradient-mesh opacity-30\"></div>\n        <div className=\"absolute inset-0 bg-gradient-glass backdrop-blur-xs\"></div>\n        \n        <div className=\"relative z-10 h-20 flex items-center px-8 gap-6\">\n          <div className=\"flex-1 flex items-center gap-4\">\n            <div className=\"w-12 h-12 bg-gradient-primary rounded-2xl flex items-center justify-center shadow-neon animate-float\">\n              <span className=\"text-primary-foreground font-bold text-lg\">P</span>\n            </div>\n            \n            <div className=\"space-y-1\">\n              <h1 className=\"text-2xl font-bold bg-gradient-primary bg-clip-text text-transparent\">\n                PAPEM - Pagadoria de Pessoal da Marinha\n              </h1>\n              <p className=\"text-sm text-muted-foreground\">\n                Sistema de Pesquisa de Clima Organizacional\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {navigationItems.map((item) => (\n              <Button\n                key={item.title}\n                asChild\n                variant={currentPageName === item.pageName ? \"default\" : \"ghost\"}\n                size=\"sm\"\n                className=\"gap-2\"\n              >\n                <Link to={item.url}>\n                  <item.icon className=\"w-4 h-4\" />\n                  {item.title}\n                </Link>\n              </Button>\n            ))}\n          </div>\n        </div>\n      </header>\n\n      <main className=\"flex-1\">\n        {children}\n      </main>\n      \n      <footer className=\"border-t bg-card p-4 text-center\">\n        <p className=\"text-sm text-muted-foreground\">\n          PAPEM - Pagadoria de Pessoal da Marinha\n        </p>\n      </footer>\n    </div>\n  );\n}","size_bytes":2694},"src/components/survey/Question.tsx":{"content":"import { Label } from \"@/components/ui/label\";\nimport { Building2, CheckCircle2 } from \"lucide-react\";\n\ninterface QuestionProps {\n  question: string;\n  name: string;\n  value: string;\n  onChange: (value: string) => void;\n  options: { value: string; label: string }[];\n  required?: boolean;\n  hasError?: boolean;\n  questionNumber?: number;\n}\n\nexport function Question({ question, name, value, onChange, options, required = true, hasError = false, questionNumber }: QuestionProps) {\n  return (\n    <div \n      id={`question-${name}`}\n      className={`question-card-enhanced p-6 mb-4 fade-in ${\n        hasError ? 'question-card-error border-destructive/40' : ''\n      }`}\n    >\n      {hasError && (\n        <div className=\"mb-3 p-3 bg-destructive/10 border border-destructive/20 rounded-xl\">\n          <p className=\"text-destructive text-sm font-medium flex items-center gap-2\">\n            <Building2 className=\"w-4 h-4\" />\n            Esta pergunta é obrigatória\n          </p>\n        </div>\n      )}\n      \n      <div className=\"flex items-start gap-4 mb-4\">\n        <div className={`w-10 h-10 rounded-xl flex items-center justify-center flex-shrink-0 shadow-sm transition-all duration-300 ${\n          hasError \n            ? 'bg-destructive text-white' \n            : 'bg-gradient-primary text-white'\n        }`}>\n          {questionNumber ? (\n            <span className=\"font-bold text-base\">{questionNumber}</span>\n          ) : (\n            <Building2 className=\"w-5 h-5\" />\n          )}\n        </div>\n        <div className=\"flex-1\">\n          <Label className={`text-sm md:text-base font-semibold leading-snug block ${\n            hasError ? 'text-destructive' : 'text-slate-800'\n          }`}>\n            {question}\n          </Label>\n        </div>\n      </div>\n      \n      <div className=\"flex justify-center\">\n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4 w-full max-w-4xl\">\n          {options.map((option, index) => {\n            const isSelected = value === option.value;\n            \n            return (\n              <button\n                key={option.value}\n                type=\"button\"\n                onClick={() => onChange(option.value)}\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter' || e.key === ' ') {\n                    e.preventDefault();\n                    onChange(option.value);\n                  }\n                }}\n                tabIndex={0}\n                aria-pressed={isSelected}\n                aria-label={`${option.label} ${isSelected ? '(selecionado)' : ''}`}\n                className={`\n                  option-button-enhanced text-center min-h-[50px] flex items-center justify-center\n                  ${isSelected ? 'option-button-selected-enhanced pulse-success' : 'option-button-unselected-enhanced'}\n                `}\n                style={{\n                  animationDelay: `${index * 0.1}s`\n                }}\n              >\n                <div className=\"flex items-center justify-center gap-3\">\n                  {isSelected && <CheckCircle2 className=\"w-5 h-5 flex-shrink-0\" />}\n                  <span className=\"font-medium leading-tight\">{option.label}</span>\n                </div>\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3302},"src/components/survey/SelectQuestion.tsx":{"content":"import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Building2 } from \"lucide-react\";\n\ninterface SelectQuestionProps {\n  question: string;\n  name: string;\n  value: string;\n  onChange: (value: string) => void;\n  options: { value: string; label: string }[];\n  placeholder?: string;\n  required?: boolean;\n  hasError?: boolean;\n  questionNumber?: number;\n}\n\nexport function SelectQuestion({ \n  question, \n  name, \n  value, \n  onChange, \n  options, \n  placeholder = \"Selecione uma opção\",\n  required = true, \n  hasError = false, \n  questionNumber \n}: SelectQuestionProps) {\n  return (\n    <div \n      id={`question-${name}`}\n      className={`question-card-enhanced p-6 mb-4 fade-in ${\n        hasError ? 'question-card-error border-destructive/40' : ''\n      }`}\n    >\n      {hasError && (\n        <div className=\"mb-3 p-3 bg-destructive/10 border border-destructive/20 rounded-xl\">\n          <p className=\"text-destructive text-sm font-medium flex items-center gap-2\">\n            <Building2 className=\"w-4 h-4\" />\n            Esta pergunta é obrigatória\n          </p>\n        </div>\n      )}\n      \n      <div className=\"flex items-start gap-4 mb-4\">\n        <div className={`w-10 h-10 rounded-xl flex items-center justify-center flex-shrink-0 shadow-sm transition-all duration-300 ${\n          hasError \n            ? 'bg-destructive text-white' \n            : 'bg-gradient-primary text-white'\n        }`}>\n          {questionNumber ? (\n            <span className=\"font-bold text-base\">{questionNumber}</span>\n          ) : (\n            <Building2 className=\"w-5 h-5\" />\n          )}\n        </div>\n        <div className=\"flex-1\">\n          <Label className={`text-sm md:text-base font-semibold leading-snug block mb-3 ${\n            hasError ? 'text-destructive' : 'text-slate-800'\n          }`}>\n            {question}\n          </Label>\n          \n          <div className=\"flex justify-center\">\n            <Select value={value} onValueChange={onChange}>\n              <SelectTrigger \n                className={`w-full max-w-lg h-12 text-base bg-white/95 backdrop-blur-sm border-2 rounded-xl transition-all duration-300 hover:shadow-md hover:scale-[1.01] focus:scale-[1.01] ${\n                  hasError \n                    ? 'border-destructive/50 focus:border-destructive focus:ring-2 focus:ring-destructive/20' \n                    : 'border-border focus:border-primary hover:border-primary/50 focus:ring-2 focus:ring-primary/20'\n                }`}\n              >\n                <SelectValue \n                  placeholder={placeholder}\n                  className={`${value ? 'text-slate-800 font-medium' : 'text-muted-foreground'}`}\n                />\n              </SelectTrigger>\n                <SelectContent className=\"bg-white/95 backdrop-blur-md border border-border shadow-xl rounded-xl\">\n                {options.map((option) => (\n                  <SelectItem \n                    key={option.value} \n                    value={option.value}\n                    className=\"text-sm py-2 px-3 hover:bg-primary/5 hover:text-slate-800 focus:bg-primary/10 focus:text-slate-800 rounded-lg mx-1 transition-colors duration-200\"\n                  >\n                    {option.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3481},"src/components/survey/SuccessMessage.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle2, Shield, Sparkles, Star, Anchor, Home } from \"lucide-react\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport function SuccessMessage() {\n  const navigate = useNavigate();\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-8 animate-slide-up\">\n      <Card className=\"bg-gradient-hero text-primary-foreground shadow-naval overflow-hidden relative border-0\">\n        <div className=\"absolute inset-0 bg-gradient-mesh opacity-40 animate-gradient bg-[length:400%_400%]\"></div>\n        \n        <CardHeader className=\"text-center relative z-10 py-12\">\n          <div className=\"flex items-center justify-center gap-4 mb-8\">\n            <div className=\"w-24 h-24 bg-gradient-glass rounded-full flex items-center justify-center backdrop-blur-sm shadow-neon animate-float border border-white/20\">\n              <CheckCircle2 className=\"w-12 h-12 animate-pulse-slow text-success\" />\n            </div>\n            <div className=\"w-20 h-20 bg-white/10 rounded-3xl flex items-center justify-center backdrop-blur-sm animate-float\">\n              <Anchor className=\"w-10 h-10 animate-glow\" />\n            </div>\n          </div>\n          \n          <CardTitle className=\"text-5xl font-bold mb-6 animate-scale-in\">\n            Pesquisa Enviada com Sucesso!\n          </CardTitle>\n          \n          <CardDescription className=\"text-primary-foreground/90 text-2xl leading-relaxed max-w-2xl mx-auto font-medium\">\n            Obrigado por sua participação! Suas respostas foram registradas de forma \n            <span className=\"font-bold text-naval-gold animate-pulse-slow\"> totalmente anônima</span>.\n          </CardDescription>\n        </CardHeader>\n      </Card>\n\n      <Card className=\"bg-gradient-glass backdrop-blur-sm shadow-custom-xl border-0\">\n        <CardContent className=\"pt-8 text-center\">\n          <div className=\"flex justify-center\">\n            <Button\n              onClick={() => navigate(\"/\")}\n              className=\"flex items-center gap-3 px-8 py-4 text-lg font-bold bg-gradient-primary hover:scale-105 shadow-glow transition-all duration-300 rounded-2xl\"\n            >\n              <Home className=\"w-6 h-6\" />\n              Voltar ao Início\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":2439},"src/components/survey/SurveySection1.tsx":{"content":"import { Question } from \"./Question\";\nimport { SelectQuestion } from \"./SelectQuestion\";\n\ninterface SurveySection1Props {\n  data: any;\n  onUpdate: (data: any) => void;\n  errors?: string[];\n}\n\nconst likertOptions = [\n  { value: \"Discordo\", label: \"Discordo\" },\n  { value: \"Não concordo e nem discordo\", label: \"Não concordo e nem discordo\" },\n  { value: \"Concordo\", label: \"Concordo\" }\n];\n\nconst setorOptions = [\n  { value: \"PAPEM-10\", label: \"PAPEM-10\" },\n  { value: \"PAPEM-20\", label: \"PAPEM-20\" },\n  { value: \"PAPEM-30\", label: \"PAPEM-30\" },\n  { value: \"PAPEM-40\", label: \"PAPEM-40\" },\n  { value: \"PAPEM-51\", label: \"PAPEM-51\" },\n  { value: \"PAPEM-52\", label: \"PAPEM-52\" },\n  { value: \"SECOM\", label: \"SECOM\" }\n];\n\nconst alojamentoOptions = [\n  { value: \"CB/MN MASCULINO\", label: \"CB/MN MASCULINO\" },\n  { value: \"CB/MN FEMININO\", label: \"CB/MN FEMININO\" },\n  { value: \"SO/SG MASCULINO\", label: \"SO/SG MASCULINO\" },\n  { value: \"SO/SG FEMININO\", label: \"SO/SG FEMININO\" },\n  { value: \"OFICIAIS FEMININO\", label: \"OFICIAIS FEMININO\" },\n  { value: \"CT/1T MASCULINO\", label: \"CT/1T MASCULINO\" },\n  { value: \"OFICIAIS SUPERIORES MASCULINO\", label: \"OFICIAIS SUPERIORES MASCULINO\" }\n];\n\nconst ranchoOptions = [\n  { value: \"Distrito\", label: \"Distrito\" },\n  { value: \"DABM\", label: \"DABM\" },\n  { value: \"Praça D'armas\", label: \"Praça D'armas\" }\n];\n\nconst escalaOptions = [\n  { value: \"Oficiais\", label: \"Oficiais\" },\n  { value: \"SG\", label: \"SG\" },\n  { value: \"Cb/MN\", label: \"Cb/MN\" }\n];\n\nexport function SurveySection1({ data, onUpdate, errors = [] }: SurveySection1Props) {\n  const handleChange = (field: string) => (value: string) => {\n    const updatedData = { ...data, [field]: value };\n    \n    // Limpar Praça D'armas quando rancho não for \"Praça D'armas\"\n    if (field === \"localizacao_rancho\" && value !== \"Praça D'armas\") {\n      updatedData.praca_darmas_adequada = \"\";\n    }\n    \n    onUpdate(updatedData);\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      <SelectQuestion\n        questionNumber={1}\n        question=\"Área principal de trabalho:\"\n        name=\"setor_trabalho\"\n        value={data.setor_trabalho || \"\"}\n        onChange={handleChange(\"setor_trabalho\")}\n        options={setorOptions}\n        placeholder=\"Selecione uma área\"\n        hasError={errors.includes(\"setor_trabalho\")}\n      />\n\n      <Question\n        questionNumber={2}\n        question=\"Os materiais e equipamentos necessários para realizar o meu trabalho são fornecidos.\"\n        name=\"materiais_fornecidos\"\n        value={data.materiais_fornecidos || \"\"}\n        onChange={handleChange(\"materiais_fornecidos\")}\n        options={likertOptions}\n        hasError={errors.includes(\"materiais_fornecidos\")}\n      />\n\n      <Question\n        questionNumber={3}\n        question=\"Os materiais e equipamentos disponibilizados para o desempenho do meu trabalho estão adequados (estão em boas condições).\"\n        name=\"materiais_adequados\"\n        value={data.materiais_adequados || \"\"}\n        onChange={handleChange(\"materiais_adequados\")}\n        options={likertOptions}\n        hasError={errors.includes(\"materiais_adequados\")}\n      />\n\n      <Question\n        questionNumber={4}\n        question=\"O atendimento realizado pelo Setor de Apoio da OM tem sido prestado dentro das minhas expectativas.\"\n        name=\"atendimento_apoio\"\n        value={data.atendimento_apoio || \"\"}\n        onChange={handleChange(\"atendimento_apoio\")}\n        options={likertOptions}\n        hasError={errors.includes(\"atendimento_apoio\")}\n      />\n\n      <Question\n        questionNumber={5}\n        question=\"A limpeza é adequada.\"\n        name=\"limpeza_adequada\"\n        value={data.limpeza_adequada || \"\"}\n        onChange={handleChange(\"limpeza_adequada\")}\n        options={likertOptions}\n        hasError={errors.includes(\"limpeza_adequada\")}\n      />\n\n      <Question\n        questionNumber={6}\n        question=\"A temperatura é adequada.\"\n        name=\"temperatura_adequada\"\n        value={data.temperatura_adequada || \"\"}\n        onChange={handleChange(\"temperatura_adequada\")}\n        options={likertOptions}\n        hasError={errors.includes(\"temperatura_adequada\")}\n      />\n\n      <Question\n        questionNumber={7}\n        question=\"A iluminação é adequada.\"\n        name=\"iluminacao_adequada\"\n        value={data.iluminacao_adequada || \"\"}\n        onChange={handleChange(\"iluminacao_adequada\")}\n        options={likertOptions}\n        hasError={errors.includes(\"iluminacao_adequada\")}\n      />\n\n      <SelectQuestion\n        questionNumber={8}\n        question=\"Para análise das condições dos alojamentos, informe sua localização:\"\n        name=\"localizacao_alojamento\"\n        value={data.localizacao_alojamento || \"\"}\n        onChange={handleChange(\"localizacao_alojamento\")}\n        options={alojamentoOptions}\n        placeholder=\"Selecione um alojamento\"\n        hasError={errors.includes(\"localizacao_alojamento\")}\n      />\n\n      {/* Questões 9, 10 - Sempre visíveis */}\n      <Question\n        questionNumber={9}\n        question=\"As instalações do meu alojamento estão em boas condições.\"\n        name=\"alojamento_condicoes\"\n        value={data.alojamento_condicoes || \"\"}\n        onChange={handleChange(\"alojamento_condicoes\")}\n        options={likertOptions}\n        hasError={errors.includes(\"alojamento_condicoes\")}\n      />\n\n      <Question\n        questionNumber={10}\n        question=\"As instalações dos banheiros da OM são adequadas.\"\n        name=\"banheiros_adequados\"\n        value={data.banheiros_adequados || \"\"}\n        onChange={handleChange(\"banheiros_adequados\")}\n        options={likertOptions}\n        hasError={errors.includes(\"banheiros_adequados\")}\n      />\n\n      <SelectQuestion\n        questionNumber={11}\n        question=\"Para análise das condições do rancho, informe sua localização (marque apenas uma opção):\"\n        name=\"localizacao_rancho\"\n        value={data.localizacao_rancho || \"\"}\n        onChange={handleChange(\"localizacao_rancho\")}\n        options={ranchoOptions}\n        placeholder=\"Selecione um local\"\n        hasError={errors.includes(\"localizacao_rancho\")}\n      />\n\n      {/* Questão 12 - Só aparece quando localização do rancho for \"Praça D'armas\" */}\n      {data.localizacao_rancho === \"Praça D'armas\" && (\n        <Question\n          questionNumber={12}\n          question=\"As instalações da Praça D'armas e do Salão de Recreio da OM são adequadas.\"\n          name=\"praca_darmas_adequada\"\n          value={data.praca_darmas_adequada || \"\"}\n          onChange={handleChange(\"praca_darmas_adequada\")}\n          options={likertOptions}\n          hasError={errors.includes(\"praca_darmas_adequada\")}\n        />\n      )}\n\n      {/* Questões seguintes - numeração dinâmica baseada se Q12 aparece */}\n      <Question\n        questionNumber={data.localizacao_rancho === \"Praça D'armas\" ? 13 : 12}\n        question=\"Considero adequadas as instalações do rancho.\"\n        name=\"rancho_instalacoes\"\n        value={data.rancho_instalacoes || \"\"}\n        onChange={handleChange(\"rancho_instalacoes\")}\n        options={likertOptions}\n        hasError={errors.includes(\"rancho_instalacoes\")}\n      />\n\n      <Question\n        questionNumber={data.localizacao_rancho === \"Praça D'armas\" ? 14 : 13}\n        question=\"Estou satisfeito com a qualidade da comida servida no rancho.\"\n        name=\"rancho_qualidade\"\n        value={data.rancho_qualidade || \"\"}\n        onChange={handleChange(\"rancho_qualidade\")}\n        options={likertOptions}\n        hasError={errors.includes(\"rancho_qualidade\")}\n      />\n\n      <SelectQuestion\n        questionNumber={data.localizacao_rancho === \"Praça D'armas\" ? 15 : 14}\n        question=\"Para análise das condições da escala de serviço, informe sua escala (marque apenas uma opção):\"\n        name=\"escala_servico\"\n        value={data.escala_servico || \"\"}\n        onChange={handleChange(\"escala_servico\")}\n        options={escalaOptions}\n        placeholder=\"Selecione uma escala\"\n        hasError={errors.includes(\"escala_servico\")}\n      />\n\n      {/* Questões 16-20 - Sempre visíveis */}\n      <Question\n        questionNumber={data.localizacao_rancho === \"Praça D'armas\" ? 16 : 15}\n        question=\"A escala de serviço tem atrapalhado as minhas tarefas profissionais.\"\n        name=\"escala_atrapalha\"\n        value={data.escala_atrapalha || \"\"}\n        onChange={handleChange(\"escala_atrapalha\")}\n        options={likertOptions}\n        hasError={errors.includes(\"escala_atrapalha\")}\n      />\n\n      <Question\n        questionNumber={data.localizacao_rancho === \"Praça D'armas\" ? 17 : 16}\n        question=\"Quando estou de serviço, percebo que os equipamentos utilizados estão em boas condições.\"\n        name=\"equipamentos_servico\"\n        value={data.equipamentos_servico || \"\"}\n        onChange={handleChange(\"equipamentos_servico\")}\n        options={likertOptions}\n        hasError={errors.includes(\"equipamentos_servico\")}\n      />\n\n      <Question\n        questionNumber={data.localizacao_rancho === \"Praça D'armas\" ? 18 : 17}\n        question=\"Participo com regularidade do Treinamento Físico Militar.\"\n        name=\"tfm_participa\"\n        value={data.tfm_participa || \"\"}\n        onChange={handleChange(\"tfm_participa\")}\n        options={likertOptions}\n        hasError={errors.includes(\"tfm_participa\")}\n      />\n\n      <Question\n        questionNumber={data.localizacao_rancho === \"Praça D'armas\" ? 19 : 18}\n        question=\"É incentivada a prática de Treinamento Físico Militar.\"\n        name=\"tfm_incentivado\"\n        value={data.tfm_incentivado || \"\"}\n        onChange={handleChange(\"tfm_incentivado\")}\n        options={likertOptions}\n        hasError={errors.includes(\"tfm_incentivado\")}\n      />\n\n      <Question\n        questionNumber={data.localizacao_rancho === \"Praça D'armas\" ? 20 : 19}\n        question=\"Considero as instalações para a prática de Treinamento Físico Militar adequadas.\"\n        name=\"tfm_instalacoes\"\n        value={data.tfm_instalacoes || \"\"}\n        onChange={handleChange(\"tfm_instalacoes\")}\n        options={likertOptions}\n        hasError={errors.includes(\"tfm_instalacoes\")}\n      />\n    </div>\n  );\n}","size_bytes":10198},"src/components/survey/SurveySection2.tsx":{"content":"import { Question } from \"./Question\";\n\ninterface SurveySection2Props {\n  data: any;\n  onUpdate: (data: any) => void;\n  errors?: string[];\n}\n\nconst likertOptions = [\n  { value: \"Discordo\", label: \"Discordo\" },\n  { value: \"Não concordo e nem discordo\", label: \"Não concordo e nem discordo\" },\n  { value: \"Concordo\", label: \"Concordo\" }\n];\n\nexport function SurveySection2({ data, onUpdate, errors = [] }: SurveySection2Props) {\n  const handleChange = (field: string) => (value: string) => {\n    onUpdate({ [field]: value });\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      <Question\n        questionNumber={21}\n        question=\"Meu chefe está interessado em ouvir as minhas ideias.\"\n        name=\"chefe_ouve_ideias\"\n        value={data.chefe_ouve_ideias || \"\"}\n        onChange={handleChange(\"chefe_ouve_ideias\")}\n        options={likertOptions}\n        hasError={errors.includes(\"chefe_ouve_ideias\")}\n      />\n\n      <Question\n        questionNumber={22}\n        question=\"O meu chefe se importa comigo como pessoa.\"\n        name=\"chefe_se_importa\"\n        value={data.chefe_se_importa || \"\"}\n        onChange={handleChange(\"chefe_se_importa\")}\n        options={likertOptions}\n        hasError={errors.includes(\"chefe_se_importa\")}\n      />\n\n      <Question\n        questionNumber={23}\n        question=\"Estou interessado em contribuir com as atividades e tarefas.\"\n        name=\"contribuir_atividades\"\n        value={data.contribuir_atividades || \"\"}\n        onChange={handleChange(\"contribuir_atividades\")}\n        options={likertOptions}\n        hasError={errors.includes(\"contribuir_atividades\")}\n      />\n\n      <Question\n        questionNumber={24}\n        question=\"O meu chefe sabe delegar responsabilidades.\"\n        name=\"chefe_delega\"\n        value={data.chefe_delega || \"\"}\n        onChange={handleChange(\"chefe_delega\")}\n        options={likertOptions}\n        hasError={errors.includes(\"chefe_delega\")}\n      />\n\n      <Question\n        questionNumber={25}\n        question=\"Meus pares me auxiliam sempre que preciso para resolver meus problemas de trabalho.\"\n        name=\"pares_auxiliam\"\n        value={data.pares_auxiliam || \"\"}\n        onChange={handleChange(\"pares_auxiliam\")}\n        options={likertOptions}\n        hasError={errors.includes(\"pares_auxiliam\")}\n      />\n\n      <Question\n        questionNumber={26}\n        question=\"Existe um bom entrosamento entre os setores.\"\n        name=\"entrosamento_setores\"\n        value={data.entrosamento_setores || \"\"}\n        onChange={handleChange(\"entrosamento_setores\")}\n        options={likertOptions}\n        hasError={errors.includes(\"entrosamento_setores\")}\n      />\n\n      <Question\n        questionNumber={27}\n        question=\"Existe um bom entrosamento entre os integrantes da Tripulação.\"\n        name=\"entrosamento_tripulacao\"\n        value={data.entrosamento_tripulacao || \"\"}\n        onChange={handleChange(\"entrosamento_tripulacao\")}\n        options={likertOptions}\n        hasError={errors.includes(\"entrosamento_tripulacao\")}\n      />\n\n      <Question\n        questionNumber={28}\n        question=\"O convívio com meus pares e superiores é agradável.\"\n        name=\"convivio_agradavel\"\n        value={data.convivio_agradavel || \"\"}\n        onChange={handleChange(\"convivio_agradavel\")}\n        options={likertOptions}\n        hasError={errors.includes(\"convivio_agradavel\")}\n      />\n\n      <Question\n        questionNumber={29}\n        question=\"Existe confiança e respeito nas relações no ambiente de trabalho.\"\n        name=\"confianca_respeito\"\n        value={data.confianca_respeito || \"\"}\n        onChange={handleChange(\"confianca_respeito\")}\n        options={likertOptions}\n        hasError={errors.includes(\"confianca_respeito\")}\n      />\n    </div>\n  );\n}","size_bytes":3763},"src/components/survey/SurveySection3.tsx":{"content":"import { Question } from \"./Question\";\n\ninterface SurveySection3Props {\n  data: any;\n  onUpdate: (data: any) => void;\n  errors?: string[];\n}\n\nconst likertOptions = [\n  { value: \"Discordo\", label: \"Discordo\" },\n  { value: \"Não concordo e nem discordo\", label: \"Não concordo e nem discordo\" },\n  { value: \"Concordo\", label: \"Concordo\" }\n];\n\nexport function SurveySection3({ data, onUpdate, errors = [] }: SurveySection3Props) {\n  const handleChange = (field: string) => (value: string) => {\n    onUpdate({ [field]: value });\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      <Question\n        questionNumber={30}\n        question=\"Recebo regularmente informações sobre o meu desempenho.\"\n        name=\"feedback_desempenho\"\n        value={data.feedback_desempenho || \"\"}\n        onChange={handleChange(\"feedback_desempenho\")}\n        options={likertOptions}\n        hasError={errors.includes(\"feedback_desempenho\")}\n      />\n\n      <Question\n        questionNumber={31}\n        question=\"Considero o meu conceito compatível com o meu desempenho.\"\n        name=\"conceito_compativel\"\n        value={data.conceito_compativel || \"\"}\n        onChange={handleChange(\"conceito_compativel\")}\n        options={likertOptions}\n        hasError={errors.includes(\"conceito_compativel\")}\n      />\n\n      <Question\n        questionNumber={32}\n        question=\"Eu identifico a importância da minha atividade dentro do processo global.\"\n        name=\"importancia_atividade\"\n        value={data.importancia_atividade || \"\"}\n        onChange={handleChange(\"importancia_atividade\")}\n        options={likertOptions}\n        hasError={errors.includes(\"importancia_atividade\")}\n      />\n\n      <Question\n        questionNumber={33}\n        question=\"Considero que o meu trabalho é reconhecido e valorizado.\"\n        name=\"trabalho_reconhecido\"\n        value={data.trabalho_reconhecido || \"\"}\n        onChange={handleChange(\"trabalho_reconhecido\")}\n        options={likertOptions}\n        hasError={errors.includes(\"trabalho_reconhecido\")}\n      />\n\n      <Question\n        questionNumber={34}\n        question=\"Percebo que o meu desenvolvimento e crescimento profissional são estimulados.\"\n        name=\"crescimento_estimulado\"\n        value={data.crescimento_estimulado || \"\"}\n        onChange={handleChange(\"crescimento_estimulado\")}\n        options={likertOptions}\n        hasError={errors.includes(\"crescimento_estimulado\")}\n      />\n\n      <Question\n        questionNumber={35}\n        question=\"Os cursos e treinamentos que fiz são suficientes para o exercício das minhas atividades.\"\n        name=\"cursos_suficientes\"\n        value={data.cursos_suficientes || \"\"}\n        onChange={handleChange(\"cursos_suficientes\")}\n        options={likertOptions}\n        hasError={errors.includes(\"cursos_suficientes\")}\n      />\n\n      <Question\n        questionNumber={36}\n        question=\"Percebo que existe um programa de treinamento profissional regular ou que é incentivada a realização de cursos relacionados com minha atividade.\"\n        name=\"programa_treinamento\"\n        value={data.programa_treinamento || \"\"}\n        onChange={handleChange(\"programa_treinamento\")}\n        options={likertOptions}\n        hasError={errors.includes(\"programa_treinamento\")}\n      />\n\n      <Question\n        questionNumber={37}\n        question=\"Sinto orgulho de trabalhar aqui.\"\n        name=\"orgulho_trabalhar\"\n        value={data.orgulho_trabalhar || \"\"}\n        onChange={handleChange(\"orgulho_trabalhar\")}\n        options={likertOptions}\n        hasError={errors.includes(\"orgulho_trabalhar\")}\n      />\n\n      <Question\n        questionNumber={38}\n        question=\"Estou sendo bem aproveitado, de acordo com minha área de especialização ou formação profissional.\"\n        name=\"bem_aproveitado\"\n        value={data.bem_aproveitado || \"\"}\n        onChange={handleChange(\"bem_aproveitado\")}\n        options={likertOptions}\n        hasError={errors.includes(\"bem_aproveitado\")}\n      />\n\n      <Question\n        questionNumber={39}\n        question=\"Desenvolveria melhor meu potencial se estivesse em outra função.\"\n        name=\"potencial_outra_funcao\"\n        value={data.potencial_outra_funcao || \"\"}\n        onChange={handleChange(\"potencial_outra_funcao\")}\n        options={likertOptions}\n        hasError={errors.includes(\"potencial_outra_funcao\")}\n      />\n\n      <Question\n        questionNumber={40}\n        question=\"Considero justa minha carga de trabalho e minhas atribuições.\"\n        name=\"carga_trabalho_justa\"\n        value={data.carga_trabalho_justa || \"\"}\n        onChange={handleChange(\"carga_trabalho_justa\")}\n        options={likertOptions}\n        hasError={errors.includes(\"carga_trabalho_justa\")}\n      />\n\n      <Question\n        questionNumber={41}\n        question=\"Quando necessito gozar algum tipo de licença especial, sou autorizado pelo meu chefe, sem problemas.\"\n        name=\"licenca_autorizada\"\n        value={data.licenca_autorizada || \"\"}\n        onChange={handleChange(\"licenca_autorizada\")}\n        options={likertOptions}\n        hasError={errors.includes(\"licenca_autorizada\")}\n      />\n    </div>\n  );\n}","size_bytes":5139},"src/components/survey/SurveySection4.tsx":{"content":"import { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { MessageSquare, CheckCircle2 } from \"lucide-react\";\n\ninterface SurveySection4Props {\n  data: any;\n  onUpdate: (data: any) => void;\n  errors?: string[];\n}\n\nexport function SurveySection4({ data, onUpdate, errors = [] }: SurveySection4Props) {\n  const handleChange = (field: string, value: string) => {\n    onUpdate({ [field]: value });\n  };\n\n  const questions = [\n    {\n      id: \"aspecto_positivo\",\n      question: \"Aspecto positivo da OM que gostaria de destacar:\",\n      placeholder: \"Descreva os aspectos positivos que você observa na organização...\"\n    },\n    {\n      id: \"aspecto_negativo\", \n      question: \"Aspecto negativo da OM que gostaria que fosse solucionado:\",\n      placeholder: \"Descreva os aspectos que considera necessário melhorar...\"\n    },\n    {\n      id: \"proposta_processo\",\n      question: \"Você tem alguma ideia/proposta para melhorar algum processo da OM?\",\n      placeholder: \"Compartilhe suas ideias para melhorar os processos organizacionais...\"\n    },\n    {\n      id: \"proposta_satisfacao\",\n      question: \"Você tem alguma ideia/proposta para melhorar a satisfação e motivação da tripulação?\",\n      placeholder: \"Sugira ações para aumentar a satisfação e motivação dos militares...\"\n    }\n  ];\n\n  return (\n    <div className=\"space-y-4\">\n      {questions.map((question, index) => {\n        const hasError = errors.includes(question.id);\n        const questionNumber = index + 1;\n        \n        return (\n          <div \n            key={question.id}\n            id={`question-${question.id}`}\n            className={`question-card p-6 mb-4 fade-in ${\n              hasError ? 'question-card-error' : ''\n            }`}\n          >\n            {hasError && (\n              <div className=\"mb-3 p-3 bg-destructive/10 border border-destructive/20 rounded-xl\">\n                <p className=\"text-destructive text-sm font-medium flex items-center gap-2\">\n                  <MessageSquare className=\"w-4 h-4\" />\n                  Esta pergunta é obrigatória\n                </p>\n              </div>\n            )}\n            \n            <div className=\"flex items-start gap-4 mb-4\">\n              <div className={`w-10 h-10 rounded-xl flex items-center justify-center flex-shrink-0 shadow-sm transition-all duration-300 ${\n                hasError \n                  ? 'bg-destructive text-white' \n                  : 'bg-gradient-primary text-white'\n              }`}>\n                <span className=\"font-bold text-base\">{questionNumber}</span>\n              </div>\n              <div className=\"flex-1\">\n                <Label className={`text-sm md:text-base font-semibold leading-snug block mb-3 ${\n                  hasError ? 'text-destructive' : 'text-slate-800'\n                }`}>\n                  {question.question}\n                </Label>\n                \n                <div className=\"relative\">\n                  <Textarea\n                    value={data[question.id] || ''}\n                    onChange={(e) => handleChange(question.id, e.target.value)}\n                    placeholder={question.placeholder}\n                    className={`min-h-[120px] text-base resize-none transition-all duration-200 ${\n                      hasError \n                        ? 'border-destructive focus:border-destructive' \n                        : 'border-slate-300 focus:border-primary'\n                    } ${data[question.id] ? 'bg-primary/5 border-primary/30' : 'bg-background'}`}\n                    style={{\n                      animationDelay: `${index * 0.1}s`\n                    }}\n                  />\n                  {data[question.id] && (\n                    <div className=\"absolute top-3 right-3\">\n                      <CheckCircle2 className=\"w-5 h-5 text-primary\" />\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}","size_bytes":4028},"src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2701},"src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"src/components/ui/calendar.tsx":{"content":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","size_bytes":2620},"src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7295},"src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"src/components/ui/sheet.tsx":{"content":"import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n  VariantProps<typeof sheetVariants> { }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n","size_bytes":4250},"src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23367},"src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"src/components/ui/sonner.tsx":{"content":"import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }\n","size_bytes":894},"src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"src/components/ui/use-toast.ts":{"content":"import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n","size_bytes":82},"replit.md":{"content":"# PAPEM - Sistema de Pesquisa de Clima Organizacional\n\n## Overview\nThis is a React-based organizational climate survey application for PAPEM (Brazilian military organization). The application provides an anonymous survey platform with administrative dashboard for analyzing results.\n\n## Current State\n- ✅ Full-stack application with PostgreSQL database integration\n- ✅ Frontend React application running on port 5000 (webview output)\n- ✅ Backend Express.js API server running on port 3001\n- ✅ PostgreSQL database configured with Drizzle ORM\n- ✅ Real-time dashboard displaying live data from database\n- ✅ Survey submission saves to database instead of console logging\n- ✅ All TypeScript errors resolved\n- ✅ Deployment configuration set up for production\n\n## Project Architecture\n- **Frontend**: React 18 + TypeScript + Vite (port 5000)\n- **Backend**: Express.js + TypeScript (port 3001)\n- **Database**: PostgreSQL with Drizzle ORM\n- **UI Framework**: shadcn/ui + Tailwind CSS + Radix UI\n- **Routing**: React Router DOM\n- **State Management**: React Query (TanStack Query)\n- **Form Handling**: React Hook Form with Zod validation\n- **Styling**: Tailwind CSS with custom gradient themes\n- **Icons**: Lucide React\n- **Charts**: Recharts for data visualization\n\n## Key Features\n- Anonymous organizational climate survey with 4 sections:\n  1. Work Conditions, Service and TFM\n  2. Relationships\n  3. Motivation and Professional Development\n  4. Comments and Suggestions\n- Real-time administrative dashboard with live data visualization\n- PostgreSQL database for persistent data storage\n- REST API for survey submission and statistics\n- Responsive design with modern UI/UX\n- Form validation and progress tracking\n- Data aggregation by sector, accommodation, and canteen location\n- Satisfaction ratings with statistical analysis\n\n## Running the Project\nThe application runs automatically with the configured workflow:\n```bash\nconcurrently \"npm run server\" \"vite --host 0.0.0.0 --port 5000\"\n```\n- Frontend: http://0.0.0.0:5000 (accessible through Replit's preview)\n- Backend API: http://localhost:3001\n- Database: PostgreSQL via DATABASE_URL environment variable\n\n## Recent Changes\n- **2025-09-24**: Complete full-stack integration\n  - Converted from client-side demo to production-ready full-stack application\n  - Configured PostgreSQL database with Drizzle ORM and proper schema\n  - Created Express.js backend API with endpoints: /api/survey, /api/stats, /api/analytics\n  - Updated survey submission to persist data to database instead of console logging\n  - Replaced hardcoded dashboard data with real-time database queries\n  - Created RealTimeStats component for live data visualization\n  - Fixed analytics mapping to use correct rating scale (\"Concordo/Discordo\" vs \"Satisfeito/Insatisfeito\")\n  - Validated end-to-end flow: survey submission → database storage → dashboard display\n  - Set up concurrent workflow running both frontend (port 5000) and backend (port 3001)\n- **2025-09-22**: Enhanced UI with compact visualizations\n  - Replaced \"Setor Mais Ativo\" card with compact \"Distribuição por Setor\" card showing exact respondent counts\n  - Converted location questions (Q8, Q12) from pie charts to full-width horizontal bar charts\n  - Removed redundant large sector distribution section to optimize space usage\n\n## User Preferences\n- No specific user preferences documented yet\n\n## Deployment Configuration\n- Target: autoscale (configured for static site deployment)\n- Build: `npm run build`\n- Run: `npm run start`","size_bytes":3536},"README_APLICACAO.md":{"content":"# 🚢 PAPEM - Sistema de Pesquisa de Clima Organizacional\n\n## 📋 Visão Geral\n\n**PAPEM** é um sistema web moderno para condução de pesquisas de clima organizacional na **Marinha do Brasil**. Desenvolvido com foco em **anonimato total**, **interface intuitiva** e **análises estatísticas avançadas**.\n\n### 🎯 Objetivos\n- ✅ **Anonimato Garantido**: Respostas 100% anônimas sem rastreamento pessoal\n- ✅ **Interface Moderna**: Design responsivo e intuitivo para todos os dispositivos\n- ✅ **Análises Avançadas**: Dashboard com visualizações e estatísticas em tempo real\n- ✅ **Flexibilidade**: Questionário adaptativo baseado nas respostas do usuário\n\n---\n\n## 🛠️ Tecnologias Utilizadas\n\n### 🎨 **Frontend**\n- **React 18** - Biblioteca principal para interface\n- **TypeScript** - Tipagem estática e maior segurança\n- **Vite** - Build tool moderno e rápido\n- **Tailwind CSS** - Framework CSS utilitário\n- **shadcn/ui** - Componentes UI modernos e acessíveis\n- **Radix UI** - Primitivos acessíveis para componentes\n- **React Router DOM** - Roteamento client-side\n- **React Query (TanStack)** - Gerenciamento de estado do servidor\n- **React Hook Form** - Formulários performáticos com validação\n- **Zod** - Validação e schema de dados\n- **Recharts** - Biblioteca de gráficos\n- **Lucide React** - Ícones modernos\n\n### 🖥️ **Backend**\n- **Node.js** - Runtime JavaScript\n- **Express.js** - Framework web\n- **PostgreSQL** - Banco de dados relacional\n- **Drizzle ORM** - ORM TypeScript-first\n- **pg** - Driver PostgreSQL para Node.js\n\n### 🔧 **Ferramentas de Desenvolvimento**\n- **ESLint** - Linting de código\n- **TypeScript** - Tipagem estática\n- **tsx** - Executor TypeScript para Node.js\n- **Drizzle Kit** - Ferramentas de migration e introspection\n\n---\n\n## 📁 Estrutura do Projeto\n\n```\npapem-clima-organizacional/\n├── 📁 src/                          # Código fonte do frontend\n│   ├── 📁 components/               # Componentes React\n│   │   ├── 📁 admin/                # Componentes do dashboard admin\n│   │   │   ├── DetailedAnalysis.tsx\n│   │   │   ├── EnvironmentCharts.tsx\n│   │   │   ├── MotivationCharts.tsx\n│   │   │   ├── RelationshipCharts.tsx\n│   │   │   └── StatsOverview.tsx\n│   │   ├── 📁 layout/               # Componentes de layout\n│   │   │   └── AppHeader.tsx\n│   │   ├── 📁 survey/               # Componentes da pesquisa\n│   │   │   ├── SurveySection1.tsx   # Trabalho, Serviço, TFM\n│   │   │   ├── SurveySection2.tsx   # Relacionamentos\n│   │   │   ├── SurveySection3.tsx   # Motivação e Desenvolvimento\n│   │   │   ├── SurveySection4.tsx   # Comentários\n│   │   │   ├── SuccessMessage.tsx   # Mensagem de sucesso\n│   │   │   ├── Question.tsx         # Componente de questão\n│   │   │   └── SelectQuestion.tsx   # Questão de seleção\n│   │   └── 📁 ui/                   # Componentes UI reutilizáveis\n│   ├── 📁 hooks/                    # Hooks personalizados\n│   ├── 📁 lib/                      # Utilitários e configurações\n│   ├── 📁 pages/                    # Páginas da aplicação\n│   │   ├── Admin.tsx                # Dashboard administrativo\n│   │   ├── Survey.tsx               # Página da pesquisa\n│   │   └── Home.tsx                 # Página inicial\n│   └── App.tsx                      # Componente raiz\n├── 📁 shared/                       # Código compartilhado\n│   └── schema.ts                    # Schema do banco de dados\n├── 📁 server/                       # Código do servidor\n│   ├── db.ts                        # Configuração do banco\n│   ├── storage.ts                   # Interface de armazenamento\n│   └── vite.ts                      # Servidor de desenvolvimento\n├── 📁 drizzle/                      # Migrations do banco\n├── setup-database.sh               # Script de configuração do banco\n├── drizzle.config.ts               # Configuração do Drizzle ORM\n└── package.json                    # Dependências e scripts\n```\n\n---\n\n## 🎭 Funcionalidades Principais\n\n### 📝 **Sistema de Pesquisa**\n\n#### **Seção 1: Condições de Trabalho, Serviço e TFM**\n- ✅ **Q1-Q7**: Questões gerais sobre trabalho e chefia\n- ✅ **Q8-Q10**: Alojamento (condicional - baseado na localização)\n- ✅ **Q11-Q14**: Rancho (obrigatório, com Q12 condicional para Praça D'armas)\n- ✅ **Q15-Q20**: Escala de serviço e TFM (condicional)\n\n#### **Seção 2: Relacionamentos**\n- ✅ **10 questões** sobre relacionamentos interpessoais\n- ✅ Avaliação de pares, subordinados e chefia\n- ✅ Comunicação e clareza de informações\n\n#### **Seção 3: Motivação e Desenvolvimento Profissional**\n- ✅ **6 questões** sobre motivação e crescimento\n- ✅ Reconhecimento, oportunidades e capacitação\n- ✅ Satisfação geral e recomendação da organização\n\n#### **Seção 4: Comentários e Sugestões**\n- ✅ **Campos opcionais** para feedback textual\n- ✅ Comentários gerais e sugestões de melhorias\n\n### 🎯 **Características Especiais**\n\n#### **Numeração Dinâmica**\nO sistema adapta a numeração das questões baseado nas respostas:\n- **Sem Praça D'armas**: Q11 → Q12 → Q13 → ... → Q19\n- **Com Praça D'armas**: Q11 → Q12 → Q13 → Q14 → ... → Q20\n\n#### **Validação Inteligente**\n- ✅ Questões obrigatórias marcadas claramente\n- ✅ Validação condicional baseada em respostas anteriores\n- ✅ Limpeza automática de campos irrelevantes\n\n#### **Controle de Duplicação**\n- ✅ Prevenção de múltiplas respostas pelo mesmo IP\n- ✅ Manutenção do anonimato com controle técnico\n\n### 📊 **Dashboard Administrativo**\n\n#### **Visão Geral**\n- ✅ **Cards estatísticos** com total de respostas\n- ✅ **Distribuição por setor** em formato compacto\n- ✅ **Últimas respostas** em tempo real\n\n#### **Análises Detalhadas**\n\n**📈 Condições de Trabalho e Ambiente**\n- ✅ Gráficos de barras para questões de trabalho\n- ✅ Análise de materiais, equipamentos e apoio\n- ✅ Distribuição por localização (rancho/escala)\n\n**👥 Relacionamentos**\n- ✅ Visualização de relacionamentos interpessoais\n- ✅ Análise de comunicação e chefia\n- ✅ Gráficos de satisfação por categoria\n\n**🚀 Motivação e Desenvolvimento**\n- ✅ Métricas de satisfação e reconhecimento\n- ✅ Análise de oportunidades de crescimento\n- ✅ Recomendação da organização\n\n#### **Filtros Avançados**\n- ✅ **Setor**: Filtro global aplicado a todas as seções\n- ✅ **Alojamento**: Afeta questões Q9-Q10\n- ✅ **Rancho**: Afeta questões Q11-Q14\n- ✅ **Escala**: Afeta questões Q16-Q20\n\n---\n\n## 🎨 Design e UX\n\n### 🌈 **Tema Visual**\n- ✅ **Gradientes navais** com cores da Marinha\n- ✅ **Elementos de vidro** com backdrop-blur\n- ✅ **Animações suaves** para melhor experiência\n- ✅ **Ícones temáticos** (âncora, escudo, etc.)\n\n### 📱 **Responsividade**\n- ✅ **Mobile-first** design approach\n- ✅ **Layout adaptativo** para tablets e desktops\n- ✅ **Touch-friendly** interfaces\n\n### ♿ **Acessibilidade**\n- ✅ **Componentes Radix UI** com padrões ARIA\n- ✅ **Contraste adequado** para legibilidade\n- ✅ **Navegação por teclado** suportada\n- ✅ **Screen readers** compatível\n\n---\n\n## 🔧 Configuração e Instalação\n\n### 📋 **Pré-requisitos**\n- **Node.js** 18+ \n- **PostgreSQL** 12+\n- **npm** ou **yarn**\n\n### 🚀 **Instalação Rápida**\n\n1. **Clone ou baixe o projeto**\n2. **Instale dependências**:\n   ```bash\n   npm install\n   ```\n3. **Configure o banco**:\n   ```bash\n   npm run setup:db\n   ```\n4. **Inicie a aplicação**:\n   ```bash\n   npm run dev\n   ```\n\n### 🗄️ **Scripts Disponíveis**\n\n| Script | Descrição |\n|--------|-----------|\n| `npm run dev` | Inicia servidor de desenvolvimento |\n| `npm run build` | Build para produção |\n| `npm run start` | Inicia servidor de produção |\n| `npm run setup:db` | Configura banco PostgreSQL |\n| `npm run db:push` | Sincroniza schema com banco |\n| `npm run db:studio` | Abre Drizzle Studio |\n| `npm run lint` | Executa linting do código |\n\n---\n\n## 🔐 Segurança e Privacidade\n\n### 🛡️ **Proteções Implementadas**\n\n#### **Anonimato Total**\n- ✅ **Nenhum dado pessoal** é coletado ou armazenado\n- ✅ **IP usado apenas** para controle de duplicação\n- ✅ **Sem cookies** de rastreamento\n- ✅ **Sem identificadores** únicos persistentes\n\n#### **Validação de Dados**\n- ✅ **Sanitização de inputs** no frontend e backend\n- ✅ **Validação TypeScript** em tempo de compilação\n- ✅ **Schemas Zod** para validação runtime\n- ✅ **Prevenção de SQL Injection** via ORM\n\n#### **Controle de Acesso**\n- ✅ **Dashboard público** (sem autenticação por design)\n- ✅ **Dados agregados** apenas - sem dados individuais\n- ✅ **Rate limiting** pode ser implementado se necessário\n\n---\n\n## 📊 Análises e Relatórios\n\n### 📈 **Métricas Disponíveis**\n\n#### **Estatísticas Gerais**\n- Total de respostas\n- Distribuição temporal\n- Cobertura por setor/escala/rancho\n\n#### **Análises Likert**\n- Distribuição de respostas por escala\n- Médias ponderadas por categoria\n- Comparação entre grupos\n\n#### **Análises Textuais**\n- Comentários categorizados\n- Sugestões compiladas\n- Feedback qualitativo\n\n### 📋 **Relatórios Exportáveis**\n*A implementar*:\n- ✏️ Export para PDF\n- ✏️ Export para Excel/CSV\n- ✏️ Relatórios agendados\n- ✏️ Análises comparativas temporais\n\n---\n\n## 🚀 Deploy e Produção\n\n### 🌐 **Configuração para Produção**\n\n#### **Variáveis de Ambiente**\n```bash\n# Banco de Dados\nDATABASE_URL=postgresql://postgres:suasenha123@localhost:5432/papem_clima_organizacional\n\n# Aplicação\nNODE_ENV=production\nPORT=5000\n```\n\n#### **Build de Produção**\n```bash\nnpm run build\nnpm run start\n```\n\n### 📦 **Docker (Opcional)**\n*Configuração Docker pode ser implementada*:\n- ✏️ Dockerfile para aplicação\n- ✏️ docker-compose.yml com PostgreSQL\n- ✏️ Scripts de deploy automatizado\n\n---\n\n## 🔄 Manutenção e Monitoramento\n\n### 📊 **Logs e Monitoramento**\n- ✅ **Console logs** estruturados\n- ✅ **Error tracking** no frontend\n- ✏️ **Metrics collection** (a implementar)\n- ✏️ **Health checks** (a implementar)\n\n### 🧹 **Rotinas de Manutenção**\n\n#### **Limpeza de Dados**\n```sql\n-- Remover dados de teste\nDELETE FROM survey_responses WHERE ip_address = '127.0.0.1';\n```\n\n#### **Backup Automático**\n```bash\n# Backup diário (crontab)\n0 2 * * * pg_dump -h localhost -U postgres papem_clima_organizacional > /backup/papem_$(date +\\%Y\\%m\\%d).sql\n```\n\n---\n\n## 📚 Extensibilidade\n\n### 🔧 **Customizações Possíveis**\n\n#### **Questionário**\n- ✅ Adicionar/remover seções facilmente\n- ✅ Modificar questões via schema\n- ✅ Implementar lógica condicional complexa\n\n#### **Dashboard**\n- ✅ Novos tipos de gráfico\n- ✅ Filtros personalizados\n- ✅ Visualizações específicas por setor\n\n#### **Integrações**\n- ✏️ API REST para sistemas externos\n- ✏️ Export automático para sistemas HR\n- ✏️ Notificações automáticas\n\n---\n\n## 🆘 Suporte e Troubleshooting\n\n### 🔍 **Problemas Comuns**\n\n#### **Erro de Conexão com Banco**\n```bash\n# Verificar se PostgreSQL está rodando\nsudo systemctl status postgresql\n\n# Verificar credenciais no drizzle.config.ts\n```\n\n#### **Erro de Build/Compilação**\n```bash\n# Limpar cache e reinstalar\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n#### **Problemas de Performance**\n```sql\n-- Verificar índices do banco\n\\d+ survey_responses\n\n-- Analisar queries lentas\nEXPLAIN ANALYZE SELECT * FROM survey_responses;\n```\n\n### 📞 **Contato para Suporte**\n- 📧 **Email**: [configurar email de suporte]\n- 📋 **Issues**: [configurar sistema de tickets]\n- 📚 **Documentação**: Este arquivo e README_BANCO_DADOS.md\n\n---\n\n## 📋 Roadmap Futuro\n\n### 🎯 **Próximas Funcionalidades**\n- ✏️ **Sistema de autenticação** para admins\n- ✏️ **Múltiplas pesquisas** simultâneas\n- ✏️ **Comparação temporal** de resultados\n- ✏️ **Alertas automáticos** para métricas críticas\n- ✏️ **API móvel** para aplicativo dedicado\n- ✏️ **IA para análise** de comentários textuais\n\n### 🔧 **Melhorias Técnicas**\n- ✏️ **Testes automatizados** (Jest/Cypress)\n- ✏️ **CI/CD pipeline** completo\n- ✏️ **Monitoramento avançado** (Prometheus/Grafana)\n- ✏️ **Cache Redis** para performance\n- ✏️ **CDN** para assets estáticos\n\n---\n\n*Documentação atualizada em $(date +%Y-%m-%d) - Sistema PAPEM v1.0*","size_bytes":12793},"README_BANCO_DADOS.md":{"content":"# 🗄️ Documentação do Banco de Dados - PAPEM\n\n## 📋 Visão Geral\n\nSistema de banco de dados PostgreSQL para o **PAPEM - Sistema de Pesquisa de Clima Organizacional** da Marinha do Brasil.\n\n### 🎯 Objetivo\nArmazenar e analisar respostas de pesquisas de clima organizacional de forma segura e anônima, permitindo geração de relatórios estatísticos para tomada de decisões.\n\n---\n\n## 🔧 Configuração Técnica\n\n### 📊 **Banco de Dados**\n- **SGBD**: PostgreSQL 12+\n- **Codificação**: UTF-8\n- **Nome**: `papem_clima_organizacional`\n- **Host**: localhost\n- **Porta**: 5432\n\n### 🔐 **Credenciais**\n```\nUsuário: postgres\nSenha: suasenha123\n```\n\n### 🔗 **String de Conexão**\n```\npostgresql://postgres:suasenha123@localhost:5432/papem_clima_organizacional\n```\n\n---\n\n## 📈 Estrutura do Banco\n\n### 🗃️ **Tabela Principal: `survey_responses`**\n\nArmazena todas as respostas da pesquisa de clima organizacional.\n\n#### 📝 **Campos e Descrições**\n\n| Campo | Tipo | Descrição | Obrigatório |\n|-------|------|-----------|-------------|\n| `id` | serial | Identificador único da resposta | ✅ |\n| `created_at` | timestamp | Data/hora de criação | ✅ |\n| `ip_address` | varchar(45) | IP do respondente (controle duplicação) | ✅ |\n\n#### 🏢 **Seção 1: Condições de Trabalho, Serviço e TFM**\n\n| Campo | Tipo | Descrição | Seção |\n|-------|------|-----------|-------|\n| `setor_trabalho` | varchar(100) | Área principal de trabalho | Trabalho |\n| `materiais_fornecidos` | varchar(50) | Materiais fornecidos adequadamente | Trabalho |\n| `materiais_adequados` | varchar(50) | Materiais em boas condições | Trabalho |\n| `atendimento_apoio` | varchar(50) | Qualidade do atendimento de apoio | Trabalho |\n| `ambiente_trabalho` | varchar(50) | Ambiente de trabalho adequado | Trabalho |\n| `chefia_disponivel` | varchar(50) | Disponibilidade da chefia | Trabalho |\n| `chefia_orientacao` | varchar(50) | Qualidade das orientações da chefia | Trabalho |\n\n#### 🏠 **Alojamento (Condicional)**\n\n| Campo | Tipo | Descrição | Condição |\n|-------|------|-----------|----------|\n| `localizacao_alojamento` | varchar(100) | Local do alojamento | Opcional |\n| `alojamento_condicoes` | varchar(50) | Condições do alojamento | Se localização informada |\n| `banheiros_adequados` | varchar(50) | Adequação dos banheiros | Se localização informada |\n\n#### 🍽️ **Rancho (Obrigatório)**\n\n| Campo | Tipo | Descrição | Condição |\n|-------|------|-----------|----------|\n| `localizacao_rancho` | varchar(100) | Local do rancho | Sempre obrigatório |\n| `praca_darmas_adequada` | varchar(50) | Adequação da Praça D'armas | Só se rancho = \"Praça D'armas\" |\n| `rancho_instalacoes` | varchar(50) | Adequação das instalações | Sempre obrigatório |\n| `rancho_qualidade` | varchar(50) | Qualidade da comida | Sempre obrigatório |\n\n#### ⚓ **Escala de Serviço (Obrigatório)**\n\n| Campo | Tipo | Descrição | Condição |\n|-------|------|-----------|----------|\n| `escala_servico` | varchar(100) | Tipo de escala | Sempre obrigatório |\n| `escala_atrapalha` | varchar(50) | Se escala atrapalha trabalho | Se escala informada |\n| `equipamentos_servico` | varchar(50) | Equipamentos em bom estado | Se escala informada |\n| `tfm_participa` | varchar(50) | Participação no TFM | Se escala informada |\n| `tfm_incentivado` | varchar(50) | Incentivo ao TFM | Se escala informada |\n| `tfm_instalacoes` | varchar(50) | Adequação instalações TFM | Se escala informada |\n\n#### 👥 **Seção 2: Relacionamentos**\n\n| Campo | Tipo | Descrição |\n|-------|------|-----------|\n| `pares_auxiliam` | varchar(50) | Pares auxiliam quando necessário |\n| `pares_cooperacao` | varchar(50) | Cooperação entre pares |\n| `subordinados_orientacao` | varchar(50) | Orientação aos subordinados |\n| `subordinados_disponibilidade` | varchar(50) | Disponibilidade para subordinados |\n| `chefia_dialogo` | varchar(50) | Diálogo com a chefia |\n| `chefia_orientacao_relacionamento` | varchar(50) | Orientação da chefia nos relacionamentos |\n| `chefia_disponibilidade` | varchar(50) | Disponibilidade da chefia |\n| `chefia_competencia` | varchar(50) | Competência da chefia |\n| `comunicacao_eficaz` | varchar(50) | Eficácia da comunicação |\n| `informacoes_claras` | varchar(50) | Clareza das informações |\n\n#### 🚀 **Seção 3: Motivação e Desenvolvimento**\n\n| Campo | Tipo | Descrição |\n|-------|------|-----------|\n| `reconhecimento_trabalho` | varchar(50) | Reconhecimento do trabalho |\n| `oportunidades_crescimento` | varchar(50) | Oportunidades de crescimento |\n| `cursos_capacitacao` | varchar(50) | Disponibilidade de cursos |\n| `atualizacao_conhecimentos` | varchar(50) | Atualização de conhecimentos |\n| `satisfacao_geral` | varchar(50) | Satisfação geral |\n| `recomendar_organizacao` | varchar(50) | Recomendaria a organização |\n\n#### 💬 **Seção 4: Comentários**\n\n| Campo | Tipo | Descrição |\n|-------|------|-----------|\n| `comentarios_gerais` | text | Comentários gerais (opcional) |\n| `sugestoes_melhorias` | text | Sugestões de melhorias (opcional) |\n\n### 📊 **Tabela de Estatísticas: `survey_stats`**\n\n| Campo | Tipo | Descrição |\n|-------|------|-----------|\n| `id` | serial | Identificador único |\n| `total_responses` | integer | Total de respostas |\n| `last_updated` | timestamp | Última atualização |\n\n---\n\n## 🎭 **Valores das Respostas Likert**\n\nTodas as questões de escala Likert utilizam os seguintes valores:\n\n- **\"Concordo Totalmente\"**\n- **\"Concordo\"**\n- **\"Neutro\"**\n- **\"Discordo\"**\n- **\"Discordo Totalmente\"**\n\n---\n\n## 🔐 **Segurança e Privacidade**\n\n### 🔒 **Anonimato Garantido**\n- ✅ Nenhum dado pessoal é armazenado\n- ✅ IP usado apenas para controle de duplicação\n- ✅ Não há rastreamento de usuários individuais\n\n### 🛡️ **Controles de Integridade**\n- ✅ Validação de dados obrigatórios\n- ✅ Prevenção de respostas duplicadas por IP\n- ✅ Validação de tipos de dados\n\n---\n\n## 🔄 **Relacionamentos e Regras de Negócio**\n\n### 📋 **Regras Condicionais**\n\n1. **Alojamento (Q8-Q10)**:\n   - Se `localizacao_alojamento` informado → Q9-Q10 obrigatórias\n\n2. **Rancho (Q11-Q14)**:\n   - `localizacao_rancho` sempre obrigatório\n   - Se `localizacao_rancho = \"Praça D'armas\"` → Q12 obrigatória\n   - Q13-Q14 sempre obrigatórias quando rancho informado\n\n3. **Escala (Q15-Q20)**:\n   - `escala_servico` sempre obrigatório\n   - Q16-Q20 obrigatórias quando escala informada\n\n### 🎯 **Numeração Dinâmica**\nA numeração das questões se adapta baseada nas respostas:\n- Sem Praça D'armas: Q11 → Q12 → Q13 → Q14 → Q15 → Q16 → Q17 → Q18 → Q19\n- Com Praça D'armas: Q11 → Q12 → Q13 → Q14 → Q15 → Q16 → Q17 → Q18 → Q19 → Q20\n\n---\n\n## 📊 **Índices e Performance**\n\n### 🚀 **Índices Recomendados**\n```sql\n-- Índice para consultas por setor\nCREATE INDEX idx_survey_setor ON survey_responses(setor_trabalho);\n\n-- Índice para consultas por rancho\nCREATE INDEX idx_survey_rancho ON survey_responses(localizacao_rancho);\n\n-- Índice para consultas por escala\nCREATE INDEX idx_survey_escala ON survey_responses(escala_servico);\n\n-- Índice para consultas temporais\nCREATE INDEX idx_survey_created ON survey_responses(created_at);\n\n-- Índice para controle de duplicação\nCREATE INDEX idx_survey_ip ON survey_responses(ip_address);\n```\n\n---\n\n## 🔧 **Scripts de Manutenção**\n\n### 🧹 **Limpeza de Dados Teste**\n```sql\n-- Remover dados de teste\nDELETE FROM survey_responses WHERE ip_address = '127.0.0.1';\n```\n\n### 📈 **Consultas de Análise**\n\n#### Total de Respostas por Setor\n```sql\nSELECT setor_trabalho, COUNT(*) as total\nFROM survey_responses \nWHERE setor_trabalho IS NOT NULL\nGROUP BY setor_trabalho\nORDER BY total DESC;\n```\n\n#### Satisfação Geral por Escala\n```sql\nSELECT escala_servico, satisfacao_geral, COUNT(*) as total\nFROM survey_responses \nWHERE escala_servico IS NOT NULL AND satisfacao_geral IS NOT NULL\nGROUP BY escala_servico, satisfacao_geral\nORDER BY escala_servico, total DESC;\n```\n\n#### Respostas por Período\n```sql\nSELECT DATE(created_at) as data, COUNT(*) as respostas\nFROM survey_responses\nGROUP BY DATE(created_at)\nORDER BY data DESC;\n```\n\n---\n\n## 🆘 **Backup e Recuperação**\n\n### 💾 **Backup Completo**\n```bash\npg_dump -h localhost -U postgres -d papem_clima_organizacional > backup_papem_$(date +%Y%m%d_%H%M%S).sql\n```\n\n### 🔄 **Restauração**\n```bash\npsql -h localhost -U postgres -d papem_clima_organizacional < backup_papem_YYYYMMDD_HHMMSS.sql\n```\n\n---\n\n## 📞 **Suporte Técnico**\n\n### 🔍 **Troubleshooting Comum**\n\n1. **Erro de Conexão**:\n   ```bash\n   # Verificar se PostgreSQL está rodando\n   sudo systemctl status postgresql\n   \n   # Iniciar se necessário\n   sudo systemctl start postgresql\n   ```\n\n2. **Erro de Permissão**:\n   ```sql\n   -- Dar permissões ao usuário\n   GRANT ALL PRIVILEGES ON DATABASE papem_clima_organizacional TO postgres;\n   ```\n\n3. **Verificar Espaço em Disco**:\n   ```sql\n   SELECT pg_size_pretty(pg_database_size('papem_clima_organizacional'));\n   ```\n\n---\n\n*Documentação gerada automaticamente pelo Sistema PAPEM - $(date +%Y-%m-%d)*","size_bytes":9175},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nexport default defineConfig({\n  schema: \"./shared/schema.ts\",\n  out: \"./drizzle/migrations\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL!,\n  },\n  verbose: true,\n  strict: true,\n});","size_bytes":259},"setup-database.sh":{"content":"#!/bin/bash\n\n# Script de configuração do banco PostgreSQL para PAPEM - Sistema de Clima Organizacional\n# Autor: Sistema PAPEM\n# Data: $(date +%Y-%m-%d)\n\necho \"🚀 Iniciando configuração do banco PostgreSQL para PAPEM...\"\n\n# Cores para output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Configurações do banco\nDB_HOST=\"localhost\"\nDB_PORT=\"5432\"\nDB_NAME=\"papem_clima_organizacional\"\nDB_USER=\"postgres\"\nDB_PASS=\"postgres123\"\n\necho -e \"${BLUE}📋 Configurações do banco:${NC}\"\necho -e \"   Host: ${DB_HOST}\"\necho -e \"   Porta: ${DB_PORT}\"\necho -e \"   Banco: ${DB_NAME}\"\necho -e \"   Usuário: ${DB_USER}\"\necho \"\"\n\n# Função para verificar se PostgreSQL está rodando\ncheck_postgresql() {\n    echo -e \"${YELLOW}🔍 Verificando se PostgreSQL está rodando...${NC}\"\n    \n    if pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER; then\n        echo -e \"${GREEN}✅ PostgreSQL está rodando!${NC}\"\n        return 0\n    else\n        echo -e \"${RED}❌ PostgreSQL não está rodando ou não está acessível.${NC}\"\n        echo -e \"${RED}   Verifique se o PostgreSQL está instalado e rodando.${NC}\"\n        echo -e \"${RED}   Comando para iniciar: sudo systemctl start postgresql${NC}\"\n        return 1\n    fi\n}\n\n# Função para criar banco de dados\ncreate_database() {\n    echo -e \"${YELLOW}🏗️  Criando banco de dados '${DB_NAME}'...${NC}\"\n    \n    # Verificar se banco já existe\n    DB_EXISTS=$(PGPASSWORD=$DB_PASS psql -h $DB_HOST -p $DB_PORT -U $DB_USER -lqt | cut -d \\| -f 1 | grep -qw $DB_NAME; echo $?)\n    \n    if [ $DB_EXISTS -eq 0 ]; then\n        echo -e \"${YELLOW}⚠️  Banco '${DB_NAME}' já existe. Deseja recriar? (y/N)${NC}\"\n        read -r response\n        if [[ $response =~ ^[Yy]$ ]]; then\n            echo -e \"${YELLOW}🗑️  Removendo banco existente...${NC}\"\n            PGPASSWORD=$DB_PASS dropdb -h $DB_HOST -p $DB_PORT -U $DB_USER $DB_NAME\n        else\n            echo -e \"${GREEN}✅ Usando banco existente.${NC}\"\n            return 0\n        fi\n    fi\n    \n    # Criar o banco\n    if PGPASSWORD=$DB_PASS createdb -h $DB_HOST -p $DB_PORT -U $DB_USER $DB_NAME -E UTF8; then\n        echo -e \"${GREEN}✅ Banco '${DB_NAME}' criado com sucesso!${NC}\"\n    else\n        echo -e \"${RED}❌ Erro ao criar banco '${DB_NAME}'.${NC}\"\n        return 1\n    fi\n}\n\n# Função para executar migrations\nrun_migrations() {\n    echo -e \"${YELLOW}📊 Executando migrations do Drizzle...${NC}\"\n    \n    if npm run db:push; then\n        echo -e \"${GREEN}✅ Migrations executadas com sucesso!${NC}\"\n    else\n        echo -e \"${RED}❌ Erro ao executar migrations.${NC}\"\n        return 1\n    fi\n}\n\n# Função para inserir dados de teste (opcional)\ninsert_test_data() {\n    echo -e \"${YELLOW}📝 Deseja inserir dados de teste? (y/N)${NC}\"\n    read -r response\n    \n    if [[ $response =~ ^[Yy]$ ]]; then\n        echo -e \"${YELLOW}🧪 Inserindo dados de teste...${NC}\"\n        \n        PGPASSWORD=$DB_PASS psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME << EOF\n-- Inserir resposta de teste\nINSERT INTO survey_responses (\n    setor_trabalho, materiais_fornecidos, materiais_adequados, atendimento_apoio,\n    ambiente_trabalho, chefia_disponivel, chefia_orientacao,\n    localizacao_rancho, rancho_instalacoes, rancho_qualidade,\n    escala_servico, escala_atrapalha, equipamentos_servico,\n    tfm_participa, tfm_incentivado, tfm_instalacoes,\n    pares_auxiliam, pares_cooperacao, chefia_dialogo, comunicacao_eficaz,\n    reconhecimento_trabalho, satisfacao_geral,\n    comentarios_gerais, ip_address\n) VALUES (\n    'SECRETARIA', 'Concordo', 'Concordo', 'Concordo',\n    'Concordo', 'Concordo', 'Concordo',\n    'Distrito', 'Concordo', 'Concordo',\n    'Oficiais', 'Discordo', 'Concordo',\n    'Concordo', 'Concordo', 'Concordo',\n    'Concordo', 'Concordo', 'Concordo', 'Concordo',\n    'Concordo', 'Concordo',\n    'Resposta de teste inserida automaticamente pelo script de setup.', '127.0.0.1'\n);\n\n-- Inserir estatísticas iniciais\nINSERT INTO survey_stats (total_responses) VALUES (1);\nEOF\n        \n        if [ $? -eq 0 ]; then\n            echo -e \"${GREEN}✅ Dados de teste inseridos com sucesso!${NC}\"\n        else\n            echo -e \"${RED}❌ Erro ao inserir dados de teste.${NC}\"\n        fi\n    fi\n}\n\n# Função para testar conexão\ntest_connection() {\n    echo -e \"${YELLOW}🔗 Testando conexão com o banco...${NC}\"\n    \n    if PGPASSWORD=$DB_PASS psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c \"SELECT 'Conexão OK!' as status, NOW() as timestamp;\"; then\n        echo -e \"${GREEN}✅ Conexão testada com sucesso!${NC}\"\n    else\n        echo -e \"${RED}❌ Erro na conexão com o banco.${NC}\"\n        return 1\n    fi\n}\n\n# Função principal\nmain() {\n    echo -e \"${BLUE}🎯 PAPEM - Sistema de Pesquisa de Clima Organizacional${NC}\"\n    echo -e \"${BLUE}   Configuração do Banco PostgreSQL${NC}\"\n    echo \"\"\n    \n    # Verificar PostgreSQL\n    if ! check_postgresql; then\n        exit 1\n    fi\n    \n    # Criar banco\n    if ! create_database; then\n        exit 1\n    fi\n    \n    # Executar migrations\n    if ! run_migrations; then\n        exit 1\n    fi\n    \n    # Testar conexão\n    if ! test_connection; then\n        exit 1\n    fi\n    \n    # Dados de teste (opcional)\n    insert_test_data\n    \n    echo \"\"\n    echo -e \"${GREEN}🎉 Configuração concluída com sucesso!${NC}\"\n    echo -e \"${GREEN}   O banco PostgreSQL está pronto para uso.${NC}\"\n    echo \"\"\n    echo -e \"${BLUE}📋 Informações de conexão:${NC}\"\n    echo -e \"   URL: postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}\"\n    echo -e \"   Host: ${DB_HOST}\"\n    echo -e \"   Porta: ${DB_PORT}\"\n    echo -e \"   Banco: ${DB_NAME}\"\n    echo -e \"   Usuário: ${DB_USER}\"\n    echo \"\"\n    echo -e \"${YELLOW}💡 Para iniciar a aplicação: npm run dev${NC}\"\n    echo -e \"${YELLOW}💡 Para acessar o banco: psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME}${NC}\"\n}\n\n# Executar função principal\nmain \"$@\"\n","size_bytes":5980},"server/db.ts":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from '@shared/schema';\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n// Pool de conexões usando DATABASE_URL do Replit\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false\n});\n\n// Instância do Drizzle ORM\nexport const db = drizzle({ client: pool, schema });\n\n// Função para testar conexão\nexport async function testConnection() {\n  try {\n    const client = await pool.connect();\n    console.log('✅ Conexão com PostgreSQL estabelecida com sucesso!');\n    \n    const result = await client.query('SELECT NOW()');\n    console.log('🕒 Data/hora do servidor:', result.rows[0].now);\n    \n    client.release();\n    return true;\n  } catch (error) {\n    console.error('❌ Erro ao conectar com PostgreSQL:', error);\n    return false;\n  }\n}\n\n// Função para fechar conexões gracefully\nexport async function closeConnection() {\n  await pool.end();\n  console.log('🔌 Conexões com PostgreSQL fechadas');\n}","size_bytes":1203},"server/storage.ts":{"content":"import { surveyResponses, surveyStats, type SurveyResponse, type InsertSurveyResponse } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, sql, count, desc } from \"drizzle-orm\";\n\n// Interface para operações de storage\nexport interface IStorage {\n  // Operações de pesquisa\n  createSurveyResponse(data: InsertSurveyResponse): Promise<SurveyResponse>;\n  getSurveyResponses(): Promise<SurveyResponse[]>;\n  getSurveyResponseById(id: number): Promise<SurveyResponse | undefined>;\n  \n  // Estatísticas\n  getTotalResponses(): Promise<number>;\n  getResponsesBySetor(): Promise<Record<string, number>>;\n  getResponsesByRancho(): Promise<Record<string, number>>;\n  getResponsesByEscala(): Promise<Record<string, number>>;\n  \n  // Análises avançadas\n  getLikertStats(field: string): Promise<Record<string, number>>;\n  getRecentResponses(limit?: number): Promise<SurveyResponse[]>;\n}\n\n// Implementação do storage com PostgreSQL\nexport class DatabaseStorage implements IStorage {\n  \n  async createSurveyResponse(data: InsertSurveyResponse): Promise<SurveyResponse> {\n    const [response] = await db\n      .insert(surveyResponses)\n      .values({\n        ...data,\n        ip_address: data.ip_address || 'unknown',\n      })\n      .returning();\n    \n    // Atualizar contador de estatísticas\n    await this.updateStats();\n    \n    return response;\n  }\n\n  async getSurveyResponses(): Promise<SurveyResponse[]> {\n    return await db.select().from(surveyResponses).orderBy(desc(surveyResponses.created_at));\n  }\n\n  async getSurveyResponseById(id: number): Promise<SurveyResponse | undefined> {\n    const [response] = await db\n      .select()\n      .from(surveyResponses)\n      .where(eq(surveyResponses.id, id));\n    return response || undefined;\n  }\n\n  async getTotalResponses(): Promise<number> {\n    const [result] = await db.select({ count: count() }).from(surveyResponses);\n    return result.count;\n  }\n\n  async getResponsesBySetor(): Promise<Record<string, number>> {\n    const results = await db\n      .select({\n        setor: surveyResponses.setor_trabalho,\n        count: count(),\n      })\n      .from(surveyResponses)\n      .where(sql`${surveyResponses.setor_trabalho} IS NOT NULL`)\n      .groupBy(surveyResponses.setor_trabalho);\n\n    return results.reduce((acc, { setor, count }) => {\n      if (setor) acc[setor] = count;\n      return acc;\n    }, {} as Record<string, number>);\n  }\n\n  async getResponsesByRancho(): Promise<Record<string, number>> {\n    const results = await db\n      .select({\n        rancho: surveyResponses.localizacao_rancho,\n        count: count(),\n      })\n      .from(surveyResponses)\n      .where(sql`${surveyResponses.localizacao_rancho} IS NOT NULL`)\n      .groupBy(surveyResponses.localizacao_rancho);\n\n    return results.reduce((acc, { rancho, count }) => {\n      if (rancho) acc[rancho] = count;\n      return acc;\n    }, {} as Record<string, number>);\n  }\n\n  async getResponsesByEscala(): Promise<Record<string, number>> {\n    const results = await db\n      .select({\n        escala: surveyResponses.escala_servico,\n        count: count(),\n      })\n      .from(surveyResponses)\n      .where(sql`${surveyResponses.escala_servico} IS NOT NULL`)\n      .groupBy(surveyResponses.escala_servico);\n\n    return results.reduce((acc, { escala, count }) => {\n      if (escala) acc[escala] = count;\n      return acc;\n    }, {} as Record<string, number>);\n  }\n\n  async getLikertStats(field: string): Promise<Record<string, number>> {\n    // Esta função precisa ser adaptada baseada no campo específico\n    // Por ora, retorna uma estrutura básica\n    const query = sql`\n      SELECT ${sql.raw(field)} as value, COUNT(*) as count \n      FROM survey_responses \n      WHERE ${sql.raw(field)} IS NOT NULL \n      GROUP BY ${sql.raw(field)}\n    `;\n    \n    const results = await db.execute(query);\n    \n    return (results.rows as any[]).reduce((acc, { value, count }) => {\n      if (value) acc[value] = parseInt(count);\n      return acc;\n    }, {} as Record<string, number>);\n  }\n\n  async getRecentResponses(limit: number = 10): Promise<SurveyResponse[]> {\n    return await db\n      .select()\n      .from(surveyResponses)\n      .orderBy(desc(surveyResponses.created_at))\n      .limit(limit);\n  }\n\n  private async updateStats(): Promise<void> {\n    const totalCount = await this.getTotalResponses();\n    \n    // Atualizar ou inserir estatísticas\n    const [existing] = await db.select().from(surveyStats).limit(1);\n    \n    if (existing) {\n      await db\n        .update(surveyStats)\n        .set({\n          total_responses: totalCount,\n          last_updated: new Date(),\n        })\n        .where(eq(surveyStats.id, existing.id));\n    } else {\n      await db.insert(surveyStats).values({\n        total_responses: totalCount,\n      });\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":4826},"shared/schema.ts":{"content":"import { pgTable, serial, varchar, text, timestamp, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Tabela principal para armazenar as respostas da pesquisa\nexport const surveyResponses = pgTable(\"survey_responses\", {\n  id: serial(\"id\").primaryKey(),\n  \n  // Seção 1: Condições de Trabalho, Serviço e TFM\n  setor_trabalho: varchar(\"setor_trabalho\", { length: 100 }),\n  materiais_fornecidos: varchar(\"materiais_fornecidos\", { length: 50 }),\n  materiais_adequados: varchar(\"materiais_adequados\", { length: 50 }),\n  atendimento_apoio: varchar(\"atendimento_apoio\", { length: 50 }),\n  limpeza_adequada: varchar(\"limpeza_adequada\", { length: 50 }),\n  temperatura_adequada: varchar(\"temperatura_adequada\", { length: 50 }),\n  iluminacao_adequada: varchar(\"iluminacao_adequada\", { length: 50 }),\n  \n  // Alojamento (opcional - baseado na localização)\n  localizacao_alojamento: varchar(\"localizacao_alojamento\", { length: 100 }),\n  alojamento_condicoes: varchar(\"alojamento_condicoes\", { length: 50 }),\n  banheiros_adequados: varchar(\"banheiros_adequados\", { length: 50 }),\n  \n  // Rancho e Praça d'Armas\n  praca_darmas_adequada: varchar(\"praca_darmas_adequada\", { length: 50 }),\n  localizacao_rancho: varchar(\"localizacao_rancho\", { length: 100 }),\n  rancho_instalacoes: varchar(\"rancho_instalacoes\", { length: 50 }),\n  rancho_qualidade: varchar(\"rancho_qualidade\", { length: 50 }),\n  \n  // Escala de Serviço (obrigatório)\n  escala_servico: varchar(\"escala_servico\", { length: 100 }),\n  escala_atrapalha: varchar(\"escala_atrapalha\", { length: 50 }),\n  equipamentos_servico: varchar(\"equipamentos_servico\", { length: 50 }),\n  tfm_participa: varchar(\"tfm_participa\", { length: 50 }),\n  tfm_incentivado: varchar(\"tfm_incentivado\", { length: 50 }),\n  tfm_instalacoes: varchar(\"tfm_instalacoes\", { length: 50 }),\n  \n  // Seção 2: Relacionamentos\n  chefe_ouve_ideias: varchar(\"chefe_ouve_ideias\", { length: 50 }),\n  chefe_se_importa: varchar(\"chefe_se_importa\", { length: 50 }),\n  contribuir_atividades: varchar(\"contribuir_atividades\", { length: 50 }),\n  chefe_delega: varchar(\"chefe_delega\", { length: 50 }),\n  pares_auxiliam: varchar(\"pares_auxiliam\", { length: 50 }),\n  entrosamento_setores: varchar(\"entrosamento_setores\", { length: 50 }),\n  entrosamento_tripulacao: varchar(\"entrosamento_tripulacao\", { length: 50 }),\n  convivio_agradavel: varchar(\"convivio_agradavel\", { length: 50 }),\n  confianca_respeito: varchar(\"confianca_respeito\", { length: 50 }),\n  \n  // Seção 3: Motivação e Desenvolvimento Profissional\n  feedback_desempenho: varchar(\"feedback_desempenho\", { length: 50 }),\n  conceito_compativel: varchar(\"conceito_compativel\", { length: 50 }),\n  importancia_atividade: varchar(\"importancia_atividade\", { length: 50 }),\n  trabalho_reconhecido: varchar(\"trabalho_reconhecido\", { length: 50 }),\n  crescimento_estimulado: varchar(\"crescimento_estimulado\", { length: 50 }),\n  cursos_suficientes: varchar(\"cursos_suficientes\", { length: 50 }),\n  programa_treinamento: varchar(\"programa_treinamento\", { length: 50 }),\n  orgulho_trabalhar: varchar(\"orgulho_trabalhar\", { length: 50 }),\n  bem_aproveitado: varchar(\"bem_aproveitado\", { length: 50 }),\n  potencial_outra_funcao: varchar(\"potencial_outra_funcao\", { length: 50 }),\n  carga_trabalho_justa: varchar(\"carga_trabalho_justa\", { length: 50 }),\n  licenca_autorizada: varchar(\"licenca_autorizada\", { length: 50 }),\n  \n  // Seção 4: Comentários e Sugestões\n  aspecto_positivo: text(\"aspecto_positivo\"),\n  aspecto_negativo: text(\"aspecto_negativo\"),\n  proposta_processo: text(\"proposta_processo\"),\n  proposta_satisfacao: text(\"proposta_satisfacao\"),\n  \n  // Metadados\n  created_at: timestamp(\"created_at\").defaultNow(),\n  ip_address: varchar(\"ip_address\", { length: 45 }), // Para evitar duplicações (IPv4/IPv6)\n});\n\n// Tabela para controle de estatísticas\nexport const surveyStats = pgTable(\"survey_stats\", {\n  id: serial(\"id\").primaryKey(),\n  total_responses: integer(\"total_responses\").default(0),\n  last_updated: timestamp(\"last_updated\").defaultNow(),\n});\n\n// Tipos TypeScript inferidos\nexport type SurveyResponse = typeof surveyResponses.$inferSelect;\nexport type InsertSurveyResponse = typeof surveyResponses.$inferInsert;\n\n// Schemas de validação com Zod\nexport const insertSurveyResponseSchema = createInsertSchema(surveyResponses).omit({\n  id: true,\n  created_at: true,\n});\n\n// Schema personalizado com validações\nexport const surveyValidationSchema = z.object({\n  setor_trabalho: z.string().min(1, \"Setor de trabalho é obrigatório\"),\n  localizacao_rancho: z.string().min(1, \"Localização do rancho é obrigatória\"),\n  escala_servico: z.string().min(1, \"Escala de serviço é obrigatória\"),\n});\n\n// Comment out for now since frontend doesn't use actual database operations\n// export type InsertSurveyResponseType = z.infer<typeof insertSurveyResponseSchema>;","size_bytes":4915},"node_modules/.vite/deps/@radix-ui_react-select.js":{"content":"\"use client\";\nimport {\n  Anchor,\n  Arrow,\n  Content,\n  Root2,\n  createPopperScope\n} from \"./chunk-GEZAQWMV.js\";\nimport {\n  DismissableLayer,\n  Portal,\n  VISUALLY_HIDDEN_STYLES\n} from \"./chunk-JXCMI7KA.js\";\nimport {\n  clamp\n} from \"./chunk-6ZMM2PAV.js\";\nimport {\n  createCollection\n} from \"./chunk-JED5GKIW.js\";\nimport {\n  useId\n} from \"./chunk-3XJBZLKW.js\";\nimport {\n  useControllableState\n} from \"./chunk-CEXEOIRA.js\";\nimport {\n  useDirection\n} from \"./chunk-4RO2SXZU.js\";\nimport {\n  composeEventHandlers,\n  useCallbackRef,\n  useLayoutEffect2\n} from \"./chunk-EARV6VOU.js\";\nimport {\n  createContextScope\n} from \"./chunk-UBQ2LXDH.js\";\nimport {\n  Primitive\n} from \"./chunk-3NBYILSP.js\";\nimport {\n  require_react_dom\n} from \"./chunk-T2SWDQEL.js\";\nimport {\n  createSlot,\n  useComposedRefs\n} from \"./chunk-KQESEILF.js\";\nimport {\n  require_jsx_runtime\n} from \"./chunk-KBTYAULA.js\";\nimport {\n  require_react\n} from \"./chunk-QCHXOAYK.js\";\nimport {\n  __toESM\n} from \"./chunk-WOOG5QLI.js\";\n\n// node_modules/@radix-ui/react-select/dist/index.mjs\nvar React13 = __toESM(require_react(), 1);\nvar ReactDOM = __toESM(require_react_dom(), 1);\n\n// node_modules/@radix-ui/react-focus-guards/dist/index.mjs\nvar React = __toESM(require_react(), 1);\nvar count = 0;\nfunction useFocusGuards() {\n  React.useEffect(() => {\n    const edgeGuards = document.querySelectorAll(\"[data-radix-focus-guard]\");\n    document.body.insertAdjacentElement(\"afterbegin\", edgeGuards[0] ?? createFocusGuard());\n    document.body.insertAdjacentElement(\"beforeend\", edgeGuards[1] ?? createFocusGuard());\n    count++;\n    return () => {\n      if (count === 1) {\n        document.querySelectorAll(\"[data-radix-focus-guard]\").forEach((node) => node.remove());\n      }\n      count--;\n    };\n  }, []);\n}\nfunction createFocusGuard() {\n  const element = document.createElement(\"span\");\n  element.setAttribute(\"data-radix-focus-guard\", \"\");\n  element.tabIndex = 0;\n  element.style.outline = \"none\";\n  element.style.opacity = \"0\";\n  element.style.position = \"fixed\";\n  element.style.pointerEvents = \"none\";\n  return element;\n}\n\n// node_modules/@radix-ui/react-focus-scope/dist/index.mjs\nvar React2 = __toESM(require_react(), 1);\nvar import_jsx_runtime = __toESM(require_jsx_runtime(), 1);\nvar AUTOFOCUS_ON_MOUNT = \"focusScope.autoFocusOnMount\";\nvar AUTOFOCUS_ON_UNMOUNT = \"focusScope.autoFocusOnUnmount\";\nvar EVENT_OPTIONS = { bubbles: false, cancelable: true };\nvar FOCUS_SCOPE_NAME = \"FocusScope\";\nvar FocusScope = React2.forwardRef((props, forwardedRef) => {\n  const {\n    loop = false,\n    trapped = false,\n    onMountAutoFocus: onMountAutoFocusProp,\n    onUnmountAutoFocus: onUnmountAutoFocusProp,\n    ...scopeProps\n  } = props;\n  const [container, setContainer] = React2.useState(null);\n  const onMountAutoFocus = useCallbackRef(onMountAutoFocusProp);\n  const onUnmountAutoFocus = useCallbackRef(onUnmountAutoFocusProp);\n  const lastFocusedElementRef = React2.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, (node) => setContainer(node));\n  const focusScope = React2.useRef({\n    paused: false,\n    pause() {\n      this.paused = true;\n    },\n    resume() {\n      this.paused = false;\n    }\n  }).current;\n  React2.useEffect(() => {\n    if (trapped) {\n      let handleFocusIn2 = function(event) {\n        if (focusScope.paused || !container) return;\n        const target = event.target;\n        if (container.contains(target)) {\n          lastFocusedElementRef.current = target;\n        } else {\n          focus(lastFocusedElementRef.current, { select: true });\n        }\n      }, handleFocusOut2 = function(event) {\n        if (focusScope.paused || !container) return;\n        const relatedTarget = event.relatedTarget;\n        if (relatedTarget === null) return;\n        if (!container.contains(relatedTarget)) {\n          focus(lastFocusedElementRef.current, { select: true });\n        }\n      }, handleMutations2 = function(mutations) {\n        const focusedElement = document.activeElement;\n        if (focusedElement !== document.body) return;\n        for (const mutation of mutations) {\n          if (mutation.removedNodes.length > 0) focus(container);\n        }\n      };\n      var handleFocusIn = handleFocusIn2, handleFocusOut = handleFocusOut2, handleMutations = handleMutations2;\n      document.addEventListener(\"focusin\", handleFocusIn2);\n      document.addEventListener(\"focusout\", handleFocusOut2);\n      const mutationObserver = new MutationObserver(handleMutations2);\n      if (container) mutationObserver.observe(container, { childList: true, subtree: true });\n      return () => {\n        document.removeEventListener(\"focusin\", handleFocusIn2);\n        document.removeEventListener(\"focusout\", handleFocusOut2);\n        mutationObserver.disconnect();\n      };\n    }\n  }, [trapped, container, focusScope.paused]);\n  React2.useEffect(() => {\n    if (container) {\n      focusScopesStack.add(focusScope);\n      const previouslyFocusedElement = document.activeElement;\n      const hasFocusedCandidate = container.contains(previouslyFocusedElement);\n      if (!hasFocusedCandidate) {\n        const mountEvent = new CustomEvent(AUTOFOCUS_ON_MOUNT, EVENT_OPTIONS);\n        container.addEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);\n        container.dispatchEvent(mountEvent);\n        if (!mountEvent.defaultPrevented) {\n          focusFirst(removeLinks(getTabbableCandidates(container)), { select: true });\n          if (document.activeElement === previouslyFocusedElement) {\n            focus(container);\n          }\n        }\n      }\n      return () => {\n        container.removeEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);\n        setTimeout(() => {\n          const unmountEvent = new CustomEvent(AUTOFOCUS_ON_UNMOUNT, EVENT_OPTIONS);\n          container.addEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);\n          container.dispatchEvent(unmountEvent);\n          if (!unmountEvent.defaultPrevented) {\n            focus(previouslyFocusedElement ?? document.body, { select: true });\n          }\n          container.removeEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);\n          focusScopesStack.remove(focusScope);\n        }, 0);\n      };\n    }\n  }, [container, onMountAutoFocus, onUnmountAutoFocus, focusScope]);\n  const handleKeyDown = React2.useCallback(\n    (event) => {\n      if (!loop && !trapped) return;\n      if (focusScope.paused) return;\n      const isTabKey = event.key === \"Tab\" && !event.altKey && !event.ctrlKey && !event.metaKey;\n      const focusedElement = document.activeElement;\n      if (isTabKey && focusedElement) {\n        const container2 = event.currentTarget;\n        const [first, last] = getTabbableEdges(container2);\n        const hasTabbableElementsInside = first && last;\n        if (!hasTabbableElementsInside) {\n          if (focusedElement === container2) event.preventDefault();\n        } else {\n          if (!event.shiftKey && focusedElement === last) {\n            event.preventDefault();\n            if (loop) focus(first, { select: true });\n          } else if (event.shiftKey && focusedElement === first) {\n            event.preventDefault();\n            if (loop) focus(last, { select: true });\n          }\n        }\n      }\n    },\n    [loop, trapped, focusScope.paused]\n  );\n  return (0, import_jsx_runtime.jsx)(Primitive.div, { tabIndex: -1, ...scopeProps, ref: composedRefs, onKeyDown: handleKeyDown });\n});\nFocusScope.displayName = FOCUS_SCOPE_NAME;\nfunction focusFirst(candidates, { select = false } = {}) {\n  const previouslyFocusedElement = document.activeElement;\n  for (const candidate of candidates) {\n    focus(candidate, { select });\n    if (document.activeElement !== previouslyFocusedElement) return;\n  }\n}\nfunction getTabbableEdges(container) {\n  const candidates = getTabbableCandidates(container);\n  const first = findVisible(candidates, container);\n  const last = findVisible(candidates.reverse(), container);\n  return [first, last];\n}\nfunction getTabbableCandidates(container) {\n  const nodes = [];\n  const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: (node) => {\n      const isHiddenInput = node.tagName === \"INPUT\" && node.type === \"hidden\";\n      if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;\n      return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    }\n  });\n  while (walker.nextNode()) nodes.push(walker.currentNode);\n  return nodes;\n}\nfunction findVisible(elements, container) {\n  for (const element of elements) {\n    if (!isHidden(element, { upTo: container })) return element;\n  }\n}\nfunction isHidden(node, { upTo }) {\n  if (getComputedStyle(node).visibility === \"hidden\") return true;\n  while (node) {\n    if (upTo !== void 0 && node === upTo) return false;\n    if (getComputedStyle(node).display === \"none\") return true;\n    node = node.parentElement;\n  }\n  return false;\n}\nfunction isSelectableInput(element) {\n  return element instanceof HTMLInputElement && \"select\" in element;\n}\nfunction focus(element, { select = false } = {}) {\n  if (element && element.focus) {\n    const previouslyFocusedElement = document.activeElement;\n    element.focus({ preventScroll: true });\n    if (element !== previouslyFocusedElement && isSelectableInput(element) && select)\n      element.select();\n  }\n}\nvar focusScopesStack = createFocusScopesStack();\nfunction createFocusScopesStack() {\n  let stack = [];\n  return {\n    add(focusScope) {\n      const activeFocusScope = stack[0];\n      if (focusScope !== activeFocusScope) {\n        activeFocusScope == null ? void 0 : activeFocusScope.pause();\n      }\n      stack = arrayRemove(stack, focusScope);\n      stack.unshift(focusScope);\n    },\n    remove(focusScope) {\n      var _a;\n      stack = arrayRemove(stack, focusScope);\n      (_a = stack[0]) == null ? void 0 : _a.resume();\n    }\n  };\n}\nfunction arrayRemove(array, item) {\n  const updatedArray = [...array];\n  const index = updatedArray.indexOf(item);\n  if (index !== -1) {\n    updatedArray.splice(index, 1);\n  }\n  return updatedArray;\n}\nfunction removeLinks(items) {\n  return items.filter((item) => item.tagName !== \"A\");\n}\n\n// node_modules/@radix-ui/react-use-previous/dist/index.mjs\nvar React3 = __toESM(require_react(), 1);\nfunction usePrevious(value) {\n  const ref = React3.useRef({ value, previous: value });\n  return React3.useMemo(() => {\n    if (ref.current.value !== value) {\n      ref.current.previous = ref.current.value;\n      ref.current.value = value;\n    }\n    return ref.current.previous;\n  }, [value]);\n}\n\n// node_modules/aria-hidden/dist/es2015/index.js\nvar getDefaultParent = function(originalTarget) {\n  if (typeof document === \"undefined\") {\n    return null;\n  }\n  var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;\n  return sampleTarget.ownerDocument.body;\n};\nvar counterMap = /* @__PURE__ */ new WeakMap();\nvar uncontrolledNodes = /* @__PURE__ */ new WeakMap();\nvar markerMap = {};\nvar lockCount = 0;\nvar unwrapHost = function(node) {\n  return node && (node.host || unwrapHost(node.parentNode));\n};\nvar correctTargets = function(parent, targets) {\n  return targets.map(function(target) {\n    if (parent.contains(target)) {\n      return target;\n    }\n    var correctedTarget = unwrapHost(target);\n    if (correctedTarget && parent.contains(correctedTarget)) {\n      return correctedTarget;\n    }\n    console.error(\"aria-hidden\", target, \"in not contained inside\", parent, \". Doing nothing\");\n    return null;\n  }).filter(function(x) {\n    return Boolean(x);\n  });\n};\nvar applyAttributeToOthers = function(originalTarget, parentNode, markerName, controlAttribute) {\n  var targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [originalTarget]);\n  if (!markerMap[markerName]) {\n    markerMap[markerName] = /* @__PURE__ */ new WeakMap();\n  }\n  var markerCounter = markerMap[markerName];\n  var hiddenNodes = [];\n  var elementsToKeep = /* @__PURE__ */ new Set();\n  var elementsToStop = new Set(targets);\n  var keep = function(el) {\n    if (!el || elementsToKeep.has(el)) {\n      return;\n    }\n    elementsToKeep.add(el);\n    keep(el.parentNode);\n  };\n  targets.forEach(keep);\n  var deep = function(parent) {\n    if (!parent || elementsToStop.has(parent)) {\n      return;\n    }\n    Array.prototype.forEach.call(parent.children, function(node) {\n      if (elementsToKeep.has(node)) {\n        deep(node);\n      } else {\n        try {\n          var attr = node.getAttribute(controlAttribute);\n          var alreadyHidden = attr !== null && attr !== \"false\";\n          var counterValue = (counterMap.get(node) || 0) + 1;\n          var markerValue = (markerCounter.get(node) || 0) + 1;\n          counterMap.set(node, counterValue);\n          markerCounter.set(node, markerValue);\n          hiddenNodes.push(node);\n          if (counterValue === 1 && alreadyHidden) {\n            uncontrolledNodes.set(node, true);\n          }\n          if (markerValue === 1) {\n            node.setAttribute(markerName, \"true\");\n          }\n          if (!alreadyHidden) {\n            node.setAttribute(controlAttribute, \"true\");\n          }\n        } catch (e) {\n          console.error(\"aria-hidden: cannot operate on \", node, e);\n        }\n      }\n    });\n  };\n  deep(parentNode);\n  elementsToKeep.clear();\n  lockCount++;\n  return function() {\n    hiddenNodes.forEach(function(node) {\n      var counterValue = counterMap.get(node) - 1;\n      var markerValue = markerCounter.get(node) - 1;\n      counterMap.set(node, counterValue);\n      markerCounter.set(node, markerValue);\n      if (!counterValue) {\n        if (!uncontrolledNodes.has(node)) {\n          node.removeAttribute(controlAttribute);\n        }\n        uncontrolledNodes.delete(node);\n      }\n      if (!markerValue) {\n        node.removeAttribute(markerName);\n      }\n    });\n    lockCount--;\n    if (!lockCount) {\n      counterMap = /* @__PURE__ */ new WeakMap();\n      counterMap = /* @__PURE__ */ new WeakMap();\n      uncontrolledNodes = /* @__PURE__ */ new WeakMap();\n      markerMap = {};\n    }\n  };\n};\nvar hideOthers = function(originalTarget, parentNode, markerName) {\n  if (markerName === void 0) {\n    markerName = \"data-aria-hidden\";\n  }\n  var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [originalTarget]);\n  var activeParentNode = parentNode || getDefaultParent(originalTarget);\n  if (!activeParentNode) {\n    return function() {\n      return null;\n    };\n  }\n  targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll(\"[aria-live]\")));\n  return applyAttributeToOthers(targets, activeParentNode, markerName, \"aria-hidden\");\n};\n\n// node_modules/tslib/tslib.es6.mjs\nvar __assign = function() {\n  __assign = Object.assign || function __assign2(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n    t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n        t[p[i]] = s[p[i]];\n    }\n  return t;\n}\nfunction __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\n// node_modules/react-remove-scroll/dist/es2015/Combination.js\nvar React12 = __toESM(require_react());\n\n// node_modules/react-remove-scroll/dist/es2015/UI.js\nvar React8 = __toESM(require_react());\n\n// node_modules/react-remove-scroll-bar/dist/es2015/constants.js\nvar zeroRightClassName = \"right-scroll-bar-position\";\nvar fullWidthClassName = \"width-before-scroll-bar\";\nvar noScrollbarsClassName = \"with-scroll-bars-hidden\";\nvar removedBarSizeVariable = \"--removed-body-scroll-bar-size\";\n\n// node_modules/use-callback-ref/dist/es2015/assignRef.js\nfunction assignRef(ref, value) {\n  if (typeof ref === \"function\") {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n  return ref;\n}\n\n// node_modules/use-callback-ref/dist/es2015/useRef.js\nvar import_react = __toESM(require_react());\nfunction useCallbackRef2(initialValue, callback) {\n  var ref = (0, import_react.useState)(function() {\n    return {\n      // value\n      value: initialValue,\n      // last callback\n      callback,\n      // \"memoized\" public interface\n      facade: {\n        get current() {\n          return ref.value;\n        },\n        set current(value) {\n          var last = ref.value;\n          if (last !== value) {\n            ref.value = value;\n            ref.callback(value, last);\n          }\n        }\n      }\n    };\n  })[0];\n  ref.callback = callback;\n  return ref.facade;\n}\n\n// node_modules/use-callback-ref/dist/es2015/useMergeRef.js\nvar React4 = __toESM(require_react());\nvar useIsomorphicLayoutEffect = typeof window !== \"undefined\" ? React4.useLayoutEffect : React4.useEffect;\nvar currentValues = /* @__PURE__ */ new WeakMap();\nfunction useMergeRefs(refs, defaultValue) {\n  var callbackRef = useCallbackRef2(defaultValue || null, function(newValue) {\n    return refs.forEach(function(ref) {\n      return assignRef(ref, newValue);\n    });\n  });\n  useIsomorphicLayoutEffect(function() {\n    var oldValue = currentValues.get(callbackRef);\n    if (oldValue) {\n      var prevRefs_1 = new Set(oldValue);\n      var nextRefs_1 = new Set(refs);\n      var current_1 = callbackRef.current;\n      prevRefs_1.forEach(function(ref) {\n        if (!nextRefs_1.has(ref)) {\n          assignRef(ref, null);\n        }\n      });\n      nextRefs_1.forEach(function(ref) {\n        if (!prevRefs_1.has(ref)) {\n          assignRef(ref, current_1);\n        }\n      });\n    }\n    currentValues.set(callbackRef, refs);\n  }, [refs]);\n  return callbackRef;\n}\n\n// node_modules/use-sidecar/dist/es2015/hoc.js\nvar React5 = __toESM(require_react());\n\n// node_modules/use-sidecar/dist/es2015/hook.js\nvar import_react2 = __toESM(require_react());\n\n// node_modules/use-sidecar/dist/es2015/medium.js\nfunction ItoI(a) {\n  return a;\n}\nfunction innerCreateMedium(defaults, middleware) {\n  if (middleware === void 0) {\n    middleware = ItoI;\n  }\n  var buffer = [];\n  var assigned = false;\n  var medium = {\n    read: function() {\n      if (assigned) {\n        throw new Error(\"Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.\");\n      }\n      if (buffer.length) {\n        return buffer[buffer.length - 1];\n      }\n      return defaults;\n    },\n    useMedium: function(data) {\n      var item = middleware(data, assigned);\n      buffer.push(item);\n      return function() {\n        buffer = buffer.filter(function(x) {\n          return x !== item;\n        });\n      };\n    },\n    assignSyncMedium: function(cb) {\n      assigned = true;\n      while (buffer.length) {\n        var cbs = buffer;\n        buffer = [];\n        cbs.forEach(cb);\n      }\n      buffer = {\n        push: function(x) {\n          return cb(x);\n        },\n        filter: function() {\n          return buffer;\n        }\n      };\n    },\n    assignMedium: function(cb) {\n      assigned = true;\n      var pendingQueue = [];\n      if (buffer.length) {\n        var cbs = buffer;\n        buffer = [];\n        cbs.forEach(cb);\n        pendingQueue = buffer;\n      }\n      var executeQueue = function() {\n        var cbs2 = pendingQueue;\n        pendingQueue = [];\n        cbs2.forEach(cb);\n      };\n      var cycle = function() {\n        return Promise.resolve().then(executeQueue);\n      };\n      cycle();\n      buffer = {\n        push: function(x) {\n          pendingQueue.push(x);\n          cycle();\n        },\n        filter: function(filter) {\n          pendingQueue = pendingQueue.filter(filter);\n          return buffer;\n        }\n      };\n    }\n  };\n  return medium;\n}\nfunction createSidecarMedium(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var medium = innerCreateMedium(null);\n  medium.options = __assign({ async: true, ssr: false }, options);\n  return medium;\n}\n\n// node_modules/use-sidecar/dist/es2015/renderProp.js\nvar React6 = __toESM(require_react());\nvar import_react3 = __toESM(require_react());\n\n// node_modules/use-sidecar/dist/es2015/exports.js\nvar React7 = __toESM(require_react());\nvar SideCar = function(_a) {\n  var sideCar = _a.sideCar, rest = __rest(_a, [\"sideCar\"]);\n  if (!sideCar) {\n    throw new Error(\"Sidecar: please provide `sideCar` property to import the right car\");\n  }\n  var Target = sideCar.read();\n  if (!Target) {\n    throw new Error(\"Sidecar medium not found\");\n  }\n  return React7.createElement(Target, __assign({}, rest));\n};\nSideCar.isSideCarExport = true;\nfunction exportSidecar(medium, exported) {\n  medium.useMedium(exported);\n  return SideCar;\n}\n\n// node_modules/react-remove-scroll/dist/es2015/medium.js\nvar effectCar = createSidecarMedium();\n\n// node_modules/react-remove-scroll/dist/es2015/UI.js\nvar nothing = function() {\n  return;\n};\nvar RemoveScroll = React8.forwardRef(function(props, parentRef) {\n  var ref = React8.useRef(null);\n  var _a = React8.useState({\n    onScrollCapture: nothing,\n    onWheelCapture: nothing,\n    onTouchMoveCapture: nothing\n  }), callbacks = _a[0], setCallbacks = _a[1];\n  var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noRelative = props.noRelative, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container = _b === void 0 ? \"div\" : _b, gapMode = props.gapMode, rest = __rest(props, [\"forwardProps\", \"children\", \"className\", \"removeScrollBar\", \"enabled\", \"shards\", \"sideCar\", \"noRelative\", \"noIsolation\", \"inert\", \"allowPinchZoom\", \"as\", \"gapMode\"]);\n  var SideCar2 = sideCar;\n  var containerRef = useMergeRefs([ref, parentRef]);\n  var containerProps = __assign(__assign({}, rest), callbacks);\n  return React8.createElement(\n    React8.Fragment,\n    null,\n    enabled && React8.createElement(SideCar2, { sideCar: effectCar, removeScrollBar, shards, noRelative, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref, gapMode }),\n    forwardProps ? React8.cloneElement(React8.Children.only(children), __assign(__assign({}, containerProps), { ref: containerRef })) : React8.createElement(Container, __assign({}, containerProps, { className, ref: containerRef }), children)\n  );\n});\nRemoveScroll.defaultProps = {\n  enabled: true,\n  removeScrollBar: true,\n  inert: false\n};\nRemoveScroll.classNames = {\n  fullWidth: fullWidthClassName,\n  zeroRight: zeroRightClassName\n};\n\n// node_modules/react-remove-scroll/dist/es2015/SideEffect.js\nvar React11 = __toESM(require_react());\n\n// node_modules/react-remove-scroll-bar/dist/es2015/component.js\nvar React10 = __toESM(require_react());\n\n// node_modules/react-style-singleton/dist/es2015/hook.js\nvar React9 = __toESM(require_react());\n\n// node_modules/get-nonce/dist/es2015/index.js\nvar currentNonce;\nvar getNonce = function() {\n  if (currentNonce) {\n    return currentNonce;\n  }\n  if (typeof __webpack_nonce__ !== \"undefined\") {\n    return __webpack_nonce__;\n  }\n  return void 0;\n};\n\n// node_modules/react-style-singleton/dist/es2015/singleton.js\nfunction makeStyleTag() {\n  if (!document)\n    return null;\n  var tag = document.createElement(\"style\");\n  tag.type = \"text/css\";\n  var nonce = getNonce();\n  if (nonce) {\n    tag.setAttribute(\"nonce\", nonce);\n  }\n  return tag;\n}\nfunction injectStyles(tag, css) {\n  if (tag.styleSheet) {\n    tag.styleSheet.cssText = css;\n  } else {\n    tag.appendChild(document.createTextNode(css));\n  }\n}\nfunction insertStyleTag(tag) {\n  var head = document.head || document.getElementsByTagName(\"head\")[0];\n  head.appendChild(tag);\n}\nvar stylesheetSingleton = function() {\n  var counter = 0;\n  var stylesheet = null;\n  return {\n    add: function(style) {\n      if (counter == 0) {\n        if (stylesheet = makeStyleTag()) {\n          injectStyles(stylesheet, style);\n          insertStyleTag(stylesheet);\n        }\n      }\n      counter++;\n    },\n    remove: function() {\n      counter--;\n      if (!counter && stylesheet) {\n        stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);\n        stylesheet = null;\n      }\n    }\n  };\n};\n\n// node_modules/react-style-singleton/dist/es2015/hook.js\nvar styleHookSingleton = function() {\n  var sheet = stylesheetSingleton();\n  return function(styles, isDynamic) {\n    React9.useEffect(function() {\n      sheet.add(styles);\n      return function() {\n        sheet.remove();\n      };\n    }, [styles && isDynamic]);\n  };\n};\n\n// node_modules/react-style-singleton/dist/es2015/component.js\nvar styleSingleton = function() {\n  var useStyle = styleHookSingleton();\n  var Sheet = function(_a) {\n    var styles = _a.styles, dynamic = _a.dynamic;\n    useStyle(styles, dynamic);\n    return null;\n  };\n  return Sheet;\n};\n\n// node_modules/react-remove-scroll-bar/dist/es2015/utils.js\nvar zeroGap = {\n  left: 0,\n  top: 0,\n  right: 0,\n  gap: 0\n};\nvar parse = function(x) {\n  return parseInt(x || \"\", 10) || 0;\n};\nvar getOffset = function(gapMode) {\n  var cs = window.getComputedStyle(document.body);\n  var left = cs[gapMode === \"padding\" ? \"paddingLeft\" : \"marginLeft\"];\n  var top = cs[gapMode === \"padding\" ? \"paddingTop\" : \"marginTop\"];\n  var right = cs[gapMode === \"padding\" ? \"paddingRight\" : \"marginRight\"];\n  return [parse(left), parse(top), parse(right)];\n};\nvar getGapWidth = function(gapMode) {\n  if (gapMode === void 0) {\n    gapMode = \"margin\";\n  }\n  if (typeof window === \"undefined\") {\n    return zeroGap;\n  }\n  var offsets = getOffset(gapMode);\n  var documentWidth = document.documentElement.clientWidth;\n  var windowWidth = window.innerWidth;\n  return {\n    left: offsets[0],\n    top: offsets[1],\n    right: offsets[2],\n    gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])\n  };\n};\n\n// node_modules/react-remove-scroll-bar/dist/es2015/component.js\nvar Style = styleSingleton();\nvar lockAttribute = \"data-scroll-locked\";\nvar getStyles = function(_a, allowRelative, gapMode, important) {\n  var left = _a.left, top = _a.top, right = _a.right, gap = _a.gap;\n  if (gapMode === void 0) {\n    gapMode = \"margin\";\n  }\n  return \"\\n  .\".concat(noScrollbarsClassName, \" {\\n   overflow: hidden \").concat(important, \";\\n   padding-right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  body[\").concat(lockAttribute, \"] {\\n    overflow: hidden \").concat(important, \";\\n    overscroll-behavior: contain;\\n    \").concat([\n    allowRelative && \"position: relative \".concat(important, \";\"),\n    gapMode === \"margin\" && \"\\n    padding-left: \".concat(left, \"px;\\n    padding-top: \").concat(top, \"px;\\n    padding-right: \").concat(right, \"px;\\n    margin-left:0;\\n    margin-top:0;\\n    margin-right: \").concat(gap, \"px \").concat(important, \";\\n    \"),\n    gapMode === \"padding\" && \"padding-right: \".concat(gap, \"px \").concat(important, \";\")\n  ].filter(Boolean).join(\"\"), \"\\n  }\\n  \\n  .\").concat(zeroRightClassName, \" {\\n    right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  \\n  .\").concat(fullWidthClassName, \" {\\n    margin-right: \").concat(gap, \"px \").concat(important, \";\\n  }\\n  \\n  .\").concat(zeroRightClassName, \" .\").concat(zeroRightClassName, \" {\\n    right: 0 \").concat(important, \";\\n  }\\n  \\n  .\").concat(fullWidthClassName, \" .\").concat(fullWidthClassName, \" {\\n    margin-right: 0 \").concat(important, \";\\n  }\\n  \\n  body[\").concat(lockAttribute, \"] {\\n    \").concat(removedBarSizeVariable, \": \").concat(gap, \"px;\\n  }\\n\");\n};\nvar getCurrentUseCounter = function() {\n  var counter = parseInt(document.body.getAttribute(lockAttribute) || \"0\", 10);\n  return isFinite(counter) ? counter : 0;\n};\nvar useLockAttribute = function() {\n  React10.useEffect(function() {\n    document.body.setAttribute(lockAttribute, (getCurrentUseCounter() + 1).toString());\n    return function() {\n      var newCounter = getCurrentUseCounter() - 1;\n      if (newCounter <= 0) {\n        document.body.removeAttribute(lockAttribute);\n      } else {\n        document.body.setAttribute(lockAttribute, newCounter.toString());\n      }\n    };\n  }, []);\n};\nvar RemoveScrollBar = function(_a) {\n  var noRelative = _a.noRelative, noImportant = _a.noImportant, _b = _a.gapMode, gapMode = _b === void 0 ? \"margin\" : _b;\n  useLockAttribute();\n  var gap = React10.useMemo(function() {\n    return getGapWidth(gapMode);\n  }, [gapMode]);\n  return React10.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? \"!important\" : \"\") });\n};\n\n// node_modules/react-remove-scroll/dist/es2015/aggresiveCapture.js\nvar passiveSupported = false;\nif (typeof window !== \"undefined\") {\n  try {\n    options = Object.defineProperty({}, \"passive\", {\n      get: function() {\n        passiveSupported = true;\n        return true;\n      }\n    });\n    window.addEventListener(\"test\", options, options);\n    window.removeEventListener(\"test\", options, options);\n  } catch (err) {\n    passiveSupported = false;\n  }\n}\nvar options;\nvar nonPassive = passiveSupported ? { passive: false } : false;\n\n// node_modules/react-remove-scroll/dist/es2015/handleScroll.js\nvar alwaysContainsScroll = function(node) {\n  return node.tagName === \"TEXTAREA\";\n};\nvar elementCanBeScrolled = function(node, overflow) {\n  if (!(node instanceof Element)) {\n    return false;\n  }\n  var styles = window.getComputedStyle(node);\n  return (\n    // not-not-scrollable\n    styles[overflow] !== \"hidden\" && // contains scroll inside self\n    !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node) && styles[overflow] === \"visible\")\n  );\n};\nvar elementCouldBeVScrolled = function(node) {\n  return elementCanBeScrolled(node, \"overflowY\");\n};\nvar elementCouldBeHScrolled = function(node) {\n  return elementCanBeScrolled(node, \"overflowX\");\n};\nvar locationCouldBeScrolled = function(axis, node) {\n  var ownerDocument = node.ownerDocument;\n  var current = node;\n  do {\n    if (typeof ShadowRoot !== \"undefined\" && current instanceof ShadowRoot) {\n      current = current.host;\n    }\n    var isScrollable = elementCouldBeScrolled(axis, current);\n    if (isScrollable) {\n      var _a = getScrollVariables(axis, current), scrollHeight = _a[1], clientHeight = _a[2];\n      if (scrollHeight > clientHeight) {\n        return true;\n      }\n    }\n    current = current.parentNode;\n  } while (current && current !== ownerDocument.body);\n  return false;\n};\nvar getVScrollVariables = function(_a) {\n  var scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;\n  return [\n    scrollTop,\n    scrollHeight,\n    clientHeight\n  ];\n};\nvar getHScrollVariables = function(_a) {\n  var scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;\n  return [\n    scrollLeft,\n    scrollWidth,\n    clientWidth\n  ];\n};\nvar elementCouldBeScrolled = function(axis, node) {\n  return axis === \"v\" ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);\n};\nvar getScrollVariables = function(axis, node) {\n  return axis === \"v\" ? getVScrollVariables(node) : getHScrollVariables(node);\n};\nvar getDirectionFactor = function(axis, direction) {\n  return axis === \"h\" && direction === \"rtl\" ? -1 : 1;\n};\nvar handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {\n  var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);\n  var delta = directionFactor * sourceDelta;\n  var target = event.target;\n  var targetInLock = endTarget.contains(target);\n  var shouldCancelScroll = false;\n  var isDeltaPositive = delta > 0;\n  var availableScroll = 0;\n  var availableScrollTop = 0;\n  do {\n    if (!target) {\n      break;\n    }\n    var _a = getScrollVariables(axis, target), position = _a[0], scroll_1 = _a[1], capacity = _a[2];\n    var elementScroll = scroll_1 - capacity - directionFactor * position;\n    if (position || elementScroll) {\n      if (elementCouldBeScrolled(axis, target)) {\n        availableScroll += elementScroll;\n        availableScrollTop += position;\n      }\n    }\n    var parent_1 = target.parentNode;\n    target = parent_1 && parent_1.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? parent_1.host : parent_1;\n  } while (\n    // portaled content\n    !targetInLock && target !== document.body || // self content\n    targetInLock && (endTarget.contains(target) || endTarget === target)\n  );\n  if (isDeltaPositive && (noOverscroll && Math.abs(availableScroll) < 1 || !noOverscroll && delta > availableScroll)) {\n    shouldCancelScroll = true;\n  } else if (!isDeltaPositive && (noOverscroll && Math.abs(availableScrollTop) < 1 || !noOverscroll && -delta > availableScrollTop)) {\n    shouldCancelScroll = true;\n  }\n  return shouldCancelScroll;\n};\n\n// node_modules/react-remove-scroll/dist/es2015/SideEffect.js\nvar getTouchXY = function(event) {\n  return \"changedTouches\" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];\n};\nvar getDeltaXY = function(event) {\n  return [event.deltaX, event.deltaY];\n};\nvar extractRef = function(ref) {\n  return ref && \"current\" in ref ? ref.current : ref;\n};\nvar deltaCompare = function(x, y) {\n  return x[0] === y[0] && x[1] === y[1];\n};\nvar generateStyle = function(id) {\n  return \"\\n  .block-interactivity-\".concat(id, \" {pointer-events: none;}\\n  .allow-interactivity-\").concat(id, \" {pointer-events: all;}\\n\");\n};\nvar idCounter = 0;\nvar lockStack = [];\nfunction RemoveScrollSideCar(props) {\n  var shouldPreventQueue = React11.useRef([]);\n  var touchStartRef = React11.useRef([0, 0]);\n  var activeAxis = React11.useRef();\n  var id = React11.useState(idCounter++)[0];\n  var Style2 = React11.useState(styleSingleton)[0];\n  var lastProps = React11.useRef(props);\n  React11.useEffect(function() {\n    lastProps.current = props;\n  }, [props]);\n  React11.useEffect(function() {\n    if (props.inert) {\n      document.body.classList.add(\"block-interactivity-\".concat(id));\n      var allow_1 = __spreadArray([props.lockRef.current], (props.shards || []).map(extractRef), true).filter(Boolean);\n      allow_1.forEach(function(el) {\n        return el.classList.add(\"allow-interactivity-\".concat(id));\n      });\n      return function() {\n        document.body.classList.remove(\"block-interactivity-\".concat(id));\n        allow_1.forEach(function(el) {\n          return el.classList.remove(\"allow-interactivity-\".concat(id));\n        });\n      };\n    }\n    return;\n  }, [props.inert, props.lockRef.current, props.shards]);\n  var shouldCancelEvent = React11.useCallback(function(event, parent) {\n    if (\"touches\" in event && event.touches.length === 2 || event.type === \"wheel\" && event.ctrlKey) {\n      return !lastProps.current.allowPinchZoom;\n    }\n    var touch = getTouchXY(event);\n    var touchStart = touchStartRef.current;\n    var deltaX = \"deltaX\" in event ? event.deltaX : touchStart[0] - touch[0];\n    var deltaY = \"deltaY\" in event ? event.deltaY : touchStart[1] - touch[1];\n    var currentAxis;\n    var target = event.target;\n    var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? \"h\" : \"v\";\n    if (\"touches\" in event && moveDirection === \"h\" && target.type === \"range\") {\n      return false;\n    }\n    var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);\n    if (!canBeScrolledInMainDirection) {\n      return true;\n    }\n    if (canBeScrolledInMainDirection) {\n      currentAxis = moveDirection;\n    } else {\n      currentAxis = moveDirection === \"v\" ? \"h\" : \"v\";\n      canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);\n    }\n    if (!canBeScrolledInMainDirection) {\n      return false;\n    }\n    if (!activeAxis.current && \"changedTouches\" in event && (deltaX || deltaY)) {\n      activeAxis.current = currentAxis;\n    }\n    if (!currentAxis) {\n      return true;\n    }\n    var cancelingAxis = activeAxis.current || currentAxis;\n    return handleScroll(cancelingAxis, parent, event, cancelingAxis === \"h\" ? deltaX : deltaY, true);\n  }, []);\n  var shouldPrevent = React11.useCallback(function(_event) {\n    var event = _event;\n    if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {\n      return;\n    }\n    var delta = \"deltaY\" in event ? getDeltaXY(event) : getTouchXY(event);\n    var sourceEvent = shouldPreventQueue.current.filter(function(e) {\n      return e.name === event.type && (e.target === event.target || event.target === e.shadowParent) && deltaCompare(e.delta, delta);\n    })[0];\n    if (sourceEvent && sourceEvent.should) {\n      if (event.cancelable) {\n        event.preventDefault();\n      }\n      return;\n    }\n    if (!sourceEvent) {\n      var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node) {\n        return node.contains(event.target);\n      });\n      var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;\n      if (shouldStop) {\n        if (event.cancelable) {\n          event.preventDefault();\n        }\n      }\n    }\n  }, []);\n  var shouldCancel = React11.useCallback(function(name, delta, target, should) {\n    var event = { name, delta, target, should, shadowParent: getOutermostShadowParent(target) };\n    shouldPreventQueue.current.push(event);\n    setTimeout(function() {\n      shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e) {\n        return e !== event;\n      });\n    }, 1);\n  }, []);\n  var scrollTouchStart = React11.useCallback(function(event) {\n    touchStartRef.current = getTouchXY(event);\n    activeAxis.current = void 0;\n  }, []);\n  var scrollWheel = React11.useCallback(function(event) {\n    shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));\n  }, []);\n  var scrollTouchMove = React11.useCallback(function(event) {\n    shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));\n  }, []);\n  React11.useEffect(function() {\n    lockStack.push(Style2);\n    props.setCallbacks({\n      onScrollCapture: scrollWheel,\n      onWheelCapture: scrollWheel,\n      onTouchMoveCapture: scrollTouchMove\n    });\n    document.addEventListener(\"wheel\", shouldPrevent, nonPassive);\n    document.addEventListener(\"touchmove\", shouldPrevent, nonPassive);\n    document.addEventListener(\"touchstart\", scrollTouchStart, nonPassive);\n    return function() {\n      lockStack = lockStack.filter(function(inst) {\n        return inst !== Style2;\n      });\n      document.removeEventListener(\"wheel\", shouldPrevent, nonPassive);\n      document.removeEventListener(\"touchmove\", shouldPrevent, nonPassive);\n      document.removeEventListener(\"touchstart\", scrollTouchStart, nonPassive);\n    };\n  }, []);\n  var removeScrollBar = props.removeScrollBar, inert = props.inert;\n  return React11.createElement(\n    React11.Fragment,\n    null,\n    inert ? React11.createElement(Style2, { styles: generateStyle(id) }) : null,\n    removeScrollBar ? React11.createElement(RemoveScrollBar, { noRelative: props.noRelative, gapMode: props.gapMode }) : null\n  );\n}\nfunction getOutermostShadowParent(node) {\n  var shadowParent = null;\n  while (node !== null) {\n    if (node instanceof ShadowRoot) {\n      shadowParent = node.host;\n      node = node.host;\n    }\n    node = node.parentNode;\n  }\n  return shadowParent;\n}\n\n// node_modules/react-remove-scroll/dist/es2015/sidecar.js\nvar sidecar_default = exportSidecar(effectCar, RemoveScrollSideCar);\n\n// node_modules/react-remove-scroll/dist/es2015/Combination.js\nvar ReactRemoveScroll = React12.forwardRef(function(props, ref) {\n  return React12.createElement(RemoveScroll, __assign({}, props, { ref, sideCar: sidecar_default }));\n});\nReactRemoveScroll.classNames = RemoveScroll.classNames;\nvar Combination_default = ReactRemoveScroll;\n\n// node_modules/@radix-ui/react-select/dist/index.mjs\nvar import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);\nvar OPEN_KEYS = [\" \", \"Enter\", \"ArrowUp\", \"ArrowDown\"];\nvar SELECTION_KEYS = [\" \", \"Enter\"];\nvar SELECT_NAME = \"Select\";\nvar [Collection, useCollection, createCollectionScope] = createCollection(SELECT_NAME);\nvar [createSelectContext, createSelectScope] = createContextScope(SELECT_NAME, [\n  createCollectionScope,\n  createPopperScope\n]);\nvar usePopperScope = createPopperScope();\nvar [SelectProvider, useSelectContext] = createSelectContext(SELECT_NAME);\nvar [SelectNativeOptionsProvider, useSelectNativeOptionsContext] = createSelectContext(SELECT_NAME);\nvar Select = (props) => {\n  const {\n    __scopeSelect,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    value: valueProp,\n    defaultValue,\n    onValueChange,\n    dir,\n    name,\n    autoComplete,\n    disabled,\n    required,\n    form\n  } = props;\n  const popperScope = usePopperScope(__scopeSelect);\n  const [trigger, setTrigger] = React13.useState(null);\n  const [valueNode, setValueNode] = React13.useState(null);\n  const [valueNodeHasChildren, setValueNodeHasChildren] = React13.useState(false);\n  const direction = useDirection(dir);\n  const [open, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen ?? false,\n    onChange: onOpenChange,\n    caller: SELECT_NAME\n  });\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n    caller: SELECT_NAME\n  });\n  const triggerPointerDownPosRef = React13.useRef(null);\n  const isFormControl = trigger ? form || !!trigger.closest(\"form\") : true;\n  const [nativeOptionsSet, setNativeOptionsSet] = React13.useState(/* @__PURE__ */ new Set());\n  const nativeSelectKey = Array.from(nativeOptionsSet).map((option) => option.props.value).join(\";\");\n  return (0, import_jsx_runtime2.jsx)(Root2, { ...popperScope, children: (0, import_jsx_runtime2.jsxs)(\n    SelectProvider,\n    {\n      required,\n      scope: __scopeSelect,\n      trigger,\n      onTriggerChange: setTrigger,\n      valueNode,\n      onValueNodeChange: setValueNode,\n      valueNodeHasChildren,\n      onValueNodeHasChildrenChange: setValueNodeHasChildren,\n      contentId: useId(),\n      value,\n      onValueChange: setValue,\n      open,\n      onOpenChange: setOpen,\n      dir: direction,\n      triggerPointerDownPosRef,\n      disabled,\n      children: [\n        (0, import_jsx_runtime2.jsx)(Collection.Provider, { scope: __scopeSelect, children: (0, import_jsx_runtime2.jsx)(\n          SelectNativeOptionsProvider,\n          {\n            scope: props.__scopeSelect,\n            onNativeOptionAdd: React13.useCallback((option) => {\n              setNativeOptionsSet((prev) => new Set(prev).add(option));\n            }, []),\n            onNativeOptionRemove: React13.useCallback((option) => {\n              setNativeOptionsSet((prev) => {\n                const optionsSet = new Set(prev);\n                optionsSet.delete(option);\n                return optionsSet;\n              });\n            }, []),\n            children\n          }\n        ) }),\n        isFormControl ? (0, import_jsx_runtime2.jsxs)(\n          SelectBubbleInput,\n          {\n            \"aria-hidden\": true,\n            required,\n            tabIndex: -1,\n            name,\n            autoComplete,\n            value,\n            onChange: (event) => setValue(event.target.value),\n            disabled,\n            form,\n            children: [\n              value === void 0 ? (0, import_jsx_runtime2.jsx)(\"option\", { value: \"\" }) : null,\n              Array.from(nativeOptionsSet)\n            ]\n          },\n          nativeSelectKey\n        ) : null\n      ]\n    }\n  ) });\n};\nSelect.displayName = SELECT_NAME;\nvar TRIGGER_NAME = \"SelectTrigger\";\nvar SelectTrigger = React13.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeSelect, disabled = false, ...triggerProps } = props;\n    const popperScope = usePopperScope(__scopeSelect);\n    const context = useSelectContext(TRIGGER_NAME, __scopeSelect);\n    const isDisabled = context.disabled || disabled;\n    const composedRefs = useComposedRefs(forwardedRef, context.onTriggerChange);\n    const getItems = useCollection(__scopeSelect);\n    const pointerTypeRef = React13.useRef(\"touch\");\n    const [searchRef, handleTypeaheadSearch, resetTypeahead] = useTypeaheadSearch((search) => {\n      const enabledItems = getItems().filter((item) => !item.disabled);\n      const currentItem = enabledItems.find((item) => item.value === context.value);\n      const nextItem = findNextItem(enabledItems, search, currentItem);\n      if (nextItem !== void 0) {\n        context.onValueChange(nextItem.value);\n      }\n    });\n    const handleOpen = (pointerEvent) => {\n      if (!isDisabled) {\n        context.onOpenChange(true);\n        resetTypeahead();\n      }\n      if (pointerEvent) {\n        context.triggerPointerDownPosRef.current = {\n          x: Math.round(pointerEvent.pageX),\n          y: Math.round(pointerEvent.pageY)\n        };\n      }\n    };\n    return (0, import_jsx_runtime2.jsx)(Anchor, { asChild: true, ...popperScope, children: (0, import_jsx_runtime2.jsx)(\n      Primitive.button,\n      {\n        type: \"button\",\n        role: \"combobox\",\n        \"aria-controls\": context.contentId,\n        \"aria-expanded\": context.open,\n        \"aria-required\": context.required,\n        \"aria-autocomplete\": \"none\",\n        dir: context.dir,\n        \"data-state\": context.open ? \"open\" : \"closed\",\n        disabled: isDisabled,\n        \"data-disabled\": isDisabled ? \"\" : void 0,\n        \"data-placeholder\": shouldShowPlaceholder(context.value) ? \"\" : void 0,\n        ...triggerProps,\n        ref: composedRefs,\n        onClick: composeEventHandlers(triggerProps.onClick, (event) => {\n          event.currentTarget.focus();\n          if (pointerTypeRef.current !== \"mouse\") {\n            handleOpen(event);\n          }\n        }),\n        onPointerDown: composeEventHandlers(triggerProps.onPointerDown, (event) => {\n          pointerTypeRef.current = event.pointerType;\n          const target = event.target;\n          if (target.hasPointerCapture(event.pointerId)) {\n            target.releasePointerCapture(event.pointerId);\n          }\n          if (event.button === 0 && event.ctrlKey === false && event.pointerType === \"mouse\") {\n            handleOpen(event);\n            event.preventDefault();\n          }\n        }),\n        onKeyDown: composeEventHandlers(triggerProps.onKeyDown, (event) => {\n          const isTypingAhead = searchRef.current !== \"\";\n          const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n          if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n          if (isTypingAhead && event.key === \" \") return;\n          if (OPEN_KEYS.includes(event.key)) {\n            handleOpen();\n            event.preventDefault();\n          }\n        })\n      }\n    ) });\n  }\n);\nSelectTrigger.displayName = TRIGGER_NAME;\nvar VALUE_NAME = \"SelectValue\";\nvar SelectValue = React13.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeSelect, className, style, children, placeholder = \"\", ...valueProps } = props;\n    const context = useSelectContext(VALUE_NAME, __scopeSelect);\n    const { onValueNodeHasChildrenChange } = context;\n    const hasChildren = children !== void 0;\n    const composedRefs = useComposedRefs(forwardedRef, context.onValueNodeChange);\n    useLayoutEffect2(() => {\n      onValueNodeHasChildrenChange(hasChildren);\n    }, [onValueNodeHasChildrenChange, hasChildren]);\n    return (0, import_jsx_runtime2.jsx)(\n      Primitive.span,\n      {\n        ...valueProps,\n        ref: composedRefs,\n        style: { pointerEvents: \"none\" },\n        children: shouldShowPlaceholder(context.value) ? (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, { children: placeholder }) : children\n      }\n    );\n  }\n);\nSelectValue.displayName = VALUE_NAME;\nvar ICON_NAME = \"SelectIcon\";\nvar SelectIcon = React13.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeSelect, children, ...iconProps } = props;\n    return (0, import_jsx_runtime2.jsx)(Primitive.span, { \"aria-hidden\": true, ...iconProps, ref: forwardedRef, children: children || \"▼\" });\n  }\n);\nSelectIcon.displayName = ICON_NAME;\nvar PORTAL_NAME = \"SelectPortal\";\nvar SelectPortal = (props) => {\n  return (0, import_jsx_runtime2.jsx)(Portal, { asChild: true, ...props });\n};\nSelectPortal.displayName = PORTAL_NAME;\nvar CONTENT_NAME = \"SelectContent\";\nvar SelectContent = React13.forwardRef(\n  (props, forwardedRef) => {\n    const context = useSelectContext(CONTENT_NAME, props.__scopeSelect);\n    const [fragment, setFragment] = React13.useState();\n    useLayoutEffect2(() => {\n      setFragment(new DocumentFragment());\n    }, []);\n    if (!context.open) {\n      const frag = fragment;\n      return frag ? ReactDOM.createPortal(\n        (0, import_jsx_runtime2.jsx)(SelectContentProvider, { scope: props.__scopeSelect, children: (0, import_jsx_runtime2.jsx)(Collection.Slot, { scope: props.__scopeSelect, children: (0, import_jsx_runtime2.jsx)(\"div\", { children: props.children }) }) }),\n        frag\n      ) : null;\n    }\n    return (0, import_jsx_runtime2.jsx)(SelectContentImpl, { ...props, ref: forwardedRef });\n  }\n);\nSelectContent.displayName = CONTENT_NAME;\nvar CONTENT_MARGIN = 10;\nvar [SelectContentProvider, useSelectContentContext] = createSelectContext(CONTENT_NAME);\nvar CONTENT_IMPL_NAME = \"SelectContentImpl\";\nvar Slot = createSlot(\"SelectContent.RemoveScroll\");\nvar SelectContentImpl = React13.forwardRef(\n  (props, forwardedRef) => {\n    const {\n      __scopeSelect,\n      position = \"item-aligned\",\n      onCloseAutoFocus,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      //\n      // PopperContent props\n      side,\n      sideOffset,\n      align,\n      alignOffset,\n      arrowPadding,\n      collisionBoundary,\n      collisionPadding,\n      sticky,\n      hideWhenDetached,\n      avoidCollisions,\n      //\n      ...contentProps\n    } = props;\n    const context = useSelectContext(CONTENT_NAME, __scopeSelect);\n    const [content, setContent] = React13.useState(null);\n    const [viewport, setViewport] = React13.useState(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));\n    const [selectedItem, setSelectedItem] = React13.useState(null);\n    const [selectedItemText, setSelectedItemText] = React13.useState(\n      null\n    );\n    const getItems = useCollection(__scopeSelect);\n    const [isPositioned, setIsPositioned] = React13.useState(false);\n    const firstValidItemFoundRef = React13.useRef(false);\n    React13.useEffect(() => {\n      if (content) return hideOthers(content);\n    }, [content]);\n    useFocusGuards();\n    const focusFirst2 = React13.useCallback(\n      (candidates) => {\n        const [firstItem, ...restItems] = getItems().map((item) => item.ref.current);\n        const [lastItem] = restItems.slice(-1);\n        const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n        for (const candidate of candidates) {\n          if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n          candidate == null ? void 0 : candidate.scrollIntoView({ block: \"nearest\" });\n          if (candidate === firstItem && viewport) viewport.scrollTop = 0;\n          if (candidate === lastItem && viewport) viewport.scrollTop = viewport.scrollHeight;\n          candidate == null ? void 0 : candidate.focus();\n          if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n        }\n      },\n      [getItems, viewport]\n    );\n    const focusSelectedItem = React13.useCallback(\n      () => focusFirst2([selectedItem, content]),\n      [focusFirst2, selectedItem, content]\n    );\n    React13.useEffect(() => {\n      if (isPositioned) {\n        focusSelectedItem();\n      }\n    }, [isPositioned, focusSelectedItem]);\n    const { onOpenChange, triggerPointerDownPosRef } = context;\n    React13.useEffect(() => {\n      if (content) {\n        let pointerMoveDelta = { x: 0, y: 0 };\n        const handlePointerMove = (event) => {\n          var _a, _b;\n          pointerMoveDelta = {\n            x: Math.abs(Math.round(event.pageX) - (((_a = triggerPointerDownPosRef.current) == null ? void 0 : _a.x) ?? 0)),\n            y: Math.abs(Math.round(event.pageY) - (((_b = triggerPointerDownPosRef.current) == null ? void 0 : _b.y) ?? 0))\n          };\n        };\n        const handlePointerUp = (event) => {\n          if (pointerMoveDelta.x <= 10 && pointerMoveDelta.y <= 10) {\n            event.preventDefault();\n          } else {\n            if (!content.contains(event.target)) {\n              onOpenChange(false);\n            }\n          }\n          document.removeEventListener(\"pointermove\", handlePointerMove);\n          triggerPointerDownPosRef.current = null;\n        };\n        if (triggerPointerDownPosRef.current !== null) {\n          document.addEventListener(\"pointermove\", handlePointerMove);\n          document.addEventListener(\"pointerup\", handlePointerUp, { capture: true, once: true });\n        }\n        return () => {\n          document.removeEventListener(\"pointermove\", handlePointerMove);\n          document.removeEventListener(\"pointerup\", handlePointerUp, { capture: true });\n        };\n      }\n    }, [content, onOpenChange, triggerPointerDownPosRef]);\n    React13.useEffect(() => {\n      const close = () => onOpenChange(false);\n      window.addEventListener(\"blur\", close);\n      window.addEventListener(\"resize\", close);\n      return () => {\n        window.removeEventListener(\"blur\", close);\n        window.removeEventListener(\"resize\", close);\n      };\n    }, [onOpenChange]);\n    const [searchRef, handleTypeaheadSearch] = useTypeaheadSearch((search) => {\n      const enabledItems = getItems().filter((item) => !item.disabled);\n      const currentItem = enabledItems.find((item) => item.ref.current === document.activeElement);\n      const nextItem = findNextItem(enabledItems, search, currentItem);\n      if (nextItem) {\n        setTimeout(() => nextItem.ref.current.focus());\n      }\n    });\n    const itemRefCallback = React13.useCallback(\n      (node, value, disabled) => {\n        const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;\n        const isSelectedItem = context.value !== void 0 && context.value === value;\n        if (isSelectedItem || isFirstValidItem) {\n          setSelectedItem(node);\n          if (isFirstValidItem) firstValidItemFoundRef.current = true;\n        }\n      },\n      [context.value]\n    );\n    const handleItemLeave = React13.useCallback(() => content == null ? void 0 : content.focus(), [content]);\n    const itemTextRefCallback = React13.useCallback(\n      (node, value, disabled) => {\n        const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;\n        const isSelectedItem = context.value !== void 0 && context.value === value;\n        if (isSelectedItem || isFirstValidItem) {\n          setSelectedItemText(node);\n        }\n      },\n      [context.value]\n    );\n    const SelectPosition = position === \"popper\" ? SelectPopperPosition : SelectItemAlignedPosition;\n    const popperContentProps = SelectPosition === SelectPopperPosition ? {\n      side,\n      sideOffset,\n      align,\n      alignOffset,\n      arrowPadding,\n      collisionBoundary,\n      collisionPadding,\n      sticky,\n      hideWhenDetached,\n      avoidCollisions\n    } : {};\n    return (0, import_jsx_runtime2.jsx)(\n      SelectContentProvider,\n      {\n        scope: __scopeSelect,\n        content,\n        viewport,\n        onViewportChange: setViewport,\n        itemRefCallback,\n        selectedItem,\n        onItemLeave: handleItemLeave,\n        itemTextRefCallback,\n        focusSelectedItem,\n        selectedItemText,\n        position,\n        isPositioned,\n        searchRef,\n        children: (0, import_jsx_runtime2.jsx)(Combination_default, { as: Slot, allowPinchZoom: true, children: (0, import_jsx_runtime2.jsx)(\n          FocusScope,\n          {\n            asChild: true,\n            trapped: context.open,\n            onMountAutoFocus: (event) => {\n              event.preventDefault();\n            },\n            onUnmountAutoFocus: composeEventHandlers(onCloseAutoFocus, (event) => {\n              var _a;\n              (_a = context.trigger) == null ? void 0 : _a.focus({ preventScroll: true });\n              event.preventDefault();\n            }),\n            children: (0, import_jsx_runtime2.jsx)(\n              DismissableLayer,\n              {\n                asChild: true,\n                disableOutsidePointerEvents: true,\n                onEscapeKeyDown,\n                onPointerDownOutside,\n                onFocusOutside: (event) => event.preventDefault(),\n                onDismiss: () => context.onOpenChange(false),\n                children: (0, import_jsx_runtime2.jsx)(\n                  SelectPosition,\n                  {\n                    role: \"listbox\",\n                    id: context.contentId,\n                    \"data-state\": context.open ? \"open\" : \"closed\",\n                    dir: context.dir,\n                    onContextMenu: (event) => event.preventDefault(),\n                    ...contentProps,\n                    ...popperContentProps,\n                    onPlaced: () => setIsPositioned(true),\n                    ref: composedRefs,\n                    style: {\n                      // flex layout so we can place the scroll buttons properly\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      // reset the outline by default as the content MAY get focused\n                      outline: \"none\",\n                      ...contentProps.style\n                    },\n                    onKeyDown: composeEventHandlers(contentProps.onKeyDown, (event) => {\n                      const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n                      if (event.key === \"Tab\") event.preventDefault();\n                      if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n                      if ([\"ArrowUp\", \"ArrowDown\", \"Home\", \"End\"].includes(event.key)) {\n                        const items = getItems().filter((item) => !item.disabled);\n                        let candidateNodes = items.map((item) => item.ref.current);\n                        if ([\"ArrowUp\", \"End\"].includes(event.key)) {\n                          candidateNodes = candidateNodes.slice().reverse();\n                        }\n                        if ([\"ArrowUp\", \"ArrowDown\"].includes(event.key)) {\n                          const currentElement = event.target;\n                          const currentIndex = candidateNodes.indexOf(currentElement);\n                          candidateNodes = candidateNodes.slice(currentIndex + 1);\n                        }\n                        setTimeout(() => focusFirst2(candidateNodes));\n                        event.preventDefault();\n                      }\n                    })\n                  }\n                )\n              }\n            )\n          }\n        ) })\n      }\n    );\n  }\n);\nSelectContentImpl.displayName = CONTENT_IMPL_NAME;\nvar ITEM_ALIGNED_POSITION_NAME = \"SelectItemAlignedPosition\";\nvar SelectItemAlignedPosition = React13.forwardRef((props, forwardedRef) => {\n  const { __scopeSelect, onPlaced, ...popperProps } = props;\n  const context = useSelectContext(CONTENT_NAME, __scopeSelect);\n  const contentContext = useSelectContentContext(CONTENT_NAME, __scopeSelect);\n  const [contentWrapper, setContentWrapper] = React13.useState(null);\n  const [content, setContent] = React13.useState(null);\n  const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));\n  const getItems = useCollection(__scopeSelect);\n  const shouldExpandOnScrollRef = React13.useRef(false);\n  const shouldRepositionRef = React13.useRef(true);\n  const { viewport, selectedItem, selectedItemText, focusSelectedItem } = contentContext;\n  const position = React13.useCallback(() => {\n    if (context.trigger && context.valueNode && contentWrapper && content && viewport && selectedItem && selectedItemText) {\n      const triggerRect = context.trigger.getBoundingClientRect();\n      const contentRect = content.getBoundingClientRect();\n      const valueNodeRect = context.valueNode.getBoundingClientRect();\n      const itemTextRect = selectedItemText.getBoundingClientRect();\n      if (context.dir !== \"rtl\") {\n        const itemTextOffset = itemTextRect.left - contentRect.left;\n        const left = valueNodeRect.left - itemTextOffset;\n        const leftDelta = triggerRect.left - left;\n        const minContentWidth = triggerRect.width + leftDelta;\n        const contentWidth = Math.max(minContentWidth, contentRect.width);\n        const rightEdge = window.innerWidth - CONTENT_MARGIN;\n        const clampedLeft = clamp(left, [\n          CONTENT_MARGIN,\n          // Prevents the content from going off the starting edge of the\n          // viewport. It may still go off the ending edge, but this can be\n          // controlled by the user since they may want to manage overflow in a\n          // specific way.\n          // https://github.com/radix-ui/primitives/issues/2049\n          Math.max(CONTENT_MARGIN, rightEdge - contentWidth)\n        ]);\n        contentWrapper.style.minWidth = minContentWidth + \"px\";\n        contentWrapper.style.left = clampedLeft + \"px\";\n      } else {\n        const itemTextOffset = contentRect.right - itemTextRect.right;\n        const right = window.innerWidth - valueNodeRect.right - itemTextOffset;\n        const rightDelta = window.innerWidth - triggerRect.right - right;\n        const minContentWidth = triggerRect.width + rightDelta;\n        const contentWidth = Math.max(minContentWidth, contentRect.width);\n        const leftEdge = window.innerWidth - CONTENT_MARGIN;\n        const clampedRight = clamp(right, [\n          CONTENT_MARGIN,\n          Math.max(CONTENT_MARGIN, leftEdge - contentWidth)\n        ]);\n        contentWrapper.style.minWidth = minContentWidth + \"px\";\n        contentWrapper.style.right = clampedRight + \"px\";\n      }\n      const items = getItems();\n      const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n      const itemsHeight = viewport.scrollHeight;\n      const contentStyles = window.getComputedStyle(content);\n      const contentBorderTopWidth = parseInt(contentStyles.borderTopWidth, 10);\n      const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);\n      const contentBorderBottomWidth = parseInt(contentStyles.borderBottomWidth, 10);\n      const contentPaddingBottom = parseInt(contentStyles.paddingBottom, 10);\n      const fullContentHeight = contentBorderTopWidth + contentPaddingTop + itemsHeight + contentPaddingBottom + contentBorderBottomWidth;\n      const minContentHeight = Math.min(selectedItem.offsetHeight * 5, fullContentHeight);\n      const viewportStyles = window.getComputedStyle(viewport);\n      const viewportPaddingTop = parseInt(viewportStyles.paddingTop, 10);\n      const viewportPaddingBottom = parseInt(viewportStyles.paddingBottom, 10);\n      const topEdgeToTriggerMiddle = triggerRect.top + triggerRect.height / 2 - CONTENT_MARGIN;\n      const triggerMiddleToBottomEdge = availableHeight - topEdgeToTriggerMiddle;\n      const selectedItemHalfHeight = selectedItem.offsetHeight / 2;\n      const itemOffsetMiddle = selectedItem.offsetTop + selectedItemHalfHeight;\n      const contentTopToItemMiddle = contentBorderTopWidth + contentPaddingTop + itemOffsetMiddle;\n      const itemMiddleToContentBottom = fullContentHeight - contentTopToItemMiddle;\n      const willAlignWithoutTopOverflow = contentTopToItemMiddle <= topEdgeToTriggerMiddle;\n      if (willAlignWithoutTopOverflow) {\n        const isLastItem = items.length > 0 && selectedItem === items[items.length - 1].ref.current;\n        contentWrapper.style.bottom = \"0px\";\n        const viewportOffsetBottom = content.clientHeight - viewport.offsetTop - viewport.offsetHeight;\n        const clampedTriggerMiddleToBottomEdge = Math.max(\n          triggerMiddleToBottomEdge,\n          selectedItemHalfHeight + // viewport might have padding bottom, include it to avoid a scrollable viewport\n          (isLastItem ? viewportPaddingBottom : 0) + viewportOffsetBottom + contentBorderBottomWidth\n        );\n        const height = contentTopToItemMiddle + clampedTriggerMiddleToBottomEdge;\n        contentWrapper.style.height = height + \"px\";\n      } else {\n        const isFirstItem = items.length > 0 && selectedItem === items[0].ref.current;\n        contentWrapper.style.top = \"0px\";\n        const clampedTopEdgeToTriggerMiddle = Math.max(\n          topEdgeToTriggerMiddle,\n          contentBorderTopWidth + viewport.offsetTop + // viewport might have padding top, include it to avoid a scrollable viewport\n          (isFirstItem ? viewportPaddingTop : 0) + selectedItemHalfHeight\n        );\n        const height = clampedTopEdgeToTriggerMiddle + itemMiddleToContentBottom;\n        contentWrapper.style.height = height + \"px\";\n        viewport.scrollTop = contentTopToItemMiddle - topEdgeToTriggerMiddle + viewport.offsetTop;\n      }\n      contentWrapper.style.margin = `${CONTENT_MARGIN}px 0`;\n      contentWrapper.style.minHeight = minContentHeight + \"px\";\n      contentWrapper.style.maxHeight = availableHeight + \"px\";\n      onPlaced == null ? void 0 : onPlaced();\n      requestAnimationFrame(() => shouldExpandOnScrollRef.current = true);\n    }\n  }, [\n    getItems,\n    context.trigger,\n    context.valueNode,\n    contentWrapper,\n    content,\n    viewport,\n    selectedItem,\n    selectedItemText,\n    context.dir,\n    onPlaced\n  ]);\n  useLayoutEffect2(() => position(), [position]);\n  const [contentZIndex, setContentZIndex] = React13.useState();\n  useLayoutEffect2(() => {\n    if (content) setContentZIndex(window.getComputedStyle(content).zIndex);\n  }, [content]);\n  const handleScrollButtonChange = React13.useCallback(\n    (node) => {\n      if (node && shouldRepositionRef.current === true) {\n        position();\n        focusSelectedItem == null ? void 0 : focusSelectedItem();\n        shouldRepositionRef.current = false;\n      }\n    },\n    [position, focusSelectedItem]\n  );\n  return (0, import_jsx_runtime2.jsx)(\n    SelectViewportProvider,\n    {\n      scope: __scopeSelect,\n      contentWrapper,\n      shouldExpandOnScrollRef,\n      onScrollButtonChange: handleScrollButtonChange,\n      children: (0, import_jsx_runtime2.jsx)(\n        \"div\",\n        {\n          ref: setContentWrapper,\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            position: \"fixed\",\n            zIndex: contentZIndex\n          },\n          children: (0, import_jsx_runtime2.jsx)(\n            Primitive.div,\n            {\n              ...popperProps,\n              ref: composedRefs,\n              style: {\n                // When we get the height of the content, it includes borders. If we were to set\n                // the height without having `boxSizing: 'border-box'` it would be too big.\n                boxSizing: \"border-box\",\n                // We need to ensure the content doesn't get taller than the wrapper\n                maxHeight: \"100%\",\n                ...popperProps.style\n              }\n            }\n          )\n        }\n      )\n    }\n  );\n});\nSelectItemAlignedPosition.displayName = ITEM_ALIGNED_POSITION_NAME;\nvar POPPER_POSITION_NAME = \"SelectPopperPosition\";\nvar SelectPopperPosition = React13.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeSelect,\n    align = \"start\",\n    collisionPadding = CONTENT_MARGIN,\n    ...popperProps\n  } = props;\n  const popperScope = usePopperScope(__scopeSelect);\n  return (0, import_jsx_runtime2.jsx)(\n    Content,\n    {\n      ...popperScope,\n      ...popperProps,\n      ref: forwardedRef,\n      align,\n      collisionPadding,\n      style: {\n        // Ensure border-box for floating-ui calculations\n        boxSizing: \"border-box\",\n        ...popperProps.style,\n        // re-namespace exposed content custom properties\n        ...{\n          \"--radix-select-content-transform-origin\": \"var(--radix-popper-transform-origin)\",\n          \"--radix-select-content-available-width\": \"var(--radix-popper-available-width)\",\n          \"--radix-select-content-available-height\": \"var(--radix-popper-available-height)\",\n          \"--radix-select-trigger-width\": \"var(--radix-popper-anchor-width)\",\n          \"--radix-select-trigger-height\": \"var(--radix-popper-anchor-height)\"\n        }\n      }\n    }\n  );\n});\nSelectPopperPosition.displayName = POPPER_POSITION_NAME;\nvar [SelectViewportProvider, useSelectViewportContext] = createSelectContext(CONTENT_NAME, {});\nvar VIEWPORT_NAME = \"SelectViewport\";\nvar SelectViewport = React13.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeSelect, nonce, ...viewportProps } = props;\n    const contentContext = useSelectContentContext(VIEWPORT_NAME, __scopeSelect);\n    const viewportContext = useSelectViewportContext(VIEWPORT_NAME, __scopeSelect);\n    const composedRefs = useComposedRefs(forwardedRef, contentContext.onViewportChange);\n    const prevScrollTopRef = React13.useRef(0);\n    return (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [\n      (0, import_jsx_runtime2.jsx)(\n        \"style\",\n        {\n          dangerouslySetInnerHTML: {\n            __html: `[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}`\n          },\n          nonce\n        }\n      ),\n      (0, import_jsx_runtime2.jsx)(Collection.Slot, { scope: __scopeSelect, children: (0, import_jsx_runtime2.jsx)(\n        Primitive.div,\n        {\n          \"data-radix-select-viewport\": \"\",\n          role: \"presentation\",\n          ...viewportProps,\n          ref: composedRefs,\n          style: {\n            // we use position: 'relative' here on the `viewport` so that when we call\n            // `selectedItem.offsetTop` in calculations, the offset is relative to the viewport\n            // (independent of the scrollUpButton).\n            position: \"relative\",\n            flex: 1,\n            // Viewport should only be scrollable in the vertical direction.\n            // This won't work in vertical writing modes, so we'll need to\n            // revisit this if/when that is supported\n            // https://developer.chrome.com/blog/vertical-form-controls\n            overflow: \"hidden auto\",\n            ...viewportProps.style\n          },\n          onScroll: composeEventHandlers(viewportProps.onScroll, (event) => {\n            const viewport = event.currentTarget;\n            const { contentWrapper, shouldExpandOnScrollRef } = viewportContext;\n            if ((shouldExpandOnScrollRef == null ? void 0 : shouldExpandOnScrollRef.current) && contentWrapper) {\n              const scrolledBy = Math.abs(prevScrollTopRef.current - viewport.scrollTop);\n              if (scrolledBy > 0) {\n                const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n                const cssMinHeight = parseFloat(contentWrapper.style.minHeight);\n                const cssHeight = parseFloat(contentWrapper.style.height);\n                const prevHeight = Math.max(cssMinHeight, cssHeight);\n                if (prevHeight < availableHeight) {\n                  const nextHeight = prevHeight + scrolledBy;\n                  const clampedNextHeight = Math.min(availableHeight, nextHeight);\n                  const heightDiff = nextHeight - clampedNextHeight;\n                  contentWrapper.style.height = clampedNextHeight + \"px\";\n                  if (contentWrapper.style.bottom === \"0px\") {\n                    viewport.scrollTop = heightDiff > 0 ? heightDiff : 0;\n                    contentWrapper.style.justifyContent = \"flex-end\";\n                  }\n                }\n              }\n            }\n            prevScrollTopRef.current = viewport.scrollTop;\n          })\n        }\n      ) })\n    ] });\n  }\n);\nSelectViewport.displayName = VIEWPORT_NAME;\nvar GROUP_NAME = \"SelectGroup\";\nvar [SelectGroupContextProvider, useSelectGroupContext] = createSelectContext(GROUP_NAME);\nvar SelectGroup = React13.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeSelect, ...groupProps } = props;\n    const groupId = useId();\n    return (0, import_jsx_runtime2.jsx)(SelectGroupContextProvider, { scope: __scopeSelect, id: groupId, children: (0, import_jsx_runtime2.jsx)(Primitive.div, { role: \"group\", \"aria-labelledby\": groupId, ...groupProps, ref: forwardedRef }) });\n  }\n);\nSelectGroup.displayName = GROUP_NAME;\nvar LABEL_NAME = \"SelectLabel\";\nvar SelectLabel = React13.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeSelect, ...labelProps } = props;\n    const groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);\n    return (0, import_jsx_runtime2.jsx)(Primitive.div, { id: groupContext.id, ...labelProps, ref: forwardedRef });\n  }\n);\nSelectLabel.displayName = LABEL_NAME;\nvar ITEM_NAME = \"SelectItem\";\nvar [SelectItemContextProvider, useSelectItemContext] = createSelectContext(ITEM_NAME);\nvar SelectItem = React13.forwardRef(\n  (props, forwardedRef) => {\n    const {\n      __scopeSelect,\n      value,\n      disabled = false,\n      textValue: textValueProp,\n      ...itemProps\n    } = props;\n    const context = useSelectContext(ITEM_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ITEM_NAME, __scopeSelect);\n    const isSelected = context.value === value;\n    const [textValue, setTextValue] = React13.useState(textValueProp ?? \"\");\n    const [isFocused, setIsFocused] = React13.useState(false);\n    const composedRefs = useComposedRefs(\n      forwardedRef,\n      (node) => {\n        var _a;\n        return (_a = contentContext.itemRefCallback) == null ? void 0 : _a.call(contentContext, node, value, disabled);\n      }\n    );\n    const textId = useId();\n    const pointerTypeRef = React13.useRef(\"touch\");\n    const handleSelect = () => {\n      if (!disabled) {\n        context.onValueChange(value);\n        context.onOpenChange(false);\n      }\n    };\n    if (value === \"\") {\n      throw new Error(\n        \"A <Select.Item /> must have a value prop that is not an empty string. This is because the Select value can be set to an empty string to clear the selection and show the placeholder.\"\n      );\n    }\n    return (0, import_jsx_runtime2.jsx)(\n      SelectItemContextProvider,\n      {\n        scope: __scopeSelect,\n        value,\n        disabled,\n        textId,\n        isSelected,\n        onItemTextChange: React13.useCallback((node) => {\n          setTextValue((prevTextValue) => prevTextValue || ((node == null ? void 0 : node.textContent) ?? \"\").trim());\n        }, []),\n        children: (0, import_jsx_runtime2.jsx)(\n          Collection.ItemSlot,\n          {\n            scope: __scopeSelect,\n            value,\n            disabled,\n            textValue,\n            children: (0, import_jsx_runtime2.jsx)(\n              Primitive.div,\n              {\n                role: \"option\",\n                \"aria-labelledby\": textId,\n                \"data-highlighted\": isFocused ? \"\" : void 0,\n                \"aria-selected\": isSelected && isFocused,\n                \"data-state\": isSelected ? \"checked\" : \"unchecked\",\n                \"aria-disabled\": disabled || void 0,\n                \"data-disabled\": disabled ? \"\" : void 0,\n                tabIndex: disabled ? void 0 : -1,\n                ...itemProps,\n                ref: composedRefs,\n                onFocus: composeEventHandlers(itemProps.onFocus, () => setIsFocused(true)),\n                onBlur: composeEventHandlers(itemProps.onBlur, () => setIsFocused(false)),\n                onClick: composeEventHandlers(itemProps.onClick, () => {\n                  if (pointerTypeRef.current !== \"mouse\") handleSelect();\n                }),\n                onPointerUp: composeEventHandlers(itemProps.onPointerUp, () => {\n                  if (pointerTypeRef.current === \"mouse\") handleSelect();\n                }),\n                onPointerDown: composeEventHandlers(itemProps.onPointerDown, (event) => {\n                  pointerTypeRef.current = event.pointerType;\n                }),\n                onPointerMove: composeEventHandlers(itemProps.onPointerMove, (event) => {\n                  var _a;\n                  pointerTypeRef.current = event.pointerType;\n                  if (disabled) {\n                    (_a = contentContext.onItemLeave) == null ? void 0 : _a.call(contentContext);\n                  } else if (pointerTypeRef.current === \"mouse\") {\n                    event.currentTarget.focus({ preventScroll: true });\n                  }\n                }),\n                onPointerLeave: composeEventHandlers(itemProps.onPointerLeave, (event) => {\n                  var _a;\n                  if (event.currentTarget === document.activeElement) {\n                    (_a = contentContext.onItemLeave) == null ? void 0 : _a.call(contentContext);\n                  }\n                }),\n                onKeyDown: composeEventHandlers(itemProps.onKeyDown, (event) => {\n                  var _a;\n                  const isTypingAhead = ((_a = contentContext.searchRef) == null ? void 0 : _a.current) !== \"\";\n                  if (isTypingAhead && event.key === \" \") return;\n                  if (SELECTION_KEYS.includes(event.key)) handleSelect();\n                  if (event.key === \" \") event.preventDefault();\n                })\n              }\n            )\n          }\n        )\n      }\n    );\n  }\n);\nSelectItem.displayName = ITEM_NAME;\nvar ITEM_TEXT_NAME = \"SelectItemText\";\nvar SelectItemText = React13.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeSelect, className, style, ...itemTextProps } = props;\n    const context = useSelectContext(ITEM_TEXT_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ITEM_TEXT_NAME, __scopeSelect);\n    const itemContext = useSelectItemContext(ITEM_TEXT_NAME, __scopeSelect);\n    const nativeOptionsContext = useSelectNativeOptionsContext(ITEM_TEXT_NAME, __scopeSelect);\n    const [itemTextNode, setItemTextNode] = React13.useState(null);\n    const composedRefs = useComposedRefs(\n      forwardedRef,\n      (node) => setItemTextNode(node),\n      itemContext.onItemTextChange,\n      (node) => {\n        var _a;\n        return (_a = contentContext.itemTextRefCallback) == null ? void 0 : _a.call(contentContext, node, itemContext.value, itemContext.disabled);\n      }\n    );\n    const textContent = itemTextNode == null ? void 0 : itemTextNode.textContent;\n    const nativeOption = React13.useMemo(\n      () => (0, import_jsx_runtime2.jsx)(\"option\", { value: itemContext.value, disabled: itemContext.disabled, children: textContent }, itemContext.value),\n      [itemContext.disabled, itemContext.value, textContent]\n    );\n    const { onNativeOptionAdd, onNativeOptionRemove } = nativeOptionsContext;\n    useLayoutEffect2(() => {\n      onNativeOptionAdd(nativeOption);\n      return () => onNativeOptionRemove(nativeOption);\n    }, [onNativeOptionAdd, onNativeOptionRemove, nativeOption]);\n    return (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [\n      (0, import_jsx_runtime2.jsx)(Primitive.span, { id: itemContext.textId, ...itemTextProps, ref: composedRefs }),\n      itemContext.isSelected && context.valueNode && !context.valueNodeHasChildren ? ReactDOM.createPortal(itemTextProps.children, context.valueNode) : null\n    ] });\n  }\n);\nSelectItemText.displayName = ITEM_TEXT_NAME;\nvar ITEM_INDICATOR_NAME = \"SelectItemIndicator\";\nvar SelectItemIndicator = React13.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeSelect, ...itemIndicatorProps } = props;\n    const itemContext = useSelectItemContext(ITEM_INDICATOR_NAME, __scopeSelect);\n    return itemContext.isSelected ? (0, import_jsx_runtime2.jsx)(Primitive.span, { \"aria-hidden\": true, ...itemIndicatorProps, ref: forwardedRef }) : null;\n  }\n);\nSelectItemIndicator.displayName = ITEM_INDICATOR_NAME;\nvar SCROLL_UP_BUTTON_NAME = \"SelectScrollUpButton\";\nvar SelectScrollUpButton = React13.forwardRef((props, forwardedRef) => {\n  const contentContext = useSelectContentContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);\n  const viewportContext = useSelectViewportContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);\n  const [canScrollUp, setCanScrollUp] = React13.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);\n  useLayoutEffect2(() => {\n    if (contentContext.viewport && contentContext.isPositioned) {\n      let handleScroll22 = function() {\n        const canScrollUp2 = viewport.scrollTop > 0;\n        setCanScrollUp(canScrollUp2);\n      };\n      var handleScroll2 = handleScroll22;\n      const viewport = contentContext.viewport;\n      handleScroll22();\n      viewport.addEventListener(\"scroll\", handleScroll22);\n      return () => viewport.removeEventListener(\"scroll\", handleScroll22);\n    }\n  }, [contentContext.viewport, contentContext.isPositioned]);\n  return canScrollUp ? (0, import_jsx_runtime2.jsx)(\n    SelectScrollButtonImpl,\n    {\n      ...props,\n      ref: composedRefs,\n      onAutoScroll: () => {\n        const { viewport, selectedItem } = contentContext;\n        if (viewport && selectedItem) {\n          viewport.scrollTop = viewport.scrollTop - selectedItem.offsetHeight;\n        }\n      }\n    }\n  ) : null;\n});\nSelectScrollUpButton.displayName = SCROLL_UP_BUTTON_NAME;\nvar SCROLL_DOWN_BUTTON_NAME = \"SelectScrollDownButton\";\nvar SelectScrollDownButton = React13.forwardRef((props, forwardedRef) => {\n  const contentContext = useSelectContentContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);\n  const viewportContext = useSelectViewportContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);\n  const [canScrollDown, setCanScrollDown] = React13.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);\n  useLayoutEffect2(() => {\n    if (contentContext.viewport && contentContext.isPositioned) {\n      let handleScroll22 = function() {\n        const maxScroll = viewport.scrollHeight - viewport.clientHeight;\n        const canScrollDown2 = Math.ceil(viewport.scrollTop) < maxScroll;\n        setCanScrollDown(canScrollDown2);\n      };\n      var handleScroll2 = handleScroll22;\n      const viewport = contentContext.viewport;\n      handleScroll22();\n      viewport.addEventListener(\"scroll\", handleScroll22);\n      return () => viewport.removeEventListener(\"scroll\", handleScroll22);\n    }\n  }, [contentContext.viewport, contentContext.isPositioned]);\n  return canScrollDown ? (0, import_jsx_runtime2.jsx)(\n    SelectScrollButtonImpl,\n    {\n      ...props,\n      ref: composedRefs,\n      onAutoScroll: () => {\n        const { viewport, selectedItem } = contentContext;\n        if (viewport && selectedItem) {\n          viewport.scrollTop = viewport.scrollTop + selectedItem.offsetHeight;\n        }\n      }\n    }\n  ) : null;\n});\nSelectScrollDownButton.displayName = SCROLL_DOWN_BUTTON_NAME;\nvar SelectScrollButtonImpl = React13.forwardRef((props, forwardedRef) => {\n  const { __scopeSelect, onAutoScroll, ...scrollIndicatorProps } = props;\n  const contentContext = useSelectContentContext(\"SelectScrollButton\", __scopeSelect);\n  const autoScrollTimerRef = React13.useRef(null);\n  const getItems = useCollection(__scopeSelect);\n  const clearAutoScrollTimer = React13.useCallback(() => {\n    if (autoScrollTimerRef.current !== null) {\n      window.clearInterval(autoScrollTimerRef.current);\n      autoScrollTimerRef.current = null;\n    }\n  }, []);\n  React13.useEffect(() => {\n    return () => clearAutoScrollTimer();\n  }, [clearAutoScrollTimer]);\n  useLayoutEffect2(() => {\n    var _a;\n    const activeItem = getItems().find((item) => item.ref.current === document.activeElement);\n    (_a = activeItem == null ? void 0 : activeItem.ref.current) == null ? void 0 : _a.scrollIntoView({ block: \"nearest\" });\n  }, [getItems]);\n  return (0, import_jsx_runtime2.jsx)(\n    Primitive.div,\n    {\n      \"aria-hidden\": true,\n      ...scrollIndicatorProps,\n      ref: forwardedRef,\n      style: { flexShrink: 0, ...scrollIndicatorProps.style },\n      onPointerDown: composeEventHandlers(scrollIndicatorProps.onPointerDown, () => {\n        if (autoScrollTimerRef.current === null) {\n          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\n        }\n      }),\n      onPointerMove: composeEventHandlers(scrollIndicatorProps.onPointerMove, () => {\n        var _a;\n        (_a = contentContext.onItemLeave) == null ? void 0 : _a.call(contentContext);\n        if (autoScrollTimerRef.current === null) {\n          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\n        }\n      }),\n      onPointerLeave: composeEventHandlers(scrollIndicatorProps.onPointerLeave, () => {\n        clearAutoScrollTimer();\n      })\n    }\n  );\n});\nvar SEPARATOR_NAME = \"SelectSeparator\";\nvar SelectSeparator = React13.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeSelect, ...separatorProps } = props;\n    return (0, import_jsx_runtime2.jsx)(Primitive.div, { \"aria-hidden\": true, ...separatorProps, ref: forwardedRef });\n  }\n);\nSelectSeparator.displayName = SEPARATOR_NAME;\nvar ARROW_NAME = \"SelectArrow\";\nvar SelectArrow = React13.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeSelect, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopeSelect);\n    const context = useSelectContext(ARROW_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ARROW_NAME, __scopeSelect);\n    return context.open && contentContext.position === \"popper\" ? (0, import_jsx_runtime2.jsx)(Arrow, { ...popperScope, ...arrowProps, ref: forwardedRef }) : null;\n  }\n);\nSelectArrow.displayName = ARROW_NAME;\nvar BUBBLE_INPUT_NAME = \"SelectBubbleInput\";\nvar SelectBubbleInput = React13.forwardRef(\n  ({ __scopeSelect, value, ...props }, forwardedRef) => {\n    const ref = React13.useRef(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const prevValue = usePrevious(value);\n    React13.useEffect(() => {\n      const select = ref.current;\n      if (!select) return;\n      const selectProto = window.HTMLSelectElement.prototype;\n      const descriptor = Object.getOwnPropertyDescriptor(\n        selectProto,\n        \"value\"\n      );\n      const setValue = descriptor.set;\n      if (prevValue !== value && setValue) {\n        const event = new Event(\"change\", { bubbles: true });\n        setValue.call(select, value);\n        select.dispatchEvent(event);\n      }\n    }, [prevValue, value]);\n    return (0, import_jsx_runtime2.jsx)(\n      Primitive.select,\n      {\n        ...props,\n        style: { ...VISUALLY_HIDDEN_STYLES, ...props.style },\n        ref: composedRefs,\n        defaultValue: value\n      }\n    );\n  }\n);\nSelectBubbleInput.displayName = BUBBLE_INPUT_NAME;\nfunction shouldShowPlaceholder(value) {\n  return value === \"\" || value === void 0;\n}\nfunction useTypeaheadSearch(onSearchChange) {\n  const handleSearchChange = useCallbackRef(onSearchChange);\n  const searchRef = React13.useRef(\"\");\n  const timerRef = React13.useRef(0);\n  const handleTypeaheadSearch = React13.useCallback(\n    (key) => {\n      const search = searchRef.current + key;\n      handleSearchChange(search);\n      (function updateSearch(value) {\n        searchRef.current = value;\n        window.clearTimeout(timerRef.current);\n        if (value !== \"\") timerRef.current = window.setTimeout(() => updateSearch(\"\"), 1e3);\n      })(search);\n    },\n    [handleSearchChange]\n  );\n  const resetTypeahead = React13.useCallback(() => {\n    searchRef.current = \"\";\n    window.clearTimeout(timerRef.current);\n  }, []);\n  React13.useEffect(() => {\n    return () => window.clearTimeout(timerRef.current);\n  }, []);\n  return [searchRef, handleTypeaheadSearch, resetTypeahead];\n}\nfunction findNextItem(items, search, currentItem) {\n  const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);\n  const normalizedSearch = isRepeated ? search[0] : search;\n  const currentItemIndex = currentItem ? items.indexOf(currentItem) : -1;\n  let wrappedItems = wrapArray(items, Math.max(currentItemIndex, 0));\n  const excludeCurrentItem = normalizedSearch.length === 1;\n  if (excludeCurrentItem) wrappedItems = wrappedItems.filter((v) => v !== currentItem);\n  const nextItem = wrappedItems.find(\n    (item) => item.textValue.toLowerCase().startsWith(normalizedSearch.toLowerCase())\n  );\n  return nextItem !== currentItem ? nextItem : void 0;\n}\nfunction wrapArray(array, startIndex) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\nvar Root22 = Select;\nvar Trigger = SelectTrigger;\nvar Value = SelectValue;\nvar Icon = SelectIcon;\nvar Portal2 = SelectPortal;\nvar Content2 = SelectContent;\nvar Viewport = SelectViewport;\nvar Group = SelectGroup;\nvar Label = SelectLabel;\nvar Item = SelectItem;\nvar ItemText = SelectItemText;\nvar ItemIndicator = SelectItemIndicator;\nvar ScrollUpButton = SelectScrollUpButton;\nvar ScrollDownButton = SelectScrollDownButton;\nvar Separator = SelectSeparator;\nvar Arrow2 = SelectArrow;\nexport {\n  Arrow2 as Arrow,\n  Content2 as Content,\n  Group,\n  Icon,\n  Item,\n  ItemIndicator,\n  ItemText,\n  Label,\n  Portal2 as Portal,\n  Root22 as Root,\n  ScrollDownButton,\n  ScrollUpButton,\n  Select,\n  SelectArrow,\n  SelectContent,\n  SelectGroup,\n  SelectIcon,\n  SelectItem,\n  SelectItemIndicator,\n  SelectItemText,\n  SelectLabel,\n  SelectPortal,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n  SelectViewport,\n  Separator,\n  Trigger,\n  Value,\n  Viewport,\n  createSelectScope\n};\n//# sourceMappingURL=@radix-ui_react-select.js.map\n","size_bytes":89780},"node_modules/.vite/deps/@radix-ui_react-tabs.js":{"content":"\"use client\";\nimport {\n  Presence\n} from \"./chunk-A3SLCRZJ.js\";\nimport {\n  createCollection\n} from \"./chunk-JED5GKIW.js\";\nimport {\n  useId\n} from \"./chunk-3XJBZLKW.js\";\nimport {\n  useControllableState\n} from \"./chunk-CEXEOIRA.js\";\nimport {\n  useDirection\n} from \"./chunk-4RO2SXZU.js\";\nimport {\n  composeEventHandlers,\n  useCallbackRef\n} from \"./chunk-EARV6VOU.js\";\nimport {\n  createContextScope\n} from \"./chunk-UBQ2LXDH.js\";\nimport {\n  Primitive\n} from \"./chunk-3NBYILSP.js\";\nimport \"./chunk-T2SWDQEL.js\";\nimport {\n  useComposedRefs\n} from \"./chunk-KQESEILF.js\";\nimport {\n  require_jsx_runtime\n} from \"./chunk-KBTYAULA.js\";\nimport {\n  require_react\n} from \"./chunk-QCHXOAYK.js\";\nimport {\n  __toESM\n} from \"./chunk-WOOG5QLI.js\";\n\n// node_modules/@radix-ui/react-tabs/dist/index.mjs\nvar React2 = __toESM(require_react(), 1);\n\n// node_modules/@radix-ui/react-roving-focus/dist/index.mjs\nvar React = __toESM(require_react(), 1);\nvar import_jsx_runtime = __toESM(require_jsx_runtime(), 1);\nvar ENTRY_FOCUS = \"rovingFocusGroup.onEntryFocus\";\nvar EVENT_OPTIONS = { bubbles: false, cancelable: true };\nvar GROUP_NAME = \"RovingFocusGroup\";\nvar [Collection, useCollection, createCollectionScope] = createCollection(GROUP_NAME);\nvar [createRovingFocusGroupContext, createRovingFocusGroupScope] = createContextScope(\n  GROUP_NAME,\n  [createCollectionScope]\n);\nvar [RovingFocusProvider, useRovingFocusContext] = createRovingFocusGroupContext(GROUP_NAME);\nvar RovingFocusGroup = React.forwardRef(\n  (props, forwardedRef) => {\n    return (0, import_jsx_runtime.jsx)(Collection.Provider, { scope: props.__scopeRovingFocusGroup, children: (0, import_jsx_runtime.jsx)(Collection.Slot, { scope: props.__scopeRovingFocusGroup, children: (0, import_jsx_runtime.jsx)(RovingFocusGroupImpl, { ...props, ref: forwardedRef }) }) });\n  }\n);\nRovingFocusGroup.displayName = GROUP_NAME;\nvar RovingFocusGroupImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeRovingFocusGroup,\n    orientation,\n    loop = false,\n    dir,\n    currentTabStopId: currentTabStopIdProp,\n    defaultCurrentTabStopId,\n    onCurrentTabStopIdChange,\n    onEntryFocus,\n    preventScrollOnEntryFocus = false,\n    ...groupProps\n  } = props;\n  const ref = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const direction = useDirection(dir);\n  const [currentTabStopId, setCurrentTabStopId] = useControllableState({\n    prop: currentTabStopIdProp,\n    defaultProp: defaultCurrentTabStopId ?? null,\n    onChange: onCurrentTabStopIdChange,\n    caller: GROUP_NAME\n  });\n  const [isTabbingBackOut, setIsTabbingBackOut] = React.useState(false);\n  const handleEntryFocus = useCallbackRef(onEntryFocus);\n  const getItems = useCollection(__scopeRovingFocusGroup);\n  const isClickFocusRef = React.useRef(false);\n  const [focusableItemsCount, setFocusableItemsCount] = React.useState(0);\n  React.useEffect(() => {\n    const node = ref.current;\n    if (node) {\n      node.addEventListener(ENTRY_FOCUS, handleEntryFocus);\n      return () => node.removeEventListener(ENTRY_FOCUS, handleEntryFocus);\n    }\n  }, [handleEntryFocus]);\n  return (0, import_jsx_runtime.jsx)(\n    RovingFocusProvider,\n    {\n      scope: __scopeRovingFocusGroup,\n      orientation,\n      dir: direction,\n      loop,\n      currentTabStopId,\n      onItemFocus: React.useCallback(\n        (tabStopId) => setCurrentTabStopId(tabStopId),\n        [setCurrentTabStopId]\n      ),\n      onItemShiftTab: React.useCallback(() => setIsTabbingBackOut(true), []),\n      onFocusableItemAdd: React.useCallback(\n        () => setFocusableItemsCount((prevCount) => prevCount + 1),\n        []\n      ),\n      onFocusableItemRemove: React.useCallback(\n        () => setFocusableItemsCount((prevCount) => prevCount - 1),\n        []\n      ),\n      children: (0, import_jsx_runtime.jsx)(\n        Primitive.div,\n        {\n          tabIndex: isTabbingBackOut || focusableItemsCount === 0 ? -1 : 0,\n          \"data-orientation\": orientation,\n          ...groupProps,\n          ref: composedRefs,\n          style: { outline: \"none\", ...props.style },\n          onMouseDown: composeEventHandlers(props.onMouseDown, () => {\n            isClickFocusRef.current = true;\n          }),\n          onFocus: composeEventHandlers(props.onFocus, (event) => {\n            const isKeyboardFocus = !isClickFocusRef.current;\n            if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {\n              const entryFocusEvent = new CustomEvent(ENTRY_FOCUS, EVENT_OPTIONS);\n              event.currentTarget.dispatchEvent(entryFocusEvent);\n              if (!entryFocusEvent.defaultPrevented) {\n                const items = getItems().filter((item) => item.focusable);\n                const activeItem = items.find((item) => item.active);\n                const currentItem = items.find((item) => item.id === currentTabStopId);\n                const candidateItems = [activeItem, currentItem, ...items].filter(\n                  Boolean\n                );\n                const candidateNodes = candidateItems.map((item) => item.ref.current);\n                focusFirst(candidateNodes, preventScrollOnEntryFocus);\n              }\n            }\n            isClickFocusRef.current = false;\n          }),\n          onBlur: composeEventHandlers(props.onBlur, () => setIsTabbingBackOut(false))\n        }\n      )\n    }\n  );\n});\nvar ITEM_NAME = \"RovingFocusGroupItem\";\nvar RovingFocusGroupItem = React.forwardRef(\n  (props, forwardedRef) => {\n    const {\n      __scopeRovingFocusGroup,\n      focusable = true,\n      active = false,\n      tabStopId,\n      children,\n      ...itemProps\n    } = props;\n    const autoId = useId();\n    const id = tabStopId || autoId;\n    const context = useRovingFocusContext(ITEM_NAME, __scopeRovingFocusGroup);\n    const isCurrentTabStop = context.currentTabStopId === id;\n    const getItems = useCollection(__scopeRovingFocusGroup);\n    const { onFocusableItemAdd, onFocusableItemRemove, currentTabStopId } = context;\n    React.useEffect(() => {\n      if (focusable) {\n        onFocusableItemAdd();\n        return () => onFocusableItemRemove();\n      }\n    }, [focusable, onFocusableItemAdd, onFocusableItemRemove]);\n    return (0, import_jsx_runtime.jsx)(\n      Collection.ItemSlot,\n      {\n        scope: __scopeRovingFocusGroup,\n        id,\n        focusable,\n        active,\n        children: (0, import_jsx_runtime.jsx)(\n          Primitive.span,\n          {\n            tabIndex: isCurrentTabStop ? 0 : -1,\n            \"data-orientation\": context.orientation,\n            ...itemProps,\n            ref: forwardedRef,\n            onMouseDown: composeEventHandlers(props.onMouseDown, (event) => {\n              if (!focusable) event.preventDefault();\n              else context.onItemFocus(id);\n            }),\n            onFocus: composeEventHandlers(props.onFocus, () => context.onItemFocus(id)),\n            onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {\n              if (event.key === \"Tab\" && event.shiftKey) {\n                context.onItemShiftTab();\n                return;\n              }\n              if (event.target !== event.currentTarget) return;\n              const focusIntent = getFocusIntent(event, context.orientation, context.dir);\n              if (focusIntent !== void 0) {\n                if (event.metaKey || event.ctrlKey || event.altKey || event.shiftKey) return;\n                event.preventDefault();\n                const items = getItems().filter((item) => item.focusable);\n                let candidateNodes = items.map((item) => item.ref.current);\n                if (focusIntent === \"last\") candidateNodes.reverse();\n                else if (focusIntent === \"prev\" || focusIntent === \"next\") {\n                  if (focusIntent === \"prev\") candidateNodes.reverse();\n                  const currentIndex = candidateNodes.indexOf(event.currentTarget);\n                  candidateNodes = context.loop ? wrapArray(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);\n                }\n                setTimeout(() => focusFirst(candidateNodes));\n              }\n            }),\n            children: typeof children === \"function\" ? children({ isCurrentTabStop, hasTabStop: currentTabStopId != null }) : children\n          }\n        )\n      }\n    );\n  }\n);\nRovingFocusGroupItem.displayName = ITEM_NAME;\nvar MAP_KEY_TO_FOCUS_INTENT = {\n  ArrowLeft: \"prev\",\n  ArrowUp: \"prev\",\n  ArrowRight: \"next\",\n  ArrowDown: \"next\",\n  PageUp: \"first\",\n  Home: \"first\",\n  PageDown: \"last\",\n  End: \"last\"\n};\nfunction getDirectionAwareKey(key, dir) {\n  if (dir !== \"rtl\") return key;\n  return key === \"ArrowLeft\" ? \"ArrowRight\" : key === \"ArrowRight\" ? \"ArrowLeft\" : key;\n}\nfunction getFocusIntent(event, orientation, dir) {\n  const key = getDirectionAwareKey(event.key, dir);\n  if (orientation === \"vertical\" && [\"ArrowLeft\", \"ArrowRight\"].includes(key)) return void 0;\n  if (orientation === \"horizontal\" && [\"ArrowUp\", \"ArrowDown\"].includes(key)) return void 0;\n  return MAP_KEY_TO_FOCUS_INTENT[key];\n}\nfunction focusFirst(candidates, preventScroll = false) {\n  const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n  for (const candidate of candidates) {\n    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n    candidate.focus({ preventScroll });\n    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n  }\n}\nfunction wrapArray(array, startIndex) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\nvar Root = RovingFocusGroup;\nvar Item = RovingFocusGroupItem;\n\n// node_modules/@radix-ui/react-tabs/dist/index.mjs\nvar import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);\nvar TABS_NAME = \"Tabs\";\nvar [createTabsContext, createTabsScope] = createContextScope(TABS_NAME, [\n  createRovingFocusGroupScope\n]);\nvar useRovingFocusGroupScope = createRovingFocusGroupScope();\nvar [TabsProvider, useTabsContext] = createTabsContext(TABS_NAME);\nvar Tabs = React2.forwardRef(\n  (props, forwardedRef) => {\n    const {\n      __scopeTabs,\n      value: valueProp,\n      onValueChange,\n      defaultValue,\n      orientation = \"horizontal\",\n      dir,\n      activationMode = \"automatic\",\n      ...tabsProps\n    } = props;\n    const direction = useDirection(dir);\n    const [value, setValue] = useControllableState({\n      prop: valueProp,\n      onChange: onValueChange,\n      defaultProp: defaultValue ?? \"\",\n      caller: TABS_NAME\n    });\n    return (0, import_jsx_runtime2.jsx)(\n      TabsProvider,\n      {\n        scope: __scopeTabs,\n        baseId: useId(),\n        value,\n        onValueChange: setValue,\n        orientation,\n        dir: direction,\n        activationMode,\n        children: (0, import_jsx_runtime2.jsx)(\n          Primitive.div,\n          {\n            dir: direction,\n            \"data-orientation\": orientation,\n            ...tabsProps,\n            ref: forwardedRef\n          }\n        )\n      }\n    );\n  }\n);\nTabs.displayName = TABS_NAME;\nvar TAB_LIST_NAME = \"TabsList\";\nvar TabsList = React2.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeTabs, loop = true, ...listProps } = props;\n    const context = useTabsContext(TAB_LIST_NAME, __scopeTabs);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);\n    return (0, import_jsx_runtime2.jsx)(\n      Root,\n      {\n        asChild: true,\n        ...rovingFocusGroupScope,\n        orientation: context.orientation,\n        dir: context.dir,\n        loop,\n        children: (0, import_jsx_runtime2.jsx)(\n          Primitive.div,\n          {\n            role: \"tablist\",\n            \"aria-orientation\": context.orientation,\n            ...listProps,\n            ref: forwardedRef\n          }\n        )\n      }\n    );\n  }\n);\nTabsList.displayName = TAB_LIST_NAME;\nvar TRIGGER_NAME = \"TabsTrigger\";\nvar TabsTrigger = React2.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeTabs, value, disabled = false, ...triggerProps } = props;\n    const context = useTabsContext(TRIGGER_NAME, __scopeTabs);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);\n    const triggerId = makeTriggerId(context.baseId, value);\n    const contentId = makeContentId(context.baseId, value);\n    const isSelected = value === context.value;\n    return (0, import_jsx_runtime2.jsx)(\n      Item,\n      {\n        asChild: true,\n        ...rovingFocusGroupScope,\n        focusable: !disabled,\n        active: isSelected,\n        children: (0, import_jsx_runtime2.jsx)(\n          Primitive.button,\n          {\n            type: \"button\",\n            role: \"tab\",\n            \"aria-selected\": isSelected,\n            \"aria-controls\": contentId,\n            \"data-state\": isSelected ? \"active\" : \"inactive\",\n            \"data-disabled\": disabled ? \"\" : void 0,\n            disabled,\n            id: triggerId,\n            ...triggerProps,\n            ref: forwardedRef,\n            onMouseDown: composeEventHandlers(props.onMouseDown, (event) => {\n              if (!disabled && event.button === 0 && event.ctrlKey === false) {\n                context.onValueChange(value);\n              } else {\n                event.preventDefault();\n              }\n            }),\n            onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {\n              if ([\" \", \"Enter\"].includes(event.key)) context.onValueChange(value);\n            }),\n            onFocus: composeEventHandlers(props.onFocus, () => {\n              const isAutomaticActivation = context.activationMode !== \"manual\";\n              if (!isSelected && !disabled && isAutomaticActivation) {\n                context.onValueChange(value);\n              }\n            })\n          }\n        )\n      }\n    );\n  }\n);\nTabsTrigger.displayName = TRIGGER_NAME;\nvar CONTENT_NAME = \"TabsContent\";\nvar TabsContent = React2.forwardRef(\n  (props, forwardedRef) => {\n    const { __scopeTabs, value, forceMount, children, ...contentProps } = props;\n    const context = useTabsContext(CONTENT_NAME, __scopeTabs);\n    const triggerId = makeTriggerId(context.baseId, value);\n    const contentId = makeContentId(context.baseId, value);\n    const isSelected = value === context.value;\n    const isMountAnimationPreventedRef = React2.useRef(isSelected);\n    React2.useEffect(() => {\n      const rAF = requestAnimationFrame(() => isMountAnimationPreventedRef.current = false);\n      return () => cancelAnimationFrame(rAF);\n    }, []);\n    return (0, import_jsx_runtime2.jsx)(Presence, { present: forceMount || isSelected, children: ({ present }) => (0, import_jsx_runtime2.jsx)(\n      Primitive.div,\n      {\n        \"data-state\": isSelected ? \"active\" : \"inactive\",\n        \"data-orientation\": context.orientation,\n        role: \"tabpanel\",\n        \"aria-labelledby\": triggerId,\n        hidden: !present,\n        id: contentId,\n        tabIndex: 0,\n        ...contentProps,\n        ref: forwardedRef,\n        style: {\n          ...props.style,\n          animationDuration: isMountAnimationPreventedRef.current ? \"0s\" : void 0\n        },\n        children: present && children\n      }\n    ) });\n  }\n);\nTabsContent.displayName = CONTENT_NAME;\nfunction makeTriggerId(baseId, value) {\n  return `${baseId}-trigger-${value}`;\n}\nfunction makeContentId(baseId, value) {\n  return `${baseId}-content-${value}`;\n}\nvar Root2 = Tabs;\nvar List = TabsList;\nvar Trigger = TabsTrigger;\nvar Content = TabsContent;\nexport {\n  Content,\n  List,\n  Root2 as Root,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n  Trigger,\n  createTabsScope\n};\n//# sourceMappingURL=@radix-ui_react-tabs.js.map\n","size_bytes":15486},"node_modules/debug/src/browser.js":{"content":"/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\tlet m;\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\t// eslint-disable-next-line no-return-assign\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)) && parseInt(m[1], 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug') || exports.storage.getItem('DEBUG') ;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","size_bytes":6103},"node_modules/debug/src/common.js":{"content":"\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '')\n\t\t\t.trim()\n\t\t\t.replace(/\\s+/g, ',')\n\t\t\t.split(',')\n\t\t\t.filter(Boolean);\n\n\t\tfor (const ns of split) {\n\t\t\tif (ns[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(ns.slice(1));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(ns);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given string matches a namespace template, honoring\n\t * asterisks as wildcards.\n\t *\n\t * @param {String} search\n\t * @param {String} template\n\t * @return {Boolean}\n\t */\n\tfunction matchesTemplate(search, template) {\n\t\tlet searchIndex = 0;\n\t\tlet templateIndex = 0;\n\t\tlet starIndex = -1;\n\t\tlet matchIndex = 0;\n\n\t\twhile (searchIndex < search.length) {\n\t\t\tif (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === '*')) {\n\t\t\t\t// Match character or proceed with wildcard\n\t\t\t\tif (template[templateIndex] === '*') {\n\t\t\t\t\tstarIndex = templateIndex;\n\t\t\t\t\tmatchIndex = searchIndex;\n\t\t\t\t\ttemplateIndex++; // Skip the '*'\n\t\t\t\t} else {\n\t\t\t\t\tsearchIndex++;\n\t\t\t\t\ttemplateIndex++;\n\t\t\t\t}\n\t\t\t} else if (starIndex !== -1) { // eslint-disable-line no-negated-condition\n\t\t\t\t// Backtrack to the last '*' and try to match more characters\n\t\t\t\ttemplateIndex = starIndex + 1;\n\t\t\t\tmatchIndex++;\n\t\t\t\tsearchIndex = matchIndex;\n\t\t\t} else {\n\t\t\t\treturn false; // No match\n\t\t\t}\n\t\t}\n\n\t\t// Handle trailing '*' in template\n\t\twhile (templateIndex < template.length && template[templateIndex] === '*') {\n\t\t\ttemplateIndex++;\n\t\t}\n\n\t\treturn templateIndex === template.length;\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names,\n\t\t\t...createDebug.skips.map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tfor (const skip of createDebug.skips) {\n\t\t\tif (matchesTemplate(name, skip)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (const ns of createDebug.names) {\n\t\t\tif (matchesTemplate(name, ns)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","size_bytes":6915},"server/api.ts":{"content":"import express from 'express';\nimport cors from 'cors';\nimport { db } from './db';\nimport { surveyResponses, surveyStats } from '@shared/schema';\nimport { eq, count, sql } from 'drizzle-orm';\n\nconst app = express();\nconst PORT = process.env.PORT || 3001;\n\n// Middleware\napp.use(cors());\napp.use(express.json());\n\n// Health check endpoint\napp.get('/api/health', (req, res) => {\n  res.json({ status: 'OK', timestamp: new Date().toISOString() });\n});\n\n// POST: Submit survey response\napp.post('/api/survey', async (req, res) => {\n  try {\n    const surveyData = req.body;\n    \n    // Get client IP for duplicate prevention\n    const ip = req.ip || req.connection.remoteAddress || 'unknown';\n    \n    // Insert survey response\n    const [response] = await db\n      .insert(surveyResponses)\n      .values({\n        ...surveyData,\n        ip_address: ip,\n      })\n      .returning();\n\n    // Update stats\n    await updateStats();\n\n    res.status(201).json({\n      success: true,\n      message: 'Pesquisa enviada com sucesso!',\n      id: response.id,\n    });\n  } catch (error) {\n    console.error('Erro ao salvar pesquisa:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Erro interno do servidor',\n    });\n  }\n});\n\n// GET: Dashboard statistics\napp.get('/api/stats', async (req, res) => {\n  try {\n    // Total responses\n    const [totalCount] = await db\n      .select({ count: count() })\n      .from(surveyResponses);\n\n    // Setor distribution\n    const setorStats = await db\n      .select({\n        setor: surveyResponses.setor_trabalho,\n        count: count(),\n      })\n      .from(surveyResponses)\n      .where(sql`${surveyResponses.setor_trabalho} IS NOT NULL`)\n      .groupBy(surveyResponses.setor_trabalho)\n      .orderBy(sql`count DESC`);\n\n    // Alojamento distribution\n    const alojamentoStats = await db\n      .select({\n        alojamento: surveyResponses.localizacao_alojamento,\n        count: count(),\n      })\n      .from(surveyResponses)\n      .where(sql`${surveyResponses.localizacao_alojamento} IS NOT NULL`)\n      .groupBy(surveyResponses.localizacao_alojamento)\n      .orderBy(sql`count DESC`);\n\n    // Rancho distribution  \n    const ranchoStats = await db\n      .select({\n        rancho: surveyResponses.localizacao_rancho,\n        count: count(),\n      })\n      .from(surveyResponses)\n      .where(sql`${surveyResponses.localizacao_rancho} IS NOT NULL`)\n      .groupBy(surveyResponses.localizacao_rancho)\n      .orderBy(sql`count DESC`);\n\n    // Response satisfaction levels\n    const satisfactionFields = [\n      'materiais_fornecidos', 'materiais_adequados', 'atendimento_apoio',\n      'limpeza_adequada', 'temperatura_adequada', 'iluminacao_adequada',\n      'rancho_instalacoes', 'rancho_qualidade', 'equipamentos_servico'\n    ];\n\n    const satisfactionStats = {};\n    \n    for (const field of satisfactionFields) {\n      const stats = await db\n        .select({\n          rating: sql`${surveyResponses[field]}`,\n          count: count(),\n        })\n        .from(surveyResponses)\n        .where(sql`${surveyResponses[field]} IS NOT NULL`)\n        .groupBy(sql`${surveyResponses[field]}`)\n        .orderBy(sql`count DESC`);\n      \n      satisfactionStats[field] = stats;\n    }\n\n    res.json({\n      totalResponses: totalCount.count,\n      setorDistribution: setorStats,\n      alojamentoDistribution: alojamentoStats,\n      ranchoDistribution: ranchoStats,\n      satisfactionStats,\n      lastUpdated: new Date().toISOString(),\n    });\n  } catch (error) {\n    console.error('Erro ao buscar estatísticas:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Erro ao carregar estatísticas',\n    });\n  }\n});\n\n// GET: Detailed analytics for admin dashboard\napp.get('/api/analytics', async (req, res) => {\n  try {\n    // Satisfaction averages by category\n    const satisfactionQuery = await db\n      .select({\n        // Trabalho e Materiais\n        materiais_fornecidos: sql`avg(case when ${surveyResponses.materiais_fornecidos} = 'Concordo totalmente' then 5 when ${surveyResponses.materiais_fornecidos} = 'Concordo' then 4 when ${surveyResponses.materiais_fornecidos} = 'Não concordo e nem discordo' then 3 when ${surveyResponses.materiais_fornecidos} = 'Discordo' then 2 when ${surveyResponses.materiais_fornecidos} = 'Discordo totalmente' then 1 end)`,\n        materiais_adequados: sql`avg(case when ${surveyResponses.materiais_adequados} = 'Concordo totalmente' then 5 when ${surveyResponses.materiais_adequados} = 'Concordo' then 4 when ${surveyResponses.materiais_adequados} = 'Não concordo e nem discordo' then 3 when ${surveyResponses.materiais_adequados} = 'Discordo' then 2 when ${surveyResponses.materiais_adequados} = 'Discordo totalmente' then 1 end)`,\n        atendimento_apoio: sql`avg(case when ${surveyResponses.atendimento_apoio} = 'Concordo totalmente' then 5 when ${surveyResponses.atendimento_apoio} = 'Concordo' then 4 when ${surveyResponses.atendimento_apoio} = 'Não concordo e nem discordo' then 3 when ${surveyResponses.atendimento_apoio} = 'Discordo' then 2 when ${surveyResponses.atendimento_apoio} = 'Discordo totalmente' then 1 end)`,\n        \n        // Ambiente\n        limpeza_adequada: sql`avg(case when ${surveyResponses.limpeza_adequada} = 'Concordo totalmente' then 5 when ${surveyResponses.limpeza_adequada} = 'Concordo' then 4 when ${surveyResponses.limpeza_adequada} = 'Não concordo e nem discordo' then 3 when ${surveyResponses.limpeza_adequada} = 'Discordo' then 2 when ${surveyResponses.limpeza_adequada} = 'Discordo totalmente' then 1 end)`,\n        temperatura_adequada: sql`avg(case when ${surveyResponses.temperatura_adequada} = 'Concordo totalmente' then 5 when ${surveyResponses.temperatura_adequada} = 'Concordo' then 4 when ${surveyResponses.temperatura_adequada} = 'Não concordo e nem discordo' then 3 when ${surveyResponses.temperatura_adequada} = 'Discordo' then 2 when ${surveyResponses.temperatura_adequada} = 'Discordo totalmente' then 1 end)`,\n        iluminacao_adequada: sql`avg(case when ${surveyResponses.iluminacao_adequada} = 'Concordo totalmente' then 5 when ${surveyResponses.iluminacao_adequada} = 'Concordo' then 4 when ${surveyResponses.iluminacao_adequada} = 'Não concordo e nem discordo' then 3 when ${surveyResponses.iluminacao_adequada} = 'Discordo' then 2 when ${surveyResponses.iluminacao_adequada} = 'Discordo totalmente' then 1 end)`,\n      })\n      .from(surveyResponses);\n\n    res.json({\n      satisfactionAverages: satisfactionQuery[0],\n      totalResponses: await db.select({ count: count() }).from(surveyResponses),\n    });\n  } catch (error) {\n    console.error('Erro ao buscar analytics:', error);\n    res.status(500).json({\n      success: false,\n      message: 'Erro ao carregar analytics',\n    });\n  }\n});\n\n// Helper function to update stats\nasync function updateStats() {\n  const [totalCount] = await db\n    .select({ count: count() })\n    .from(surveyResponses);\n\n  // Upsert stats record\n  const existingStats = await db.select().from(surveyStats).limit(1);\n  \n  if (existingStats.length > 0) {\n    await db\n      .update(surveyStats)\n      .set({\n        total_responses: totalCount.count,\n        last_updated: new Date(),\n      })\n      .where(eq(surveyStats.id, existingStats[0].id));\n  } else {\n    await db\n      .insert(surveyStats)\n      .values({\n        total_responses: totalCount.count,\n      });\n  }\n}\n\n// Health check\napp.get('/health', (req, res) => {\n  res.json({ status: 'ok', timestamp: new Date().toISOString() });\n});\n\napp.listen(PORT, () => {\n  console.log(`🚀 Servidor API rodando na porta ${PORT}`);\n});\n\nexport default app;","size_bytes":7605},"src/components/admin/RealTimeStats.tsx":{"content":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\nimport { Building2, Users, Clock, Home, Utensils, BarChart3, RefreshCw } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useStats, ratingToPercentage } from \"@/hooks/useStats\";\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#82ca9d'];\n\nexport function RealTimeStats() {\n  const { stats, analytics, loading, error, refetch } = useStats();\n\n  if (loading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6\">\n        {[...Array(6)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardHeader>\n              <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-8 bg-gray-200 rounded w-1/2 mb-4\"></div>\n              <div className=\"h-4 bg-gray-200 rounded w-full\"></div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex flex-col items-center justify-center p-8\">\n        <div className=\"text-red-500 mb-4\">Erro ao carregar dados: {error}</div>\n        <Button onClick={refetch} variant=\"outline\">\n          <RefreshCw className=\"w-4 h-4 mr-2\" />\n          Tentar novamente\n        </Button>\n      </div>\n    );\n  }\n\n  if (!stats) {\n    return <div className=\"text-center p-8\">Nenhum dado disponível</div>;\n  }\n\n  // Transform data for charts\n  const setorChartData = stats.setorDistribution.map(item => ({\n    name: item.setor,\n    value: item.count\n  }));\n\n  const alojamentoChartData = stats.alojamentoDistribution.map(item => ({\n    name: item.alojamento,\n    count: item.count\n  }));\n\n  const ranchoChartData = stats.ranchoDistribution.map(item => ({\n    name: item.rancho,\n    count: item.count\n  }));\n\n  // Sample satisfaction data for key questions\n  const satisfactionData = [\n    {\n      question: \"Materiais Fornecidos\",\n      ...ratingToPercentage(stats.satisfactionStats.materiais_fornecidos || [])\n    },\n    {\n      question: \"Limpeza Adequada\", \n      ...ratingToPercentage(stats.satisfactionStats.limpeza_adequada || [])\n    },\n    {\n      question: \"Rancho - Instalações\",\n      ...ratingToPercentage(stats.satisfactionStats.rancho_instalacoes || [])\n    },\n    {\n      question: \"Equipamentos Serviço\",\n      ...ratingToPercentage(stats.satisfactionStats.equipamentos_servico || [])\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      {/* Header with refresh */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Dashboard em Tempo Real</h2>\n          <p className=\"text-gray-600\">Dados atualizados: {new Date(stats.lastUpdated).toLocaleString('pt-BR')}</p>\n        </div>\n        <Button onClick={refetch} variant=\"outline\" size=\"sm\">\n          <RefreshCw className=\"w-4 h-4 mr-2\" />\n          Atualizar\n        </Button>\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total de Respostas</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.totalResponses}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {stats.totalResponses > 0 ? 'questionários completos' : 'Nenhuma resposta ainda'}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Setores Ativos</CardTitle>\n            <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.setorDistribution.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              setores participantes\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Alojamentos</CardTitle>\n            <Home className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.alojamentoDistribution.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              tipos diferentes\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Locais de Rancho</CardTitle>\n            <Utensils className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.ranchoDistribution.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              locais utilizados\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Sector Distribution */}\n        {setorChartData.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Building2 className=\"w-5 h-5\" />\n                Distribuição por Setor\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                  <Pie\n                    data={setorChartData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={false}\n                    label={({ name, value }) => `${name}: ${value}`}\n                    outerRadius={80}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                  >\n                    {setorChartData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                </PieChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Alojamento Distribution */}\n        {alojamentoChartData.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Home className=\"w-5 h-5\" />\n                Distribuição por Alojamento\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={alojamentoChartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis \n                    dataKey=\"name\" \n                    angle={-45}\n                    textAnchor=\"end\"\n                    height={100}\n                    fontSize={10}\n                  />\n                  <YAxis />\n                  <Tooltip />\n                  <Bar dataKey=\"count\" fill=\"#8884d8\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Satisfaction Overview */}\n        {satisfactionData.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"w-5 h-5\" />\n                Índices de Satisfação\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={satisfactionData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis \n                    dataKey=\"question\" \n                    angle={-45}\n                    textAnchor=\"end\"\n                    height={100}\n                    fontSize={10}\n                  />\n                  <YAxis />\n                  <Tooltip formatter={(value) => [`${value}%`, '']} />\n                  <Bar dataKey=\"concordo\" stackId=\"a\" fill=\"#22c55e\" name=\"Concordo\" />\n                  <Bar dataKey=\"neutro\" stackId=\"a\" fill=\"#eab308\" name=\"Neutro\" />\n                  <Bar dataKey=\"discordo\" stackId=\"a\" fill=\"#ef4444\" name=\"Discordo\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Rancho Distribution */}\n        {ranchoChartData.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Utensils className=\"w-5 h-5\" />\n                Utilização dos Ranchos\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={ranchoChartData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"name\" />\n                  <YAxis />\n                  <Tooltip />\n                  <Bar dataKey=\"count\" fill=\"#82ca9d\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Empty State */}\n      {stats.totalResponses === 0 && (\n        <Card className=\"text-center py-12\">\n          <CardContent>\n            <BarChart3 className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n              Nenhuma resposta ainda\n            </h3>\n            <p className=\"text-gray-600\">\n              Quando as pesquisas começarem a ser enviadas, você verá os dados aqui.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":10383},"src/hooks/useStats.ts":{"content":"import { useState, useEffect } from 'react';\n\ninterface StatsData {\n  totalResponses: number;\n  setorDistribution: Array<{ setor: string; count: number }>;\n  alojamentoDistribution: Array<{ alojamento: string; count: number }>;\n  ranchoDistribution: Array<{ rancho: string; count: number }>;\n  satisfactionStats: Record<string, Array<{ rating: string; count: number }>>;\n  lastUpdated: string;\n}\n\ninterface AnalyticsData {\n  satisfactionAverages: Record<string, number>;\n  totalResponses: Array<{ count: number }>;\n}\n\nexport const useStats = () => {\n  const [stats, setStats] = useState<StatsData | null>(null);\n  const [analytics, setAnalytics] = useState<AnalyticsData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchStats = async () => {\n    try {\n      setLoading(true);\n      const [statsResponse, analyticsResponse] = await Promise.all([\n        fetch('/api/stats'),\n        fetch('/api/analytics')\n      ]);\n\n      if (!statsResponse.ok || !analyticsResponse.ok) {\n        throw new Error('Erro ao carregar dados');\n      }\n\n      const statsData = await statsResponse.json();\n      const analyticsData = await analyticsResponse.json();\n\n      setStats(statsData);\n      setAnalytics(analyticsData);\n      setError(null);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Erro desconhecido');\n      console.error('Erro ao buscar estatísticas:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchStats();\n  }, []);\n\n  return {\n    stats,\n    analytics,\n    loading,\n    error,\n    refetch: fetchStats\n  };\n};\n\n// Helper function to convert rating text to numeric value\nexport const ratingToNumber = (rating: string): number => {\n  switch (rating) {\n    case 'Muito Satisfeito':\n    case 'Concordo totalmente':\n      return 5;\n    case 'Satisfeito':\n    case 'Concordo':\n      return 4;\n    case 'Neutro':\n    case 'Não concordo e nem discordo':\n      return 3;\n    case 'Insatisfeito':\n    case 'Discordo':\n      return 2;\n    case 'Muito Insatisfeito':\n    case 'Discordo totalmente':\n      return 1;\n    default:\n      return 3;\n  }\n};\n\n// Helper function to convert numeric rating to percentage\nexport const ratingToPercentage = (ratings: Array<{ rating: string; count: number }>) => {\n  if (!ratings || ratings.length === 0) {\n    return { concordo: 0, neutro: 0, discordo: 0 };\n  }\n\n  const total = ratings.reduce((sum, r) => sum + r.count, 0);\n  if (total === 0) {\n    return { concordo: 0, neutro: 0, discordo: 0 };\n  }\n\n  let concordo = 0;\n  let neutro = 0;\n  let discordo = 0;\n\n  ratings.forEach(({ rating, count }) => {\n    const value = ratingToNumber(rating);\n    const percentage = (count / total) * 100;\n    \n    if (value >= 4) {\n      concordo += percentage;\n    } else if (value === 3) {\n      neutro += percentage;\n    } else {\n      discordo += percentage;\n    }\n  });\n\n  return {\n    concordo: Math.round(concordo),\n    neutro: Math.round(neutro),\n    discordo: Math.round(discordo)\n  };\n};","size_bytes":3067}},"version":1}