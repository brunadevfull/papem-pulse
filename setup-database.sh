#!/bin/bash

# Script de configura√ß√£o do banco PostgreSQL para PAPEM - Sistema de Clima Organizacional
# Autor: Sistema PAPEM
# Data: $(date +%Y-%m-%d)

echo "üöÄ Iniciando configura√ß√£o do banco PostgreSQL para PAPEM..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configura√ß√µes do banco
DB_HOST="localhost"
DB_PORT="5432"
DB_NAME="papem_clima_organizacional"
DB_USER="postgres"
DB_PASS="postgres123"

echo -e "${BLUE}üìã Configura√ß√µes do banco:${NC}"
echo -e "   Host: ${DB_HOST}"
echo -e "   Porta: ${DB_PORT}"
echo -e "   Banco: ${DB_NAME}"
echo -e "   Usu√°rio: ${DB_USER}"
echo ""

# Fun√ß√£o para verificar se PostgreSQL est√° rodando
check_postgresql() {
    echo -e "${YELLOW}üîç Verificando se PostgreSQL est√° rodando...${NC}"
    
    if pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER; then
        echo -e "${GREEN}‚úÖ PostgreSQL est√° rodando!${NC}"
        return 0
    else
        echo -e "${RED}‚ùå PostgreSQL n√£o est√° rodando ou n√£o est√° acess√≠vel.${NC}"
        echo -e "${RED}   Verifique se o PostgreSQL est√° instalado e rodando.${NC}"
        echo -e "${RED}   Comando para iniciar: sudo systemctl start postgresql${NC}"
        return 1
    fi
}

# Fun√ß√£o para criar banco de dados
create_database() {
    echo -e "${YELLOW}üèóÔ∏è  Criando banco de dados '${DB_NAME}'...${NC}"
    
    # Verificar se banco j√° existe
    DB_EXISTS=$(PGPASSWORD=$DB_PASS psql -h $DB_HOST -p $DB_PORT -U $DB_USER -lqt | cut -d \| -f 1 | grep -qw $DB_NAME; echo $?)
    
    if [ $DB_EXISTS -eq 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Banco '${DB_NAME}' j√° existe. Deseja recriar? (y/N)${NC}"
        read -r response
        if [[ $response =~ ^[Yy]$ ]]; then
            echo -e "${YELLOW}üóëÔ∏è  Removendo banco existente...${NC}"
            PGPASSWORD=$DB_PASS dropdb -h $DB_HOST -p $DB_PORT -U $DB_USER $DB_NAME
        else
            echo -e "${GREEN}‚úÖ Usando banco existente.${NC}"
            return 0
        fi
    fi
    
    # Criar o banco
    if PGPASSWORD=$DB_PASS createdb -h $DB_HOST -p $DB_PORT -U $DB_USER $DB_NAME -E UTF8; then
        echo -e "${GREEN}‚úÖ Banco '${DB_NAME}' criado com sucesso!${NC}"
    else
        echo -e "${RED}‚ùå Erro ao criar banco '${DB_NAME}'.${NC}"
        return 1
    fi
}

# Fun√ß√£o para executar migrations
run_migrations() {
    echo -e "${YELLOW}üìä Executando migrations do Drizzle...${NC}"
    
    if npm run db:push; then
        echo -e "${GREEN}‚úÖ Migrations executadas com sucesso!${NC}"
    else
        echo -e "${RED}‚ùå Erro ao executar migrations.${NC}"
        return 1
    fi
}

# Fun√ß√£o para inserir dados de teste (opcional)
insert_test_data() {
    echo -e "${YELLOW}üìù Deseja inserir dados de teste? (y/N)${NC}"
    read -r response
    
    if [[ $response =~ ^[Yy]$ ]]; then
        echo -e "${YELLOW}üß™ Inserindo dados de teste...${NC}"
        
        PGPASSWORD=$DB_PASS psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME << EOF
-- Inserir resposta de teste
INSERT INTO survey_responses (
    setor_trabalho, materiais_fornecidos, materiais_adequados, atendimento_apoio,
    ambiente_trabalho, chefia_disponivel, chefia_orientacao,
    localizacao_rancho, rancho_instalacoes, rancho_qualidade,
    escala_servico, escala_atrapalha, equipamentos_servico,
    tfm_participa, tfm_incentivado, tfm_instalacoes,
    pares_auxiliam, pares_cooperacao, chefia_dialogo, comunicacao_eficaz,
    reconhecimento_trabalho, satisfacao_geral,
    comentarios_gerais, ip_address
) VALUES (
    'SECRETARIA', 'Concordo totalmente', 'Concordo', 'Concordo totalmente',
    'Concordo totalmente', 'Concordo', 'Concordo totalmente',
    'Distrito', 'Concordo', 'Concordo totalmente',
    'Oficiais', 'Discordo', 'Concordo',
    'Concordo', 'Concordo totalmente', 'Concordo',
    'Concordo', 'Concordo', 'Concordo totalmente', 'Concordo',
    'Concordo', 'Concordo totalmente',
    'Resposta de teste inserida automaticamente pelo script de setup.', '127.0.0.1'
);

-- Inserir estat√≠sticas iniciais
INSERT INTO survey_stats (total_responses) VALUES (1);
EOF
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úÖ Dados de teste inseridos com sucesso!${NC}"
        else
            echo -e "${RED}‚ùå Erro ao inserir dados de teste.${NC}"
        fi
    fi
}

# Fun√ß√£o para testar conex√£o
test_connection() {
    echo -e "${YELLOW}üîó Testando conex√£o com o banco...${NC}"
    
    if PGPASSWORD=$DB_PASS psql -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -c "SELECT 'Conex√£o OK!' as status, NOW() as timestamp;"; then
        echo -e "${GREEN}‚úÖ Conex√£o testada com sucesso!${NC}"
    else
        echo -e "${RED}‚ùå Erro na conex√£o com o banco.${NC}"
        return 1
    fi
}

# Fun√ß√£o principal
main() {
    echo -e "${BLUE}üéØ PAPEM - Sistema de Pesquisa de Clima Organizacional${NC}"
    echo -e "${BLUE}   Configura√ß√£o do Banco PostgreSQL${NC}"
    echo ""
    
    # Verificar PostgreSQL
    if ! check_postgresql; then
        exit 1
    fi
    
    # Criar banco
    if ! create_database; then
        exit 1
    fi
    
    # Executar migrations
    if ! run_migrations; then
        exit 1
    fi
    
    # Testar conex√£o
    if ! test_connection; then
        exit 1
    fi
    
    # Dados de teste (opcional)
    insert_test_data
    
    echo ""
    echo -e "${GREEN}üéâ Configura√ß√£o conclu√≠da com sucesso!${NC}"
    echo -e "${GREEN}   O banco PostgreSQL est√° pronto para uso.${NC}"
    echo ""
    echo -e "${BLUE}üìã Informa√ß√µes de conex√£o:${NC}"
    echo -e "   URL: postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}"
    echo -e "   Host: ${DB_HOST}"
    echo -e "   Porta: ${DB_PORT}"
    echo -e "   Banco: ${DB_NAME}"
    echo -e "   Usu√°rio: ${DB_USER}"
    echo ""
    echo -e "${YELLOW}üí° Para iniciar a aplica√ß√£o: npm run dev${NC}"
    echo -e "${YELLOW}üí° Para acessar o banco: psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME}${NC}"
}

# Executar fun√ß√£o principal
main "$@"
